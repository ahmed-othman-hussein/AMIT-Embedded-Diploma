
digitalclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000438e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  0000438e  00004422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008b  00800122  00800122  000044e4  2**0
                  ALLOC
  3 .stab         000037ec  00000000  00000000  000044e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016b2  00000000  00000000  00007cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009382  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000094e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00009671  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c7b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d73c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000db7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e40c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0d 20 	jmp	0x401a	; 0x401a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 40 20 	jmp	0x4080	; 0x4080 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <main>
      8a:	0c 94 c5 21 	jmp	0x438a	; 0x438a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 49 21 	jmp	0x4292	; 0x4292 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 65 21 	jmp	0x42ca	; 0x42ca <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 49 21 	jmp	0x4292	; 0x4292 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 65 21 	jmp	0x42ca	; 0x42ca <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 21 	jmp	0x42a2	; 0x42a2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e7       	ldi	r22, 0x78	; 120
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6d 21 	jmp	0x42da	; 0x42da <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 75 21 	jmp	0x42ea	; 0x42ea <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Dio_init>:
}Port_t;



void Dio_init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	29 97       	sbiw	r28, 0x09	; 9
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Pa0; counter <PinCount ; counter++)
     cb2:	1b 82       	std	Y+3, r1	; 0x03
     cb4:	cf c1       	rjmp	.+926    	; 0x1054 <Dio_init+0x3b6>
	{
		currentPin = counter % 8;
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	87 70       	andi	r24, 0x07	; 7
     cba:	8a 83       	std	Y+2, r24	; 0x02
		currentPort = counter /8;
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	86 95       	lsr	r24
     cc0:	86 95       	lsr	r24
     cc2:	86 95       	lsr	r24
     cc4:	89 83       	std	Y+1, r24	; 0x01
		if(Dio_pin_cfg[counter].pinDirection ==output)
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	fc 01       	movw	r30, r24
     cd2:	e0 58       	subi	r30, 0x80	; 128
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	80 81       	ld	r24, Z
     cd8:	88 23       	and	r24, r24
     cda:	09 f0       	breq	.+2      	; 0xcde <Dio_init+0x40>
     cdc:	6f c0       	rjmp	.+222    	; 0xdbc <Dio_init+0x11e>
		{
			switch (currentPort)
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	39 87       	std	Y+9, r19	; 0x09
     ce6:	28 87       	std	Y+8, r18	; 0x08
     ce8:	88 85       	ldd	r24, Y+8	; 0x08
     cea:	99 85       	ldd	r25, Y+9	; 0x09
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	91 05       	cpc	r25, r1
     cf0:	49 f1       	breq	.+82     	; 0xd44 <Dio_init+0xa6>
     cf2:	28 85       	ldd	r18, Y+8	; 0x08
     cf4:	39 85       	ldd	r19, Y+9	; 0x09
     cf6:	22 30       	cpi	r18, 0x02	; 2
     cf8:	31 05       	cpc	r19, r1
     cfa:	2c f4       	brge	.+10     	; 0xd06 <Dio_init+0x68>
     cfc:	88 85       	ldd	r24, Y+8	; 0x08
     cfe:	99 85       	ldd	r25, Y+9	; 0x09
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	61 f0       	breq	.+24     	; 0xd1c <Dio_init+0x7e>
     d04:	a4 c1       	rjmp	.+840    	; 0x104e <Dio_init+0x3b0>
     d06:	28 85       	ldd	r18, Y+8	; 0x08
     d08:	39 85       	ldd	r19, Y+9	; 0x09
     d0a:	22 30       	cpi	r18, 0x02	; 2
     d0c:	31 05       	cpc	r19, r1
     d0e:	71 f1       	breq	.+92     	; 0xd6c <Dio_init+0xce>
     d10:	88 85       	ldd	r24, Y+8	; 0x08
     d12:	99 85       	ldd	r25, Y+9	; 0x09
     d14:	83 30       	cpi	r24, 0x03	; 3
     d16:	91 05       	cpc	r25, r1
     d18:	e9 f1       	breq	.+122    	; 0xd94 <Dio_init+0xf6>
     d1a:	99 c1       	rjmp	.+818    	; 0x104e <Dio_init+0x3b0>
			{
			case PortA:
				SET_BIT(DDRA,currentPin);
     d1c:	aa e3       	ldi	r26, 0x3A	; 58
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ea e3       	ldi	r30, 0x3A	; 58
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <Dio_init+0x9c>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <Dio_init+0x98>
     d3e:	84 2b       	or	r24, r20
     d40:	8c 93       	st	X, r24
     d42:	85 c1       	rjmp	.+778    	; 0x104e <Dio_init+0x3b0>
				break;
			case PortB:
				SET_BIT(DDRB,currentPin);
     d44:	a7 e3       	ldi	r26, 0x37	; 55
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e7 e3       	ldi	r30, 0x37	; 55
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	48 2f       	mov	r20, r24
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 2e       	mov	r0, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <Dio_init+0xc4>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <Dio_init+0xc0>
     d66:	84 2b       	or	r24, r20
     d68:	8c 93       	st	X, r24
     d6a:	71 c1       	rjmp	.+738    	; 0x104e <Dio_init+0x3b0>
				break;
			case PortC:
				SET_BIT(DDRC,currentPin);
     d6c:	a4 e3       	ldi	r26, 0x34	; 52
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e4 e3       	ldi	r30, 0x34	; 52
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <Dio_init+0xec>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <Dio_init+0xe8>
     d8e:	84 2b       	or	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	5d c1       	rjmp	.+698    	; 0x104e <Dio_init+0x3b0>
				break;
			case PortD:
				SET_BIT(DDRD,currentPin);
     d94:	a1 e3       	ldi	r26, 0x31	; 49
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e1 e3       	ldi	r30, 0x31	; 49
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	48 2f       	mov	r20, r24
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <Dio_init+0x114>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <Dio_init+0x110>
     db6:	84 2b       	or	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	49 c1       	rjmp	.+658    	; 0x104e <Dio_init+0x3b0>
				break;
			}
		}
		else if(Dio_pin_cfg[counter].pinDirection ==input)
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	88 2f       	mov	r24, r24
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	fc 01       	movw	r30, r24
     dc8:	e0 58       	subi	r30, 0x80	; 128
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	80 81       	ld	r24, Z
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <Dio_init+0x136>
     dd2:	74 c0       	rjmp	.+232    	; 0xebc <Dio_init+0x21e>
		{
			switch (currentPort)
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	3f 83       	std	Y+7, r19	; 0x07
     ddc:	2e 83       	std	Y+6, r18	; 0x06
     dde:	8e 81       	ldd	r24, Y+6	; 0x06
     de0:	9f 81       	ldd	r25, Y+7	; 0x07
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	91 05       	cpc	r25, r1
     de6:	59 f1       	breq	.+86     	; 0xe3e <Dio_init+0x1a0>
     de8:	2e 81       	ldd	r18, Y+6	; 0x06
     dea:	3f 81       	ldd	r19, Y+7	; 0x07
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	31 05       	cpc	r19, r1
     df0:	2c f4       	brge	.+10     	; 0xdfc <Dio_init+0x15e>
     df2:	8e 81       	ldd	r24, Y+6	; 0x06
     df4:	9f 81       	ldd	r25, Y+7	; 0x07
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	69 f0       	breq	.+26     	; 0xe14 <Dio_init+0x176>
     dfa:	29 c1       	rjmp	.+594    	; 0x104e <Dio_init+0x3b0>
     dfc:	2e 81       	ldd	r18, Y+6	; 0x06
     dfe:	3f 81       	ldd	r19, Y+7	; 0x07
     e00:	22 30       	cpi	r18, 0x02	; 2
     e02:	31 05       	cpc	r19, r1
     e04:	89 f1       	breq	.+98     	; 0xe68 <Dio_init+0x1ca>
     e06:	8e 81       	ldd	r24, Y+6	; 0x06
     e08:	9f 81       	ldd	r25, Y+7	; 0x07
     e0a:	83 30       	cpi	r24, 0x03	; 3
     e0c:	91 05       	cpc	r25, r1
     e0e:	09 f4       	brne	.+2      	; 0xe12 <Dio_init+0x174>
     e10:	40 c0       	rjmp	.+128    	; 0xe92 <Dio_init+0x1f4>
     e12:	1d c1       	rjmp	.+570    	; 0x104e <Dio_init+0x3b0>
			{
			case PortA:
				CLR_BIT(DDRA,currentPin);
     e14:	aa e3       	ldi	r26, 0x3A	; 58
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	ea e3       	ldi	r30, 0x3A	; 58
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <Dio_init+0x194>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <Dio_init+0x190>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	08 c1       	rjmp	.+528    	; 0x104e <Dio_init+0x3b0>
				break;
			case PortB:
				CLR_BIT(DDRB,currentPin);
     e3e:	a7 e3       	ldi	r26, 0x37	; 55
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e7 e3       	ldi	r30, 0x37	; 55
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <Dio_init+0x1be>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <Dio_init+0x1ba>
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	f3 c0       	rjmp	.+486    	; 0x104e <Dio_init+0x3b0>
				break;
			case PortC:
				CLR_BIT(DDRC,currentPin);
     e68:	a4 e3       	ldi	r26, 0x34	; 52
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e4 e3       	ldi	r30, 0x34	; 52
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <Dio_init+0x1e8>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <Dio_init+0x1e4>
     e8a:	80 95       	com	r24
     e8c:	84 23       	and	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	de c0       	rjmp	.+444    	; 0x104e <Dio_init+0x3b0>
				break;
			case PortD:
				CLR_BIT(DDRD,currentPin);
     e92:	a1 e3       	ldi	r26, 0x31	; 49
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e1 e3       	ldi	r30, 0x31	; 49
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <Dio_init+0x212>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <Dio_init+0x20e>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	c9 c0       	rjmp	.+402    	; 0x104e <Dio_init+0x3b0>
				break;
			}

		}
		else if(Dio_pin_cfg[counter].pinDirection ==inputwithpullup)
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	fc 01       	movw	r30, r24
     ec8:	e0 58       	subi	r30, 0x80	; 128
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	80 81       	ld	r24, Z
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	09 f0       	breq	.+2      	; 0xed4 <Dio_init+0x236>
     ed2:	bd c0       	rjmp	.+378    	; 0x104e <Dio_init+0x3b0>
		{
			switch (currentPort)
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	3d 83       	std	Y+5, r19	; 0x05
     edc:	2c 83       	std	Y+4, r18	; 0x04
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	9d 81       	ldd	r25, Y+5	; 0x05
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	91 05       	cpc	r25, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <Dio_init+0x24c>
     ee8:	3e c0       	rjmp	.+124    	; 0xf66 <Dio_init+0x2c8>
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	2c f4       	brge	.+10     	; 0xefe <Dio_init+0x260>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	71 f0       	breq	.+28     	; 0xf18 <Dio_init+0x27a>
     efc:	a8 c0       	rjmp	.+336    	; 0x104e <Dio_init+0x3b0>
     efe:	2c 81       	ldd	r18, Y+4	; 0x04
     f00:	3d 81       	ldd	r19, Y+5	; 0x05
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <Dio_init+0x26c>
     f08:	55 c0       	rjmp	.+170    	; 0xfb4 <Dio_init+0x316>
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <Dio_init+0x278>
     f14:	76 c0       	rjmp	.+236    	; 0x1002 <Dio_init+0x364>
     f16:	9b c0       	rjmp	.+310    	; 0x104e <Dio_init+0x3b0>
			{
			case PortA:
				CLR_BIT(DDRA,currentPin);
     f18:	aa e3       	ldi	r26, 0x3A	; 58
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	ea e3       	ldi	r30, 0x3A	; 58
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <Dio_init+0x296>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	2a 95       	dec	r18
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <Dio_init+0x292>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
				SET_BIT(PORTA,currentPin);
     f3e:	ab e3       	ldi	r26, 0x3B	; 59
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	eb e3       	ldi	r30, 0x3B	; 59
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <Dio_init+0x2be>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <Dio_init+0x2ba>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	74 c0       	rjmp	.+232    	; 0x104e <Dio_init+0x3b0>
				break;
			case PortB:
				CLR_BIT(DDRB,currentPin);
     f66:	a7 e3       	ldi	r26, 0x37	; 55
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e7 e3       	ldi	r30, 0x37	; 55
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <Dio_init+0x2e4>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	2a 95       	dec	r18
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <Dio_init+0x2e0>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24
				SET_BIT(PORTB,currentPin);
     f8c:	a8 e3       	ldi	r26, 0x38	; 56
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e8 e3       	ldi	r30, 0x38	; 56
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <Dio_init+0x30c>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <Dio_init+0x308>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	4d c0       	rjmp	.+154    	; 0x104e <Dio_init+0x3b0>

				break;
			case PortC:
				CLR_BIT(DDRC,currentPin);
     fb4:	a4 e3       	ldi	r26, 0x34	; 52
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e4 e3       	ldi	r30, 0x34	; 52
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <Dio_init+0x332>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	2a 95       	dec	r18
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <Dio_init+0x32e>
     fd4:	80 95       	com	r24
     fd6:	84 23       	and	r24, r20
     fd8:	8c 93       	st	X, r24
				SET_BIT(PORTC,currentPin);
     fda:	a5 e3       	ldi	r26, 0x35	; 53
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e5 e3       	ldi	r30, 0x35	; 53
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <Dio_init+0x35a>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <Dio_init+0x356>
     ffc:	84 2b       	or	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	26 c0       	rjmp	.+76     	; 0x104e <Dio_init+0x3b0>

				break;
			case PortD:
				CLR_BIT(DDRD,currentPin);
    1002:	a1 e3       	ldi	r26, 0x31	; 49
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e1 e3       	ldi	r30, 0x31	; 49
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <Dio_init+0x380>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	2a 95       	dec	r18
    1020:	e2 f7       	brpl	.-8      	; 0x101a <Dio_init+0x37c>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
				SET_BIT(PORTD,currentPin);
    1028:	a2 e3       	ldi	r26, 0x32	; 50
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e2 e3       	ldi	r30, 0x32	; 50
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <Dio_init+0x3a8>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <Dio_init+0x3a4>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
void Dio_init(void)
{
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Pa0; counter <PinCount ; counter++)
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	8b 83       	std	Y+3, r24	; 0x03
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	80 32       	cpi	r24, 0x20	; 32
    1058:	08 f4       	brcc	.+2      	; 0x105c <Dio_init+0x3be>
    105a:	2d ce       	rjmp	.-934    	; 0xcb6 <Dio_init+0x18>
		}


	}

}
    105c:	29 96       	adiw	r28, 0x09	; 9
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <Dio_setPin>:

/*  */
void Dio_setPin(Dio_Pin_t pinNum)
{
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	00 d0       	rcall	.+0      	; 0x1074 <Dio_setPin+0x6>
    1074:	00 d0       	rcall	.+0      	; 0x1076 <Dio_setPin+0x8>
    1076:	0f 92       	push	r0
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	8b 83       	std	Y+3, r24	; 0x03

	uint8 currentPin ;
	uint8 currentPort;

	currentPin = pinNum % 8;
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	87 70       	andi	r24, 0x07	; 7
    1082:	8a 83       	std	Y+2, r24	; 0x02
	currentPort = pinNum /8;
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	86 95       	lsr	r24
    1088:	86 95       	lsr	r24
    108a:	86 95       	lsr	r24
    108c:	89 83       	std	Y+1, r24	; 0x01
	switch (currentPort)
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	3d 83       	std	Y+5, r19	; 0x05
    1096:	2c 83       	std	Y+4, r18	; 0x04
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	9d 81       	ldd	r25, Y+5	; 0x05
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	91 05       	cpc	r25, r1
    10a0:	49 f1       	breq	.+82     	; 0x10f4 <Dio_setPin+0x86>
    10a2:	2c 81       	ldd	r18, Y+4	; 0x04
    10a4:	3d 81       	ldd	r19, Y+5	; 0x05
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	31 05       	cpc	r19, r1
    10aa:	2c f4       	brge	.+10     	; 0x10b6 <Dio_setPin+0x48>
    10ac:	8c 81       	ldd	r24, Y+4	; 0x04
    10ae:	9d 81       	ldd	r25, Y+5	; 0x05
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	61 f0       	breq	.+24     	; 0x10cc <Dio_setPin+0x5e>
    10b4:	5a c0       	rjmp	.+180    	; 0x116a <Dio_setPin+0xfc>
    10b6:	2c 81       	ldd	r18, Y+4	; 0x04
    10b8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ba:	22 30       	cpi	r18, 0x02	; 2
    10bc:	31 05       	cpc	r19, r1
    10be:	71 f1       	breq	.+92     	; 0x111c <Dio_setPin+0xae>
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	9d 81       	ldd	r25, Y+5	; 0x05
    10c4:	83 30       	cpi	r24, 0x03	; 3
    10c6:	91 05       	cpc	r25, r1
    10c8:	e9 f1       	breq	.+122    	; 0x1144 <Dio_setPin+0xd6>
    10ca:	4f c0       	rjmp	.+158    	; 0x116a <Dio_setPin+0xfc>
	{
	case PortA:
		SET_BIT(PORTA,currentPin);
    10cc:	ab e3       	ldi	r26, 0x3B	; 59
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	eb e3       	ldi	r30, 0x3B	; 59
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <Dio_setPin+0x7c>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <Dio_setPin+0x78>
    10ee:	84 2b       	or	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	3b c0       	rjmp	.+118    	; 0x116a <Dio_setPin+0xfc>
		break;
	case PortB:
		SET_BIT(PORTB,currentPin);
    10f4:	a8 e3       	ldi	r26, 0x38	; 56
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e8 e3       	ldi	r30, 0x38	; 56
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <Dio_setPin+0xa4>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <Dio_setPin+0xa0>
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	27 c0       	rjmp	.+78     	; 0x116a <Dio_setPin+0xfc>
		break;
	case PortC:
		SET_BIT(PORTC,currentPin);
    111c:	a5 e3       	ldi	r26, 0x35	; 53
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <Dio_setPin+0xcc>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <Dio_setPin+0xc8>
    113e:	84 2b       	or	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	13 c0       	rjmp	.+38     	; 0x116a <Dio_setPin+0xfc>
		break;
	case PortD:
		SET_BIT(PORTD,currentPin);
    1144:	a2 e3       	ldi	r26, 0x32	; 50
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e2 e3       	ldi	r30, 0x32	; 50
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <Dio_setPin+0xf4>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <Dio_setPin+0xf0>
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
		break;
	}

}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <Dio_clrPin>:


void Dio_clrPin(Dio_Pin_t pinNum)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <Dio_clrPin+0x6>
    1180:	00 d0       	rcall	.+0      	; 0x1182 <Dio_clrPin+0x8>
    1182:	0f 92       	push	r0
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	8b 83       	std	Y+3, r24	; 0x03
	uint8 currentPin ;
	uint8 currentPort;

	currentPin = pinNum % 8;
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	87 70       	andi	r24, 0x07	; 7
    118e:	8a 83       	std	Y+2, r24	; 0x02
	currentPort = pinNum /8;
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	86 95       	lsr	r24
    1194:	86 95       	lsr	r24
    1196:	86 95       	lsr	r24
    1198:	89 83       	std	Y+1, r24	; 0x01
	switch (currentPort)
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	3d 83       	std	Y+5, r19	; 0x05
    11a2:	2c 83       	std	Y+4, r18	; 0x04
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	91 05       	cpc	r25, r1
    11ac:	59 f1       	breq	.+86     	; 0x1204 <Dio_clrPin+0x8a>
    11ae:	2c 81       	ldd	r18, Y+4	; 0x04
    11b0:	3d 81       	ldd	r19, Y+5	; 0x05
    11b2:	22 30       	cpi	r18, 0x02	; 2
    11b4:	31 05       	cpc	r19, r1
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <Dio_clrPin+0x48>
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	9d 81       	ldd	r25, Y+5	; 0x05
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	69 f0       	breq	.+26     	; 0x11da <Dio_clrPin+0x60>
    11c0:	5f c0       	rjmp	.+190    	; 0x1280 <Dio_clrPin+0x106>
    11c2:	2c 81       	ldd	r18, Y+4	; 0x04
    11c4:	3d 81       	ldd	r19, Y+5	; 0x05
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	89 f1       	breq	.+98     	; 0x122e <Dio_clrPin+0xb4>
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	91 05       	cpc	r25, r1
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <Dio_clrPin+0x5e>
    11d6:	40 c0       	rjmp	.+128    	; 0x1258 <Dio_clrPin+0xde>
    11d8:	53 c0       	rjmp	.+166    	; 0x1280 <Dio_clrPin+0x106>
	{
	case PortA:
		CLR_BIT(PORTA,currentPin);
    11da:	ab e3       	ldi	r26, 0x3B	; 59
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	eb e3       	ldi	r30, 0x3B	; 59
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <Dio_clrPin+0x7e>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <Dio_clrPin+0x7a>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	3e c0       	rjmp	.+124    	; 0x1280 <Dio_clrPin+0x106>
		break;
	case PortB:
		CLR_BIT(PORTB,currentPin);
    1204:	a8 e3       	ldi	r26, 0x38	; 56
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e8 e3       	ldi	r30, 0x38	; 56
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <Dio_clrPin+0xa8>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <Dio_clrPin+0xa4>
    1226:	80 95       	com	r24
    1228:	84 23       	and	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	29 c0       	rjmp	.+82     	; 0x1280 <Dio_clrPin+0x106>
		break;
	case PortC:
		CLR_BIT(PORTC,currentPin);
    122e:	a5 e3       	ldi	r26, 0x35	; 53
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e5 e3       	ldi	r30, 0x35	; 53
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <Dio_clrPin+0xd2>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <Dio_clrPin+0xce>
    1250:	80 95       	com	r24
    1252:	84 23       	and	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	14 c0       	rjmp	.+40     	; 0x1280 <Dio_clrPin+0x106>
		break;
	case PortD:
		CLR_BIT(PORTD,currentPin);
    1258:	a2 e3       	ldi	r26, 0x32	; 50
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <Dio_clrPin+0xfc>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <Dio_clrPin+0xf8>
    127a:	80 95       	com	r24
    127c:	84 23       	and	r24, r20
    127e:	8c 93       	st	X, r24
		break;
	}



}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <Dio_getPin>:

Dio_pinState_t Dio_getPin(Dio_Pin_t pinNum)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	27 97       	sbiw	r28, 0x07	; 7
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	8d 83       	std	Y+5, r24	; 0x05
	uint8 currentPin;
	uint8 currentPort;
	uint8 value;
	Dio_pinState_t retValue;
	currentPin = pinNum % 8;
    12a6:	8d 81       	ldd	r24, Y+5	; 0x05
    12a8:	87 70       	andi	r24, 0x07	; 7
    12aa:	8c 83       	std	Y+4, r24	; 0x04
	currentPort = pinNum /8;
    12ac:	8d 81       	ldd	r24, Y+5	; 0x05
    12ae:	86 95       	lsr	r24
    12b0:	86 95       	lsr	r24
    12b2:	86 95       	lsr	r24
    12b4:	8b 83       	std	Y+3, r24	; 0x03
	switch(currentPort)
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3f 83       	std	Y+7, r19	; 0x07
    12be:	2e 83       	std	Y+6, r18	; 0x06
    12c0:	4e 81       	ldd	r20, Y+6	; 0x06
    12c2:	5f 81       	ldd	r21, Y+7	; 0x07
    12c4:	41 30       	cpi	r20, 0x01	; 1
    12c6:	51 05       	cpc	r21, r1
    12c8:	41 f1       	breq	.+80     	; 0x131a <Dio_getPin+0x8a>
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	9f 81       	ldd	r25, Y+7	; 0x07
    12ce:	82 30       	cpi	r24, 0x02	; 2
    12d0:	91 05       	cpc	r25, r1
    12d2:	34 f4       	brge	.+12     	; 0x12e0 <Dio_getPin+0x50>
    12d4:	2e 81       	ldd	r18, Y+6	; 0x06
    12d6:	3f 81       	ldd	r19, Y+7	; 0x07
    12d8:	21 15       	cp	r18, r1
    12da:	31 05       	cpc	r19, r1
    12dc:	61 f0       	breq	.+24     	; 0x12f6 <Dio_getPin+0x66>
    12de:	52 c0       	rjmp	.+164    	; 0x1384 <Dio_getPin+0xf4>
    12e0:	4e 81       	ldd	r20, Y+6	; 0x06
    12e2:	5f 81       	ldd	r21, Y+7	; 0x07
    12e4:	42 30       	cpi	r20, 0x02	; 2
    12e6:	51 05       	cpc	r21, r1
    12e8:	51 f1       	breq	.+84     	; 0x133e <Dio_getPin+0xae>
    12ea:	8e 81       	ldd	r24, Y+6	; 0x06
    12ec:	9f 81       	ldd	r25, Y+7	; 0x07
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	91 05       	cpc	r25, r1
    12f2:	b9 f1       	breq	.+110    	; 0x1362 <Dio_getPin+0xd2>
    12f4:	47 c0       	rjmp	.+142    	; 0x1384 <Dio_getPin+0xf4>
	{
	case PortA:
		value =GET_BIT(PINA,currentPin);
    12f6:	e9 e3       	ldi	r30, 0x39	; 57
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a9 01       	movw	r20, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <Dio_getPin+0x7e>
    130a:	55 95       	asr	r21
    130c:	47 95       	ror	r20
    130e:	8a 95       	dec	r24
    1310:	e2 f7       	brpl	.-8      	; 0x130a <Dio_getPin+0x7a>
    1312:	ca 01       	movw	r24, r20
    1314:	81 70       	andi	r24, 0x01	; 1
    1316:	8a 83       	std	Y+2, r24	; 0x02
    1318:	35 c0       	rjmp	.+106    	; 0x1384 <Dio_getPin+0xf4>
		break;
	case PortB:
		value =GET_BIT(PINB,currentPin);
    131a:	e6 e3       	ldi	r30, 0x36	; 54
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a9 01       	movw	r20, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <Dio_getPin+0xa2>
    132e:	55 95       	asr	r21
    1330:	47 95       	ror	r20
    1332:	8a 95       	dec	r24
    1334:	e2 f7       	brpl	.-8      	; 0x132e <Dio_getPin+0x9e>
    1336:	ca 01       	movw	r24, r20
    1338:	81 70       	andi	r24, 0x01	; 1
    133a:	8a 83       	std	Y+2, r24	; 0x02
    133c:	23 c0       	rjmp	.+70     	; 0x1384 <Dio_getPin+0xf4>
		break;
	case PortC:
		value =GET_BIT(PINC,currentPin);
    133e:	e3 e3       	ldi	r30, 0x33	; 51
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	88 2f       	mov	r24, r24
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a9 01       	movw	r20, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <Dio_getPin+0xc6>
    1352:	55 95       	asr	r21
    1354:	47 95       	ror	r20
    1356:	8a 95       	dec	r24
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <Dio_getPin+0xc2>
    135a:	ca 01       	movw	r24, r20
    135c:	81 70       	andi	r24, 0x01	; 1
    135e:	8a 83       	std	Y+2, r24	; 0x02
    1360:	11 c0       	rjmp	.+34     	; 0x1384 <Dio_getPin+0xf4>
		break;
	case PortD:
		value =GET_BIT(PIND,currentPin);
    1362:	e0 e3       	ldi	r30, 0x30	; 48
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a9 01       	movw	r20, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <Dio_getPin+0xea>
    1376:	55 95       	asr	r21
    1378:	47 95       	ror	r20
    137a:	8a 95       	dec	r24
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <Dio_getPin+0xe6>
    137e:	ca 01       	movw	r24, r20
    1380:	81 70       	andi	r24, 0x01	; 1
    1382:	8a 83       	std	Y+2, r24	; 0x02
		break;

	}
	if(0 == value)
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	88 23       	and	r24, r24
    1388:	11 f4       	brne	.+4      	; 0x138e <Dio_getPin+0xfe>
	{
		retValue= Dio_LOW;
    138a:	19 82       	std	Y+1, r1	; 0x01
    138c:	05 c0       	rjmp	.+10     	; 0x1398 <Dio_getPin+0x108>
	}


	else if (1 == value)
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	11 f4       	brne	.+4      	; 0x1398 <Dio_getPin+0x108>
	{
		retValue= Dio_HIGH;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* do nothing*/
	}

	return retValue;
    1398:	89 81       	ldd	r24, Y+1	; 0x01
}
    139a:	27 96       	adiw	r28, 0x07	; 7
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <ExtInterrupt_init>:
#include "Register.h"
#include "ExtInterrupt.h"
#include "ExtInterrupt_cfg.h"

void ExtInterrupt_init(void)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
#elif  EXT_INT0_MODE == MODE_FALLING_EDGE
	CLR_BIT(MCUCR,MCUR_ISC00);
	SET_BIT(MCUCR,MCUR_ISC01);

#else
	CLR_BIT(MCUCR,MCUR_ISC01);
    13b4:	a5 e5       	ldi	r26, 0x55	; 85
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e5 e5       	ldi	r30, 0x55	; 85
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8d 7f       	andi	r24, 0xFD	; 253
    13c0:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUR_ISC00);
    13c2:	a5 e5       	ldi	r26, 0x55	; 85
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e5       	ldi	r30, 0x55	; 85
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	81 60       	ori	r24, 0x01	; 1
    13ce:	8c 93       	st	X, r24
#endif


}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <KEYPADH_Init>:


/********************************************************************/
/*   this fun is used to initialize the keypad                      */
/********************************************************************/
void KEYPADH_Init(void){}
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <KEYPADH_Task>:
/********************************************************************/
/*   this fun updates the  status of the buttons on the keypad 	    */
/*               as values from 0~16                                */
/********************************************************************/
void KEYPADH_Task(void)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	0f 92       	push	r0
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62


	uint8 i;
	for(i=0;i<KeyPadNum;i++)
    13ee:	19 82       	std	Y+1, r1	; 0x01
    13f0:	50 c1       	rjmp	.+672    	; 0x1692 <KEYPADH_Task+0x2ae>
	{
		/*clear prev status*/
		uint16ResultLocl[i]=0;
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	fc 01       	movw	r30, r24
    13fe:	ee 5d       	subi	r30, 0xDE	; 222
    1400:	fe 4f       	sbci	r31, 0xFE	; 254
    1402:	11 82       	std	Z+1, r1	; 0x01
    1404:	10 82       	st	Z, r1
		if(keypadH_cfg[i].keypad_Mode==KeypadH_Mode_PullUp)
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	c9 01       	movw	r24, r18
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	82 0f       	add	r24, r18
    141c:	93 1f       	adc	r25, r19
    141e:	fc 01       	movw	r30, r24
    1420:	e8 52       	subi	r30, 0x28	; 40
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	80 81       	ld	r24, Z
    1426:	88 23       	and	r24, r24
    1428:	09 f0       	breq	.+2      	; 0x142c <KEYPADH_Task+0x48>
    142a:	30 c1       	rjmp	.+608    	; 0x168c <KEYPADH_Task+0x2a8>
		{
			/*phase one */
			Dio_clrPin(keypadH_cfg[i].KeypadOutpuPins[0]);
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	c9 01       	movw	r24, r18
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	82 0f       	add	r24, r18
    1442:	93 1f       	adc	r25, r19
    1444:	fc 01       	movw	r30, r24
    1446:	ec 52       	subi	r30, 0x2C	; 44
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	80 81       	ld	r24, Z
    144c:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>
			Dio_setPin(keypadH_cfg[i].KeypadOutpuPins[1]);
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	c9 01       	movw	r24, r18
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	82 0f       	add	r24, r18
    1466:	93 1f       	adc	r25, r19
    1468:	fc 01       	movw	r30, r24
    146a:	eb 52       	subi	r30, 0x2B	; 43
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	80 81       	ld	r24, Z
    1470:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
			Dio_setPin(keypadH_cfg[i].KeypadOutpuPins[2]);
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	c9 01       	movw	r24, r18
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	82 0f       	add	r24, r18
    148a:	93 1f       	adc	r25, r19
    148c:	fc 01       	movw	r30, r24
    148e:	ea 52       	subi	r30, 0x2A	; 42
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	80 81       	ld	r24, Z
    1494:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
			Dio_setPin(keypadH_cfg[i].KeypadOutpuPins[3]);
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	c9 01       	movw	r24, r18
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	82 0f       	add	r24, r18
    14ae:	93 1f       	adc	r25, r19
    14b0:	fc 01       	movw	r30, r24
    14b2:	e9 52       	subi	r30, 0x29	; 41
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	80 81       	ld	r24, Z
    14b8:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
			SetSWResult(i,0);
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <SetSWResult>
			/*phase two */
			Dio_setPin(keypadH_cfg[i].KeypadOutpuPins[0]);
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	c9 01       	movw	r24, r18
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	82 0f       	add	r24, r18
    14da:	93 1f       	adc	r25, r19
    14dc:	fc 01       	movw	r30, r24
    14de:	ec 52       	subi	r30, 0x2C	; 44
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
			Dio_clrPin(keypadH_cfg[i].KeypadOutpuPins[1]);
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	c9 01       	movw	r24, r18
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	82 0f       	add	r24, r18
    14fe:	93 1f       	adc	r25, r19
    1500:	fc 01       	movw	r30, r24
    1502:	eb 52       	subi	r30, 0x2B	; 43
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	80 81       	ld	r24, Z
    1508:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>
			Dio_setPin(keypadH_cfg[i].KeypadOutpuPins[2]);
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	c9 01       	movw	r24, r18
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	82 0f       	add	r24, r18
    1522:	93 1f       	adc	r25, r19
    1524:	fc 01       	movw	r30, r24
    1526:	ea 52       	subi	r30, 0x2A	; 42
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 81       	ld	r24, Z
    152c:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
			Dio_setPin(keypadH_cfg[i].KeypadOutpuPins[3]);
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	c9 01       	movw	r24, r18
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	82 0f       	add	r24, r18
    1546:	93 1f       	adc	r25, r19
    1548:	fc 01       	movw	r30, r24
    154a:	e9 52       	subi	r30, 0x29	; 41
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	80 81       	ld	r24, Z
    1550:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
			SetSWResult(i,1);
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	0e 94 8c 0b 	call	0x1718	; 0x1718 <SetSWResult>
			/*phase three */
			Dio_setPin(keypadH_cfg[i].KeypadOutpuPins[0]);
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	c9 01       	movw	r24, r18
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	82 0f       	add	r24, r18
    1572:	93 1f       	adc	r25, r19
    1574:	fc 01       	movw	r30, r24
    1576:	ec 52       	subi	r30, 0x2C	; 44
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	80 81       	ld	r24, Z
    157c:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
			Dio_setPin(keypadH_cfg[i].KeypadOutpuPins[1]);
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	c9 01       	movw	r24, r18
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	82 0f       	add	r24, r18
    1596:	93 1f       	adc	r25, r19
    1598:	fc 01       	movw	r30, r24
    159a:	eb 52       	subi	r30, 0x2B	; 43
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	80 81       	ld	r24, Z
    15a0:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
			Dio_clrPin(keypadH_cfg[i].KeypadOutpuPins[2]);
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	c9 01       	movw	r24, r18
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	82 0f       	add	r24, r18
    15ba:	93 1f       	adc	r25, r19
    15bc:	fc 01       	movw	r30, r24
    15be:	ea 52       	subi	r30, 0x2A	; 42
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	80 81       	ld	r24, Z
    15c4:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>
			Dio_setPin(keypadH_cfg[i].KeypadOutpuPins[3]);
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	c9 01       	movw	r24, r18
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	82 0f       	add	r24, r18
    15de:	93 1f       	adc	r25, r19
    15e0:	fc 01       	movw	r30, r24
    15e2:	e9 52       	subi	r30, 0x29	; 41
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	80 81       	ld	r24, Z
    15e8:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
			SetSWResult(i,2);
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	62 e0       	ldi	r22, 0x02	; 2
    15f0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <SetSWResult>
			/*phase four */
			Dio_setPin(keypadH_cfg[i].KeypadOutpuPins[0]);
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	c9 01       	movw	r24, r18
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	82 0f       	add	r24, r18
    160a:	93 1f       	adc	r25, r19
    160c:	fc 01       	movw	r30, r24
    160e:	ec 52       	subi	r30, 0x2C	; 44
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	80 81       	ld	r24, Z
    1614:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
			Dio_setPin(keypadH_cfg[i].KeypadOutpuPins[1]);
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	c9 01       	movw	r24, r18
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	82 0f       	add	r24, r18
    162e:	93 1f       	adc	r25, r19
    1630:	fc 01       	movw	r30, r24
    1632:	eb 52       	subi	r30, 0x2B	; 43
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	80 81       	ld	r24, Z
    1638:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
			Dio_setPin(keypadH_cfg[i].KeypadOutpuPins[2]);
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	c9 01       	movw	r24, r18
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	82 0f       	add	r24, r18
    1652:	93 1f       	adc	r25, r19
    1654:	fc 01       	movw	r30, r24
    1656:	ea 52       	subi	r30, 0x2A	; 42
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
			Dio_clrPin(keypadH_cfg[i].KeypadOutpuPins[3]);
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	c9 01       	movw	r24, r18
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	82 0f       	add	r24, r18
    1676:	93 1f       	adc	r25, r19
    1678:	fc 01       	movw	r30, r24
    167a:	e9 52       	subi	r30, 0x29	; 41
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>
			SetSWResult(i,3);
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	63 e0       	ldi	r22, 0x03	; 3
    1688:	0e 94 8c 0b 	call	0x1718	; 0x1718 <SetSWResult>
void KEYPADH_Task(void)
{


	uint8 i;
	for(i=0;i<KeyPadNum;i++)
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	90 91 d9 00 	lds	r25, 0x00D9
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	89 17       	cp	r24, r25
    169a:	08 f4       	brcc	.+2      	; 0x169e <KEYPADH_Task+0x2ba>
    169c:	aa ce       	rjmp	.-684    	; 0x13f2 <KEYPADH_Task+0xe>





}
    169e:	0f 90       	pop	r0
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <KEYPADH_GetValue>:
/********************************************************************/
/*   this fun is used to return  the pressed button value            */
/*                values are 0~F                                    */
/********************************************************************/
extern uint8 KEYPADH_GetValue(uint8 keypadNum)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <KEYPADH_GetValue+0x6>
    16ac:	0f 92       	push	r0
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	8b 83       	std	Y+3, r24	; 0x03

	uint8 i;
	uint8 res=16;
    16b4:	80 e1       	ldi	r24, 0x10	; 16
    16b6:	89 83       	std	Y+1, r24	; 0x01

	for(i=0;i<16;i++)
    16b8:	1a 82       	std	Y+2, r1	; 0x02
    16ba:	1e c0       	rjmp	.+60     	; 0x16f8 <KEYPADH_GetValue+0x52>
	{
		if(GET_BIT(uint16ResultLocl[keypadNum],i))
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	fc 01       	movw	r30, r24
    16c8:	ee 5d       	subi	r30, 0xDE	; 222
    16ca:	fe 4f       	sbci	r31, 0xFE	; 254
    16cc:	20 81       	ld	r18, Z
    16ce:	31 81       	ldd	r19, Z+1	; 0x01
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	88 2f       	mov	r24, r24
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a9 01       	movw	r20, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <KEYPADH_GetValue+0x38>
    16da:	56 95       	lsr	r21
    16dc:	47 95       	ror	r20
    16de:	8a 95       	dec	r24
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <KEYPADH_GetValue+0x34>
    16e2:	ca 01       	movw	r24, r20
    16e4:	81 70       	andi	r24, 0x01	; 1
    16e6:	90 70       	andi	r25, 0x00	; 0
    16e8:	88 23       	and	r24, r24
    16ea:	19 f0       	breq	.+6      	; 0x16f2 <KEYPADH_GetValue+0x4c>
		{
			res=i;
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <KEYPADH_GetValue+0x58>
{

	uint8 i;
	uint8 res=16;

	for(i=0;i<16;i++)
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	8f 5f       	subi	r24, 0xFF	; 255
    16f6:	8a 83       	std	Y+2, r24	; 0x02
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	80 31       	cpi	r24, 0x10	; 16
    16fc:	f8 f2       	brcs	.-66     	; 0x16bc <KEYPADH_GetValue+0x16>
			break;
		}
	}


	return uint8OperationArr[res];
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	88 2f       	mov	r24, r24
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	fc 01       	movw	r30, r24
    1706:	e0 54       	subi	r30, 0x40	; 64
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 81       	ld	r24, Z




}
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <SetSWResult>:



static void SetSWResult(uint8 numCfg,uint8 uint8ComlumnCpy)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	00 d0       	rcall	.+0      	; 0x171e <SetSWResult+0x6>
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	6a 83       	std	Y+2, r22	; 0x02



	if(keypadH_cfg[numCfg].keypad_Mode==KeypadH_Mode_PullUp)
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	c9 01       	movw	r24, r18
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	82 0f       	add	r24, r18
    173c:	93 1f       	adc	r25, r19
    173e:	fc 01       	movw	r30, r24
    1740:	e8 52       	subi	r30, 0x28	; 40
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	80 81       	ld	r24, Z
    1746:	88 23       	and	r24, r24
    1748:	09 f0       	breq	.+2      	; 0x174c <SetSWResult+0x34>
    174a:	e1 c0       	rjmp	.+450    	; 0x190e <SetSWResult+0x1f6>
	{
		if(Dio_LOW==Dio_getPin(keypadH_cfg[numCfg].KeypadInputPins[0]))
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	c9 01       	movw	r24, r18
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	82 0f       	add	r24, r18
    1762:	93 1f       	adc	r25, r19
    1764:	fc 01       	movw	r30, r24
    1766:	e0 53       	subi	r30, 0x30	; 48
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	80 81       	ld	r24, Z
    176c:	0e 94 48 09 	call	0x1290	; 0x1290 <Dio_getPin>
    1770:	88 23       	and	r24, r24
    1772:	11 f5       	brne	.+68     	; 0x17b8 <SetSWResult+0xa0>
		{
			SET_BIT(uint16ResultLocl[numCfg],(uint8ComlumnCpy));
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	68 2f       	mov	r22, r24
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	fc 01       	movw	r30, r24
    1786:	ee 5d       	subi	r30, 0xDE	; 222
    1788:	fe 4f       	sbci	r31, 0xFE	; 254
    178a:	40 81       	ld	r20, Z
    178c:	51 81       	ldd	r21, Z+1	; 0x01
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 c0       	rjmp	.+4      	; 0x179e <SetSWResult+0x86>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	2a 95       	dec	r18
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <SetSWResult+0x82>
    17a2:	9a 01       	movw	r18, r20
    17a4:	28 2b       	or	r18, r24
    17a6:	39 2b       	or	r19, r25
    17a8:	cb 01       	movw	r24, r22
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	fc 01       	movw	r30, r24
    17b0:	ee 5d       	subi	r30, 0xDE	; 222
    17b2:	fe 4f       	sbci	r31, 0xFE	; 254
    17b4:	31 83       	std	Z+1, r19	; 0x01
    17b6:	20 83       	st	Z, r18
		}

		if(Dio_LOW==Dio_getPin(keypadH_cfg[numCfg].KeypadInputPins[1]))
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	c9 01       	movw	r24, r18
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	82 0f       	add	r24, r18
    17ce:	93 1f       	adc	r25, r19
    17d0:	fc 01       	movw	r30, r24
    17d2:	ef 52       	subi	r30, 0x2F	; 47
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 81       	ld	r24, Z
    17d8:	0e 94 48 09 	call	0x1290	; 0x1290 <Dio_getPin>
    17dc:	88 23       	and	r24, r24
    17de:	29 f5       	brne	.+74     	; 0x182a <SetSWResult+0x112>
		{
			SET_BIT(uint16ResultLocl[numCfg],(uint8ComlumnCpy+4));
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	68 2f       	mov	r22, r24
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	88 2f       	mov	r24, r24
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	fc 01       	movw	r30, r24
    17f2:	ee 5d       	subi	r30, 0xDE	; 222
    17f4:	fe 4f       	sbci	r31, 0xFE	; 254
    17f6:	40 81       	ld	r20, Z
    17f8:	51 81       	ldd	r21, Z+1	; 0x01
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9c 01       	movw	r18, r24
    1802:	2c 5f       	subi	r18, 0xFC	; 252
    1804:	3f 4f       	sbci	r19, 0xFF	; 255
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <SetSWResult+0xf8>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	2a 95       	dec	r18
    1812:	e2 f7       	brpl	.-8      	; 0x180c <SetSWResult+0xf4>
    1814:	9a 01       	movw	r18, r20
    1816:	28 2b       	or	r18, r24
    1818:	39 2b       	or	r19, r25
    181a:	cb 01       	movw	r24, r22
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	fc 01       	movw	r30, r24
    1822:	ee 5d       	subi	r30, 0xDE	; 222
    1824:	fe 4f       	sbci	r31, 0xFE	; 254
    1826:	31 83       	std	Z+1, r19	; 0x01
    1828:	20 83       	st	Z, r18
		}
		if(Dio_LOW==Dio_getPin(keypadH_cfg[numCfg].KeypadInputPins[2]))
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	c9 01       	movw	r24, r18
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	82 0f       	add	r24, r18
    1840:	93 1f       	adc	r25, r19
    1842:	fc 01       	movw	r30, r24
    1844:	ee 52       	subi	r30, 0x2E	; 46
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 81       	ld	r24, Z
    184a:	0e 94 48 09 	call	0x1290	; 0x1290 <Dio_getPin>
    184e:	88 23       	and	r24, r24
    1850:	29 f5       	brne	.+74     	; 0x189c <SetSWResult+0x184>
		{
			SET_BIT(uint16ResultLocl[numCfg],(uint8ComlumnCpy+8));
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	68 2f       	mov	r22, r24
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	fc 01       	movw	r30, r24
    1864:	ee 5d       	subi	r30, 0xDE	; 222
    1866:	fe 4f       	sbci	r31, 0xFE	; 254
    1868:	40 81       	ld	r20, Z
    186a:	51 81       	ldd	r21, Z+1	; 0x01
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	88 2f       	mov	r24, r24
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9c 01       	movw	r18, r24
    1874:	28 5f       	subi	r18, 0xF8	; 248
    1876:	3f 4f       	sbci	r19, 0xFF	; 255
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <SetSWResult+0x16a>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	2a 95       	dec	r18
    1884:	e2 f7       	brpl	.-8      	; 0x187e <SetSWResult+0x166>
    1886:	9a 01       	movw	r18, r20
    1888:	28 2b       	or	r18, r24
    188a:	39 2b       	or	r19, r25
    188c:	cb 01       	movw	r24, r22
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	fc 01       	movw	r30, r24
    1894:	ee 5d       	subi	r30, 0xDE	; 222
    1896:	fe 4f       	sbci	r31, 0xFE	; 254
    1898:	31 83       	std	Z+1, r19	; 0x01
    189a:	20 83       	st	Z, r18
		}
		if(Dio_LOW==Dio_getPin(keypadH_cfg[numCfg].KeypadInputPins[3]))
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	c9 01       	movw	r24, r18
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	82 0f       	add	r24, r18
    18b2:	93 1f       	adc	r25, r19
    18b4:	fc 01       	movw	r30, r24
    18b6:	ed 52       	subi	r30, 0x2D	; 45
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	0e 94 48 09 	call	0x1290	; 0x1290 <Dio_getPin>
    18c0:	88 23       	and	r24, r24
    18c2:	29 f5       	brne	.+74     	; 0x190e <SetSWResult+0x1f6>
		{
			SET_BIT(uint16ResultLocl[numCfg],(uint8ComlumnCpy+12));
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	68 2f       	mov	r22, r24
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	fc 01       	movw	r30, r24
    18d6:	ee 5d       	subi	r30, 0xDE	; 222
    18d8:	fe 4f       	sbci	r31, 0xFE	; 254
    18da:	40 81       	ld	r20, Z
    18dc:	51 81       	ldd	r21, Z+1	; 0x01
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9c 01       	movw	r18, r24
    18e6:	24 5f       	subi	r18, 0xF4	; 244
    18e8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <SetSWResult+0x1dc>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	2a 95       	dec	r18
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <SetSWResult+0x1d8>
    18f8:	9a 01       	movw	r18, r20
    18fa:	28 2b       	or	r18, r24
    18fc:	39 2b       	or	r19, r25
    18fe:	cb 01       	movw	r24, r22
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	fc 01       	movw	r30, r24
    1906:	ee 5d       	subi	r30, 0xDE	; 222
    1908:	fe 4f       	sbci	r31, 0xFE	; 254
    190a:	31 83       	std	Z+1, r19	; 0x01
    190c:	20 83       	st	Z, r18
	else
	{

	}

}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <KEYPADH_keypressed>:

/********************************************************************/
/*   this fun is used to return  1 if there's button pressed         */
/********************************************************************/
extern uint8 KEYPADH_keypressed(uint8 KeypadNum)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <KEYPADH_keypressed+0x6>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	8a 83       	std	Y+2, r24	; 0x02

	uint8 res;

	if(uint16ResultLocl[KeypadNum]==0)
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	fc 01       	movw	r30, r24
    1930:	ee 5d       	subi	r30, 0xDE	; 222
    1932:	fe 4f       	sbci	r31, 0xFE	; 254
    1934:	80 81       	ld	r24, Z
    1936:	91 81       	ldd	r25, Z+1	; 0x01
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	11 f4       	brne	.+4      	; 0x1940 <KEYPADH_keypressed+0x28>
	{
		res=0;
    193c:	19 82       	std	Y+1, r1	; 0x01
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <KEYPADH_keypressed+0x2c>
	}
	else
	{
		res =1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	89 83       	std	Y+1, r24	; 0x01
	}

	return res;
    1944:	89 81       	ldd	r24, Y+1	; 0x01
}
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <writeByte>:
#include "Lcd_cfg.h"



 void writeByte(uint8 LcdID ,Byte_type_t type , uint8 byte)
{
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	ca 54       	subi	r28, 0x4A	; 74
    195e:	d0 40       	sbci	r29, 0x00	; 0
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	fe 01       	movw	r30, r28
    196c:	e8 5b       	subi	r30, 0xB8	; 184
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	80 83       	st	Z, r24
    1972:	fe 01       	movw	r30, r28
    1974:	e7 5b       	subi	r30, 0xB7	; 183
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	60 83       	st	Z, r22
    197a:	fe 01       	movw	r30, r28
    197c:	e6 5b       	subi	r30, 0xB6	; 182
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	40 83       	st	Z, r20
	uint8 counter;

	if (type == COMMAND)
    1982:	fe 01       	movw	r30, r28
    1984:	e7 5b       	subi	r30, 0xB7	; 183
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 81       	ld	r24, Z
    198a:	88 23       	and	r24, r24
    198c:	b1 f4       	brne	.+44     	; 0x19ba <writeByte+0x6a>
	{
		Dio_clrPin(Lcd_cfg[LcdID].Rs);
    198e:	fe 01       	movw	r30, r28
    1990:	e8 5b       	subi	r30, 0xB8	; 184
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	80 81       	ld	r24, Z
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	c9 01       	movw	r24, r18
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	82 0f       	add	r24, r18
    19a2:	93 1f       	adc	r25, r19
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	fc 01       	movw	r30, r24
    19ae:	e6 52       	subi	r30, 0x26	; 38
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	80 81       	ld	r24, Z
    19b4:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>
    19b8:	1b c0       	rjmp	.+54     	; 0x19f0 <writeByte+0xa0>
	}
	else if (type == DATA)
    19ba:	fe 01       	movw	r30, r28
    19bc:	e7 5b       	subi	r30, 0xB7	; 183
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	80 81       	ld	r24, Z
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	a9 f4       	brne	.+42     	; 0x19f0 <writeByte+0xa0>
	{
		Dio_setPin(Lcd_cfg[LcdID].Rs);
    19c6:	fe 01       	movw	r30, r28
    19c8:	e8 5b       	subi	r30, 0xB8	; 184
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	80 81       	ld	r24, Z
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	c9 01       	movw	r24, r18
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	82 0f       	add	r24, r18
    19da:	93 1f       	adc	r25, r19
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	fc 01       	movw	r30, r24
    19e6:	e6 52       	subi	r30, 0x26	; 38
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 81       	ld	r24, Z
    19ec:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>

	}


	Dio_clrPin(Lcd_cfg[LcdID].RW);
    19f0:	fe 01       	movw	r30, r28
    19f2:	e8 5b       	subi	r30, 0xB8	; 184
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	80 81       	ld	r24, Z
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	c9 01       	movw	r24, r18
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	82 0f       	add	r24, r18
    1a04:	93 1f       	adc	r25, r19
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	fc 01       	movw	r30, r24
    1a10:	e5 52       	subi	r30, 0x25	; 37
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 81       	ld	r24, Z
    1a16:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>

	if(Lcd_cfg[LcdID].mode == LCD_4_BIT)
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e8 5b       	subi	r30, 0xB8	; 184
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 81       	ld	r24, Z
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	c9 01       	movw	r24, r18
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	82 0f       	add	r24, r18
    1a2e:	93 1f       	adc	r25, r19
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	fc 01       	movw	r30, r24
    1a3a:	eb 51       	subi	r30, 0x1B	; 27
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 81       	ld	r24, Z
    1a40:	88 23       	and	r24, r24
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <writeByte+0xf6>
    1a44:	c5 c2       	rjmp	.+1418   	; 0x1fd0 <writeByte+0x680>
	{

		/******writing the high 4 bits*******/

		for(counter=4;counter <=7; counter ++)
    1a46:	fe 01       	movw	r30, r28
    1a48:	e9 5b       	subi	r30, 0xB9	; 185
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	84 e0       	ldi	r24, 0x04	; 4
    1a4e:	80 83       	st	Z, r24
    1a50:	72 c0       	rjmp	.+228    	; 0x1b36 <writeByte+0x1e6>
		{
			if(GET_BIT(byte,counter)==1)
    1a52:	fe 01       	movw	r30, r28
    1a54:	e6 5b       	subi	r30, 0xB6	; 182
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	80 81       	ld	r24, Z
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e9 5b       	subi	r30, 0xB9	; 185
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 81       	ld	r24, Z
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a9 01       	movw	r20, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <writeByte+0x122>
    1a6e:	55 95       	asr	r21
    1a70:	47 95       	ror	r20
    1a72:	8a 95       	dec	r24
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <writeByte+0x11e>
    1a76:	ca 01       	movw	r24, r20
    1a78:	81 70       	andi	r24, 0x01	; 1
    1a7a:	90 70       	andi	r25, 0x00	; 0
    1a7c:	88 23       	and	r24, r24
    1a7e:	f1 f0       	breq	.+60     	; 0x1abc <writeByte+0x16c>
			{
				Dio_setPin(Lcd_cfg[LcdID].DB[counter]);
    1a80:	fe 01       	movw	r30, r28
    1a82:	e8 5b       	subi	r30, 0xB8	; 184
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e9 5b       	subi	r30, 0xB9	; 185
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	c9 01       	movw	r24, r18
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	82 0f       	add	r24, r18
    1aa0:	93 1f       	adc	r25, r19
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	84 0f       	add	r24, r20
    1aac:	95 1f       	adc	r25, r21
    1aae:	fc 01       	movw	r30, r24
    1ab0:	e3 52       	subi	r30, 0x23	; 35
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 81       	ld	r24, Z
    1ab6:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
    1aba:	34 c0       	rjmp	.+104    	; 0x1b24 <writeByte+0x1d4>
			}
			else if(GET_BIT(byte,counter)==0)
    1abc:	fe 01       	movw	r30, r28
    1abe:	e6 5b       	subi	r30, 0xB6	; 182
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	80 81       	ld	r24, Z
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e9 5b       	subi	r30, 0xB9	; 185
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	f9 01       	movw	r30, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <writeByte+0x18c>
    1ad8:	f5 95       	asr	r31
    1ada:	e7 95       	ror	r30
    1adc:	8a 95       	dec	r24
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <writeByte+0x188>
    1ae0:	cf 01       	movw	r24, r30
    1ae2:	81 70       	andi	r24, 0x01	; 1
    1ae4:	90 70       	andi	r25, 0x00	; 0
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	e9 f4       	brne	.+58     	; 0x1b24 <writeByte+0x1d4>

			{
				Dio_clrPin(Lcd_cfg[LcdID].DB[counter]);
    1aea:	fe 01       	movw	r30, r28
    1aec:	e8 5b       	subi	r30, 0xB8	; 184
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 81       	ld	r24, Z
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	fe 01       	movw	r30, r28
    1af8:	e9 5b       	subi	r30, 0xB9	; 185
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	c9 01       	movw	r24, r18
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	82 0f       	add	r24, r18
    1b0a:	93 1f       	adc	r25, r19
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	84 0f       	add	r24, r20
    1b16:	95 1f       	adc	r25, r21
    1b18:	fc 01       	movw	r30, r24
    1b1a:	e3 52       	subi	r30, 0x23	; 35
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 81       	ld	r24, Z
    1b20:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>
	if(Lcd_cfg[LcdID].mode == LCD_4_BIT)
	{

		/******writing the high 4 bits*******/

		for(counter=4;counter <=7; counter ++)
    1b24:	de 01       	movw	r26, r28
    1b26:	a9 5b       	subi	r26, 0xB9	; 185
    1b28:	bf 4f       	sbci	r27, 0xFF	; 255
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e9 5b       	subi	r30, 0xB9	; 185
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	8f 5f       	subi	r24, 0xFF	; 255
    1b34:	8c 93       	st	X, r24
    1b36:	fe 01       	movw	r30, r28
    1b38:	e9 5b       	subi	r30, 0xB9	; 185
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 81       	ld	r24, Z
    1b3e:	88 30       	cpi	r24, 0x08	; 8
    1b40:	08 f4       	brcc	.+2      	; 0x1b44 <writeByte+0x1f4>
    1b42:	87 cf       	rjmp	.-242    	; 0x1a52 <writeByte+0x102>

			}

		}

		Dio_setPin(Lcd_cfg[LcdID].E);
    1b44:	fe 01       	movw	r30, r28
    1b46:	e8 5b       	subi	r30, 0xB8	; 184
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	80 81       	ld	r24, Z
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	c9 01       	movw	r24, r18
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	82 0f       	add	r24, r18
    1b58:	93 1f       	adc	r25, r19
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	01 96       	adiw	r24, 0x01	; 1
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	fc 01       	movw	r30, r24
    1b66:	e6 52       	subi	r30, 0x26	; 38
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	80 81       	ld	r24, Z
    1b6c:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
    1b70:	fe 01       	movw	r30, r28
    1b72:	ed 5b       	subi	r30, 0xBD	; 189
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a0 e8       	ldi	r26, 0x80	; 128
    1b7c:	bf e3       	ldi	r27, 0x3F	; 63
    1b7e:	80 83       	st	Z, r24
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	a2 83       	std	Z+2, r26	; 0x02
    1b84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b86:	8e 01       	movw	r16, r28
    1b88:	01 5c       	subi	r16, 0xC1	; 193
    1b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	ed 5b       	subi	r30, 0xBD	; 189
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	4a e7       	ldi	r20, 0x7A	; 122
    1ba0:	55 e4       	ldi	r21, 0x45	; 69
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	f8 01       	movw	r30, r16
    1bac:	80 83       	st	Z, r24
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	a2 83       	std	Z+2, r26	; 0x02
    1bb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	ff 96       	adiw	r30, 0x3f	; 63
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e8       	ldi	r20, 0x80	; 128
    1bc6:	5f e3       	ldi	r21, 0x3F	; 63
    1bc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bcc:	88 23       	and	r24, r24
    1bce:	2c f4       	brge	.+10     	; 0x1bda <writeByte+0x28a>
		__ticks = 1;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	9e af       	std	Y+62, r25	; 0x3e
    1bd6:	8d af       	std	Y+61, r24	; 0x3d
    1bd8:	46 c0       	rjmp	.+140    	; 0x1c66 <writeByte+0x316>
	else if (__tmp > 65535)
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ff 96       	adiw	r30, 0x3f	; 63
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	3f ef       	ldi	r19, 0xFF	; 255
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	57 e4       	ldi	r21, 0x47	; 71
    1bee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	64 f5       	brge	.+88     	; 0x1c4e <writeByte+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	ed 5b       	subi	r30, 0xBD	; 189
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	60 81       	ld	r22, Z
    1bfe:	71 81       	ldd	r23, Z+1	; 0x01
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	93 81       	ldd	r25, Z+3	; 0x03
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e2       	ldi	r20, 0x20	; 32
    1c0a:	51 e4       	ldi	r21, 0x41	; 65
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	bc 01       	movw	r22, r24
    1c16:	cd 01       	movw	r24, r26
    1c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	9e af       	std	Y+62, r25	; 0x3e
    1c22:	8d af       	std	Y+61, r24	; 0x3d
    1c24:	0f c0       	rjmp	.+30     	; 0x1c44 <writeByte+0x2f4>
    1c26:	80 e9       	ldi	r24, 0x90	; 144
    1c28:	91 e0       	ldi	r25, 0x01	; 1
    1c2a:	9c af       	std	Y+60, r25	; 0x3c
    1c2c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c2e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c30:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <writeByte+0x2e2>
    1c36:	9c af       	std	Y+60, r25	; 0x3c
    1c38:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	9e af       	std	Y+62, r25	; 0x3e
    1c42:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	69 f7       	brne	.-38     	; 0x1c26 <writeByte+0x2d6>
    1c4c:	16 c0       	rjmp	.+44     	; 0x1c7a <writeByte+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ff 96       	adiw	r30, 0x3f	; 63
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9e af       	std	Y+62, r25	; 0x3e
    1c64:	8d af       	std	Y+61, r24	; 0x3d
    1c66:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c68:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c6a:	9a af       	std	Y+58, r25	; 0x3a
    1c6c:	89 af       	std	Y+57, r24	; 0x39
    1c6e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c70:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <writeByte+0x322>
    1c76:	9a af       	std	Y+58, r25	; 0x3a
    1c78:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		Dio_clrPin(Lcd_cfg[LcdID].E);
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e8 5b       	subi	r30, 0xB8	; 184
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	80 81       	ld	r24, Z
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	c9 01       	movw	r24, r18
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	82 0f       	add	r24, r18
    1c8e:	93 1f       	adc	r25, r19
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	e6 52       	subi	r30, 0x26	; 38
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	80 81       	ld	r24, Z
    1ca2:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>
		/*******writing the low 4 bit *********/
		for(counter=0;counter <=3; counter ++)
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e9 5b       	subi	r30, 0xB9	; 185
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	10 82       	st	Z, r1
    1cae:	78 c0       	rjmp	.+240    	; 0x1da0 <writeByte+0x450>
		{
			if(GET_BIT(byte,counter)==1)
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e6 5b       	subi	r30, 0xB6	; 182
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e9 5b       	subi	r30, 0xB9	; 185
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	80 81       	ld	r24, Z
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a9 01       	movw	r20, r18
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <writeByte+0x380>
    1ccc:	55 95       	asr	r21
    1cce:	47 95       	ror	r20
    1cd0:	8a 95       	dec	r24
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <writeByte+0x37c>
    1cd4:	ca 01       	movw	r24, r20
    1cd6:	81 70       	andi	r24, 0x01	; 1
    1cd8:	90 70       	andi	r25, 0x00	; 0
    1cda:	88 23       	and	r24, r24
    1cdc:	09 f1       	breq	.+66     	; 0x1d20 <writeByte+0x3d0>
			{
				Dio_setPin(Lcd_cfg[LcdID].DB[counter+4]);
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e8 5b       	subi	r30, 0xB8	; 184
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	fe 01       	movw	r30, r28
    1cec:	e9 5b       	subi	r30, 0xB9	; 185
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	ac 01       	movw	r20, r24
    1cf8:	4c 5f       	subi	r20, 0xFC	; 252
    1cfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1cfc:	c9 01       	movw	r24, r18
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	82 0f       	add	r24, r18
    1d04:	93 1f       	adc	r25, r19
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	84 0f       	add	r24, r20
    1d10:	95 1f       	adc	r25, r21
    1d12:	fc 01       	movw	r30, r24
    1d14:	e3 52       	subi	r30, 0x23	; 35
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	80 81       	ld	r24, Z
    1d1a:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
    1d1e:	37 c0       	rjmp	.+110    	; 0x1d8e <writeByte+0x43e>
			}
			else if(GET_BIT(byte,counter)==0)
    1d20:	fe 01       	movw	r30, r28
    1d22:	e6 5b       	subi	r30, 0xB6	; 182
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 81       	ld	r24, Z
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e9 5b       	subi	r30, 0xB9	; 185
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	f9 01       	movw	r30, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <writeByte+0x3f0>
    1d3c:	f5 95       	asr	r31
    1d3e:	e7 95       	ror	r30
    1d40:	8a 95       	dec	r24
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <writeByte+0x3ec>
    1d44:	cf 01       	movw	r24, r30
    1d46:	81 70       	andi	r24, 0x01	; 1
    1d48:	90 70       	andi	r25, 0x00	; 0
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	01 f5       	brne	.+64     	; 0x1d8e <writeByte+0x43e>

			{
				Dio_clrPin(Lcd_cfg[LcdID].DB[counter+4]);
    1d4e:	fe 01       	movw	r30, r28
    1d50:	e8 5b       	subi	r30, 0xB8	; 184
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e9 5b       	subi	r30, 0xB9	; 185
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	88 2f       	mov	r24, r24
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	ac 01       	movw	r20, r24
    1d68:	4c 5f       	subi	r20, 0xFC	; 252
    1d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6c:	c9 01       	movw	r24, r18
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	82 0f       	add	r24, r18
    1d74:	93 1f       	adc	r25, r19
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	84 0f       	add	r24, r20
    1d80:	95 1f       	adc	r25, r21
    1d82:	fc 01       	movw	r30, r24
    1d84:	e3 52       	subi	r30, 0x23	; 35
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>

		Dio_setPin(Lcd_cfg[LcdID].E);
		_delay_ms(1);
		Dio_clrPin(Lcd_cfg[LcdID].E);
		/*******writing the low 4 bit *********/
		for(counter=0;counter <=3; counter ++)
    1d8e:	de 01       	movw	r26, r28
    1d90:	a9 5b       	subi	r26, 0xB9	; 185
    1d92:	bf 4f       	sbci	r27, 0xFF	; 255
    1d94:	fe 01       	movw	r30, r28
    1d96:	e9 5b       	subi	r30, 0xB9	; 185
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	8f 5f       	subi	r24, 0xFF	; 255
    1d9e:	8c 93       	st	X, r24
    1da0:	fe 01       	movw	r30, r28
    1da2:	e9 5b       	subi	r30, 0xB9	; 185
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 81       	ld	r24, Z
    1da8:	84 30       	cpi	r24, 0x04	; 4
    1daa:	08 f4       	brcc	.+2      	; 0x1dae <writeByte+0x45e>
    1dac:	81 cf       	rjmp	.-254    	; 0x1cb0 <writeByte+0x360>

			}

		}

		Dio_setPin(Lcd_cfg[LcdID].E);
    1dae:	fe 01       	movw	r30, r28
    1db0:	e8 5b       	subi	r30, 0xB8	; 184
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	80 81       	ld	r24, Z
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	c9 01       	movw	r24, r18
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	82 0f       	add	r24, r18
    1dc2:	93 1f       	adc	r25, r19
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e6 52       	subi	r30, 0x26	; 38
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a0 e8       	ldi	r26, 0x80	; 128
    1de0:	bf e3       	ldi	r27, 0x3F	; 63
    1de2:	8d ab       	std	Y+53, r24	; 0x35
    1de4:	9e ab       	std	Y+54, r25	; 0x36
    1de6:	af ab       	std	Y+55, r26	; 0x37
    1de8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dea:	6d a9       	ldd	r22, Y+53	; 0x35
    1dec:	7e a9       	ldd	r23, Y+54	; 0x36
    1dee:	8f a9       	ldd	r24, Y+55	; 0x37
    1df0:	98 ad       	ldd	r25, Y+56	; 0x38
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4a e7       	ldi	r20, 0x7A	; 122
    1df8:	55 e4       	ldi	r21, 0x45	; 69
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	89 ab       	std	Y+49, r24	; 0x31
    1e04:	9a ab       	std	Y+50, r25	; 0x32
    1e06:	ab ab       	std	Y+51, r26	; 0x33
    1e08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e10:	9c a9       	ldd	r25, Y+52	; 0x34
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e8       	ldi	r20, 0x80	; 128
    1e18:	5f e3       	ldi	r21, 0x3F	; 63
    1e1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1e:	88 23       	and	r24, r24
    1e20:	2c f4       	brge	.+10     	; 0x1e2c <writeByte+0x4dc>
		__ticks = 1;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	98 ab       	std	Y+48, r25	; 0x30
    1e28:	8f a7       	std	Y+47, r24	; 0x2f
    1e2a:	3f c0       	rjmp	.+126    	; 0x1eaa <writeByte+0x55a>
	else if (__tmp > 65535)
    1e2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e30:	8b a9       	ldd	r24, Y+51	; 0x33
    1e32:	9c a9       	ldd	r25, Y+52	; 0x34
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	3f ef       	ldi	r19, 0xFF	; 255
    1e38:	4f e7       	ldi	r20, 0x7F	; 127
    1e3a:	57 e4       	ldi	r21, 0x47	; 71
    1e3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e40:	18 16       	cp	r1, r24
    1e42:	4c f5       	brge	.+82     	; 0x1e96 <writeByte+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e44:	6d a9       	ldd	r22, Y+53	; 0x35
    1e46:	7e a9       	ldd	r23, Y+54	; 0x36
    1e48:	8f a9       	ldd	r24, Y+55	; 0x37
    1e4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e2       	ldi	r20, 0x20	; 32
    1e52:	51 e4       	ldi	r21, 0x41	; 65
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	bc 01       	movw	r22, r24
    1e5e:	cd 01       	movw	r24, r26
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	98 ab       	std	Y+48, r25	; 0x30
    1e6a:	8f a7       	std	Y+47, r24	; 0x2f
    1e6c:	0f c0       	rjmp	.+30     	; 0x1e8c <writeByte+0x53c>
    1e6e:	80 e9       	ldi	r24, 0x90	; 144
    1e70:	91 e0       	ldi	r25, 0x01	; 1
    1e72:	9e a7       	std	Y+46, r25	; 0x2e
    1e74:	8d a7       	std	Y+45, r24	; 0x2d
    1e76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <writeByte+0x52a>
    1e7e:	9e a7       	std	Y+46, r25	; 0x2e
    1e80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e84:	98 a9       	ldd	r25, Y+48	; 0x30
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	98 ab       	std	Y+48, r25	; 0x30
    1e8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	69 f7       	brne	.-38     	; 0x1e6e <writeByte+0x51e>
    1e94:	14 c0       	rjmp	.+40     	; 0x1ebe <writeByte+0x56e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e96:	69 a9       	ldd	r22, Y+49	; 0x31
    1e98:	7a a9       	ldd	r23, Y+50	; 0x32
    1e9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	98 ab       	std	Y+48, r25	; 0x30
    1ea8:	8f a7       	std	Y+47, r24	; 0x2f
    1eaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eac:	98 a9       	ldd	r25, Y+48	; 0x30
    1eae:	9c a7       	std	Y+44, r25	; 0x2c
    1eb0:	8b a7       	std	Y+43, r24	; 0x2b
    1eb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <writeByte+0x566>
    1eba:	9c a7       	std	Y+44, r25	; 0x2c
    1ebc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		Dio_clrPin(Lcd_cfg[LcdID].E);
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e8 5b       	subi	r30, 0xB8	; 184
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	c9 01       	movw	r24, r18
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	82 0f       	add	r24, r18
    1ed2:	93 1f       	adc	r25, r19
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	01 96       	adiw	r24, 0x01	; 1
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	fc 01       	movw	r30, r24
    1ee0:	e6 52       	subi	r30, 0x26	; 38
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 81       	ld	r24, Z
    1ee6:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a0 e8       	ldi	r26, 0x80	; 128
    1ef0:	bf e3       	ldi	r27, 0x3F	; 63
    1ef2:	8f a3       	std	Y+39, r24	; 0x27
    1ef4:	98 a7       	std	Y+40, r25	; 0x28
    1ef6:	a9 a7       	std	Y+41, r26	; 0x29
    1ef8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	6f a1       	ldd	r22, Y+39	; 0x27
    1efc:	78 a5       	ldd	r23, Y+40	; 0x28
    1efe:	89 a5       	ldd	r24, Y+41	; 0x29
    1f00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a e7       	ldi	r20, 0x7A	; 122
    1f08:	55 e4       	ldi	r21, 0x45	; 69
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	8b a3       	std	Y+35, r24	; 0x23
    1f14:	9c a3       	std	Y+36, r25	; 0x24
    1f16:	ad a3       	std	Y+37, r26	; 0x25
    1f18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f20:	9e a1       	ldd	r25, Y+38	; 0x26
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <writeByte+0x5ec>
		__ticks = 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9a a3       	std	Y+34, r25	; 0x22
    1f38:	89 a3       	std	Y+33, r24	; 0x21
    1f3a:	3f c0       	rjmp	.+126    	; 0x1fba <writeByte+0x66a>
	else if (__tmp > 65535)
    1f3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f40:	8d a1       	ldd	r24, Y+37	; 0x25
    1f42:	9e a1       	ldd	r25, Y+38	; 0x26
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	3f ef       	ldi	r19, 0xFF	; 255
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	57 e4       	ldi	r21, 0x47	; 71
    1f4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	4c f5       	brge	.+82     	; 0x1fa6 <writeByte+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f54:	6f a1       	ldd	r22, Y+39	; 0x27
    1f56:	78 a5       	ldd	r23, Y+40	; 0x28
    1f58:	89 a5       	ldd	r24, Y+41	; 0x29
    1f5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e2       	ldi	r20, 0x20	; 32
    1f62:	51 e4       	ldi	r21, 0x41	; 65
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9a a3       	std	Y+34, r25	; 0x22
    1f7a:	89 a3       	std	Y+33, r24	; 0x21
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <writeByte+0x64c>
    1f7e:	80 e9       	ldi	r24, 0x90	; 144
    1f80:	91 e0       	ldi	r25, 0x01	; 1
    1f82:	98 a3       	std	Y+32, r25	; 0x20
    1f84:	8f 8f       	std	Y+31, r24	; 0x1f
    1f86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f88:	98 a1       	ldd	r25, Y+32	; 0x20
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <writeByte+0x63a>
    1f8e:	98 a3       	std	Y+32, r25	; 0x20
    1f90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	89 a1       	ldd	r24, Y+33	; 0x21
    1f94:	9a a1       	ldd	r25, Y+34	; 0x22
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	9a a3       	std	Y+34, r25	; 0x22
    1f9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	69 f7       	brne	.-38     	; 0x1f7e <writeByte+0x62e>
    1fa4:	b9 c1       	rjmp	.+882    	; 0x2318 <writeByte+0x9c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa8:	7c a1       	ldd	r23, Y+36	; 0x24
    1faa:	8d a1       	ldd	r24, Y+37	; 0x25
    1fac:	9e a1       	ldd	r25, Y+38	; 0x26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9a a3       	std	Y+34, r25	; 0x22
    1fb8:	89 a3       	std	Y+33, r24	; 0x21
    1fba:	89 a1       	ldd	r24, Y+33	; 0x21
    1fbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc0:	8d 8f       	std	Y+29, r24	; 0x1d
    1fc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <writeByte+0x676>
    1fca:	9e 8f       	std	Y+30, r25	; 0x1e
    1fcc:	8d 8f       	std	Y+29, r24	; 0x1d
    1fce:	a4 c1       	rjmp	.+840    	; 0x2318 <writeByte+0x9c8>




	}
	else if(Lcd_cfg[LcdID].mode == LCD_8_BIT)
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e8 5b       	subi	r30, 0xB8	; 184
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	80 81       	ld	r24, Z
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	c9 01       	movw	r24, r18
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	82 0f       	add	r24, r18
    1fe4:	93 1f       	adc	r25, r19
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	fc 01       	movw	r30, r24
    1ff0:	eb 51       	subi	r30, 0x1B	; 27
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <writeByte+0x6ac>
    1ffa:	8e c1       	rjmp	.+796    	; 0x2318 <writeByte+0x9c8>
	{
		for(counter=0;counter <=7; counter ++)
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e9 5b       	subi	r30, 0xB9	; 185
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	10 82       	st	Z, r1
    2004:	72 c0       	rjmp	.+228    	; 0x20ea <writeByte+0x79a>
		{
			if(GET_BIT(byte,counter)==1)
    2006:	fe 01       	movw	r30, r28
    2008:	e6 5b       	subi	r30, 0xB6	; 182
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	fe 01       	movw	r30, r28
    2014:	e9 5b       	subi	r30, 0xB9	; 185
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 81       	ld	r24, Z
    201a:	88 2f       	mov	r24, r24
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a9 01       	movw	r20, r18
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <writeByte+0x6d6>
    2022:	55 95       	asr	r21
    2024:	47 95       	ror	r20
    2026:	8a 95       	dec	r24
    2028:	e2 f7       	brpl	.-8      	; 0x2022 <writeByte+0x6d2>
    202a:	ca 01       	movw	r24, r20
    202c:	81 70       	andi	r24, 0x01	; 1
    202e:	90 70       	andi	r25, 0x00	; 0
    2030:	88 23       	and	r24, r24
    2032:	f1 f0       	breq	.+60     	; 0x2070 <writeByte+0x720>
			{
				Dio_setPin(Lcd_cfg[LcdID].DB[counter]);
    2034:	fe 01       	movw	r30, r28
    2036:	e8 5b       	subi	r30, 0xB8	; 184
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 81       	ld	r24, Z
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	fe 01       	movw	r30, r28
    2042:	e9 5b       	subi	r30, 0xB9	; 185
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 81       	ld	r24, Z
    2048:	48 2f       	mov	r20, r24
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	c9 01       	movw	r24, r18
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	82 0f       	add	r24, r18
    2054:	93 1f       	adc	r25, r19
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	84 0f       	add	r24, r20
    2060:	95 1f       	adc	r25, r21
    2062:	fc 01       	movw	r30, r24
    2064:	e3 52       	subi	r30, 0x23	; 35
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	80 81       	ld	r24, Z
    206a:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
    206e:	34 c0       	rjmp	.+104    	; 0x20d8 <writeByte+0x788>
			}
			else if(GET_BIT(byte,counter)==0)
    2070:	fe 01       	movw	r30, r28
    2072:	e6 5b       	subi	r30, 0xB6	; 182
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	80 81       	ld	r24, Z
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	fe 01       	movw	r30, r28
    207e:	e9 5b       	subi	r30, 0xB9	; 185
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	80 81       	ld	r24, Z
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	f9 01       	movw	r30, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <writeByte+0x740>
    208c:	f5 95       	asr	r31
    208e:	e7 95       	ror	r30
    2090:	8a 95       	dec	r24
    2092:	e2 f7       	brpl	.-8      	; 0x208c <writeByte+0x73c>
    2094:	cf 01       	movw	r24, r30
    2096:	81 70       	andi	r24, 0x01	; 1
    2098:	90 70       	andi	r25, 0x00	; 0
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	e9 f4       	brne	.+58     	; 0x20d8 <writeByte+0x788>

			{
				Dio_clrPin(Lcd_cfg[LcdID].DB[counter]);
    209e:	fe 01       	movw	r30, r28
    20a0:	e8 5b       	subi	r30, 0xB8	; 184
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	fe 01       	movw	r30, r28
    20ac:	e9 5b       	subi	r30, 0xB9	; 185
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 81       	ld	r24, Z
    20b2:	48 2f       	mov	r20, r24
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	c9 01       	movw	r24, r18
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	82 0f       	add	r24, r18
    20be:	93 1f       	adc	r25, r19
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	84 0f       	add	r24, r20
    20ca:	95 1f       	adc	r25, r21
    20cc:	fc 01       	movw	r30, r24
    20ce:	e3 52       	subi	r30, 0x23	; 35
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>


	}
	else if(Lcd_cfg[LcdID].mode == LCD_8_BIT)
	{
		for(counter=0;counter <=7; counter ++)
    20d8:	de 01       	movw	r26, r28
    20da:	a9 5b       	subi	r26, 0xB9	; 185
    20dc:	bf 4f       	sbci	r27, 0xFF	; 255
    20de:	fe 01       	movw	r30, r28
    20e0:	e9 5b       	subi	r30, 0xB9	; 185
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	8f 5f       	subi	r24, 0xFF	; 255
    20e8:	8c 93       	st	X, r24
    20ea:	fe 01       	movw	r30, r28
    20ec:	e9 5b       	subi	r30, 0xB9	; 185
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	88 30       	cpi	r24, 0x08	; 8
    20f4:	08 f4       	brcc	.+2      	; 0x20f8 <writeByte+0x7a8>
    20f6:	87 cf       	rjmp	.-242    	; 0x2006 <writeByte+0x6b6>

			}

		}

		Dio_setPin(Lcd_cfg[LcdID].E);
    20f8:	fe 01       	movw	r30, r28
    20fa:	e8 5b       	subi	r30, 0xB8	; 184
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	80 81       	ld	r24, Z
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	c9 01       	movw	r24, r18
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	82 0f       	add	r24, r18
    210c:	93 1f       	adc	r25, r19
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	01 96       	adiw	r24, 0x01	; 1
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	fc 01       	movw	r30, r24
    211a:	e6 52       	subi	r30, 0x26	; 38
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	a0 e8       	ldi	r26, 0x80	; 128
    212a:	bf e3       	ldi	r27, 0x3F	; 63
    212c:	89 8f       	std	Y+25, r24	; 0x19
    212e:	9a 8f       	std	Y+26, r25	; 0x1a
    2130:	ab 8f       	std	Y+27, r26	; 0x1b
    2132:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2134:	69 8d       	ldd	r22, Y+25	; 0x19
    2136:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2138:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	4a e7       	ldi	r20, 0x7A	; 122
    2142:	55 e4       	ldi	r21, 0x45	; 69
    2144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	8d 8b       	std	Y+21, r24	; 0x15
    214e:	9e 8b       	std	Y+22, r25	; 0x16
    2150:	af 8b       	std	Y+23, r26	; 0x17
    2152:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2154:	6d 89       	ldd	r22, Y+21	; 0x15
    2156:	7e 89       	ldd	r23, Y+22	; 0x16
    2158:	8f 89       	ldd	r24, Y+23	; 0x17
    215a:	98 8d       	ldd	r25, Y+24	; 0x18
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e8       	ldi	r20, 0x80	; 128
    2162:	5f e3       	ldi	r21, 0x3F	; 63
    2164:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2168:	88 23       	and	r24, r24
    216a:	2c f4       	brge	.+10     	; 0x2176 <writeByte+0x826>
		__ticks = 1;
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	9c 8b       	std	Y+20, r25	; 0x14
    2172:	8b 8b       	std	Y+19, r24	; 0x13
    2174:	3f c0       	rjmp	.+126    	; 0x21f4 <writeByte+0x8a4>
	else if (__tmp > 65535)
    2176:	6d 89       	ldd	r22, Y+21	; 0x15
    2178:	7e 89       	ldd	r23, Y+22	; 0x16
    217a:	8f 89       	ldd	r24, Y+23	; 0x17
    217c:	98 8d       	ldd	r25, Y+24	; 0x18
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	3f ef       	ldi	r19, 0xFF	; 255
    2182:	4f e7       	ldi	r20, 0x7F	; 127
    2184:	57 e4       	ldi	r21, 0x47	; 71
    2186:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    218a:	18 16       	cp	r1, r24
    218c:	4c f5       	brge	.+82     	; 0x21e0 <writeByte+0x890>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218e:	69 8d       	ldd	r22, Y+25	; 0x19
    2190:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2192:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2194:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e2       	ldi	r20, 0x20	; 32
    219c:	51 e4       	ldi	r21, 0x41	; 65
    219e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	bc 01       	movw	r22, r24
    21a8:	cd 01       	movw	r24, r26
    21aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9c 8b       	std	Y+20, r25	; 0x14
    21b4:	8b 8b       	std	Y+19, r24	; 0x13
    21b6:	0f c0       	rjmp	.+30     	; 0x21d6 <writeByte+0x886>
    21b8:	80 e9       	ldi	r24, 0x90	; 144
    21ba:	91 e0       	ldi	r25, 0x01	; 1
    21bc:	9a 8b       	std	Y+18, r25	; 0x12
    21be:	89 8b       	std	Y+17, r24	; 0x11
    21c0:	89 89       	ldd	r24, Y+17	; 0x11
    21c2:	9a 89       	ldd	r25, Y+18	; 0x12
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <writeByte+0x874>
    21c8:	9a 8b       	std	Y+18, r25	; 0x12
    21ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21cc:	8b 89       	ldd	r24, Y+19	; 0x13
    21ce:	9c 89       	ldd	r25, Y+20	; 0x14
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	9c 8b       	std	Y+20, r25	; 0x14
    21d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d6:	8b 89       	ldd	r24, Y+19	; 0x13
    21d8:	9c 89       	ldd	r25, Y+20	; 0x14
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	69 f7       	brne	.-38     	; 0x21b8 <writeByte+0x868>
    21de:	14 c0       	rjmp	.+40     	; 0x2208 <writeByte+0x8b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e0:	6d 89       	ldd	r22, Y+21	; 0x15
    21e2:	7e 89       	ldd	r23, Y+22	; 0x16
    21e4:	8f 89       	ldd	r24, Y+23	; 0x17
    21e6:	98 8d       	ldd	r25, Y+24	; 0x18
    21e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	9c 8b       	std	Y+20, r25	; 0x14
    21f2:	8b 8b       	std	Y+19, r24	; 0x13
    21f4:	8b 89       	ldd	r24, Y+19	; 0x13
    21f6:	9c 89       	ldd	r25, Y+20	; 0x14
    21f8:	98 8b       	std	Y+16, r25	; 0x10
    21fa:	8f 87       	std	Y+15, r24	; 0x0f
    21fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fe:	98 89       	ldd	r25, Y+16	; 0x10
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <writeByte+0x8b0>
    2204:	98 8b       	std	Y+16, r25	; 0x10
    2206:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		Dio_clrPin(Lcd_cfg[LcdID].E);
    2208:	fe 01       	movw	r30, r28
    220a:	e8 5b       	subi	r30, 0xB8	; 184
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	c9 01       	movw	r24, r18
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	82 0f       	add	r24, r18
    221c:	93 1f       	adc	r25, r19
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	fc 01       	movw	r30, r24
    222a:	e6 52       	subi	r30, 0x26	; 38
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a0 e8       	ldi	r26, 0x80	; 128
    223a:	bf e3       	ldi	r27, 0x3F	; 63
    223c:	8b 87       	std	Y+11, r24	; 0x0b
    223e:	9c 87       	std	Y+12, r25	; 0x0c
    2240:	ad 87       	std	Y+13, r26	; 0x0d
    2242:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2244:	6b 85       	ldd	r22, Y+11	; 0x0b
    2246:	7c 85       	ldd	r23, Y+12	; 0x0c
    2248:	8d 85       	ldd	r24, Y+13	; 0x0d
    224a:	9e 85       	ldd	r25, Y+14	; 0x0e
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	4a e7       	ldi	r20, 0x7A	; 122
    2252:	55 e4       	ldi	r21, 0x45	; 69
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8f 83       	std	Y+7, r24	; 0x07
    225e:	98 87       	std	Y+8, r25	; 0x08
    2260:	a9 87       	std	Y+9, r26	; 0x09
    2262:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2264:	6f 81       	ldd	r22, Y+7	; 0x07
    2266:	78 85       	ldd	r23, Y+8	; 0x08
    2268:	89 85       	ldd	r24, Y+9	; 0x09
    226a:	9a 85       	ldd	r25, Y+10	; 0x0a
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	2c f4       	brge	.+10     	; 0x2286 <writeByte+0x936>
		__ticks = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9e 83       	std	Y+6, r25	; 0x06
    2282:	8d 83       	std	Y+5, r24	; 0x05
    2284:	3f c0       	rjmp	.+126    	; 0x2304 <writeByte+0x9b4>
	else if (__tmp > 65535)
    2286:	6f 81       	ldd	r22, Y+7	; 0x07
    2288:	78 85       	ldd	r23, Y+8	; 0x08
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	3f ef       	ldi	r19, 0xFF	; 255
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	57 e4       	ldi	r21, 0x47	; 71
    2296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	4c f5       	brge	.+82     	; 0x22f0 <writeByte+0x9a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229e:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9e 83       	std	Y+6, r25	; 0x06
    22c4:	8d 83       	std	Y+5, r24	; 0x05
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <writeByte+0x996>
    22c8:	80 e9       	ldi	r24, 0x90	; 144
    22ca:	91 e0       	ldi	r25, 0x01	; 1
    22cc:	9c 83       	std	Y+4, r25	; 0x04
    22ce:	8b 83       	std	Y+3, r24	; 0x03
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <writeByte+0x984>
    22d8:	9c 83       	std	Y+4, r25	; 0x04
    22da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e6:	8d 81       	ldd	r24, Y+5	; 0x05
    22e8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	69 f7       	brne	.-38     	; 0x22c8 <writeByte+0x978>
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <writeByte+0x9c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f0:	6f 81       	ldd	r22, Y+7	; 0x07
    22f2:	78 85       	ldd	r23, Y+8	; 0x08
    22f4:	89 85       	ldd	r24, Y+9	; 0x09
    22f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	9a 81       	ldd	r25, Y+2	; 0x02
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <writeByte+0x9c0>
    2314:	9a 83       	std	Y+2, r25	; 0x02
    2316:	89 83       	std	Y+1, r24	; 0x01



	}

}
    2318:	c6 5b       	subi	r28, 0xB6	; 182
    231a:	df 4f       	sbci	r29, 0xFF	; 255
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	08 95       	ret

00002330 <Lcd_init>:


void Lcd_init(void)
{
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	c9 54       	subi	r28, 0x49	; 73
    233e:	d0 40       	sbci	r29, 0x00	; 0
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
	uint8 counter;
	for(counter =0 ; counter < LcdCount ;counter++)
    234a:	fe 01       	movw	r30, r28
    234c:	e7 5b       	subi	r30, 0xB7	; 183
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	10 82       	st	Z, r1
    2352:	bd c2       	rjmp	.+1402   	; 0x28ce <Lcd_init+0x59e>
	{
		/* Function set */
		if(Lcd_cfg[counter].mode == LCD_4_BIT)
    2354:	fe 01       	movw	r30, r28
    2356:	e7 5b       	subi	r30, 0xB7	; 183
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	80 81       	ld	r24, Z
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	c9 01       	movw	r24, r18
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	82 0f       	add	r24, r18
    2368:	93 1f       	adc	r25, r19
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	fc 01       	movw	r30, r24
    2374:	eb 51       	subi	r30, 0x1B	; 27
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 81       	ld	r24, Z
    237a:	88 23       	and	r24, r24
    237c:	c9 f4       	brne	.+50     	; 0x23b0 <Lcd_init+0x80>
		{
			writeByte(counter,COMMAND, 0x23);
    237e:	fe 01       	movw	r30, r28
    2380:	e7 5b       	subi	r30, 0xB7	; 183
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	43 e2       	ldi	r20, 0x23	; 35
    238a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <writeByte>
			writeByte(counter,COMMAND, 0x22);
    238e:	fe 01       	movw	r30, r28
    2390:	e7 5b       	subi	r30, 0xB7	; 183
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 81       	ld	r24, Z
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	42 e2       	ldi	r20, 0x22	; 34
    239a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <writeByte>
			writeByte(counter,COMMAND, 0x28);
    239e:	fe 01       	movw	r30, r28
    23a0:	e7 5b       	subi	r30, 0xB7	; 183
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	48 e2       	ldi	r20, 0x28	; 40
    23aa:	0e 94 a8 0c 	call	0x1950	; 0x1950 <writeByte>
    23ae:	1d c0       	rjmp	.+58     	; 0x23ea <Lcd_init+0xba>

		}
		else if(Lcd_cfg[counter].mode == LCD_8_BIT)
    23b0:	fe 01       	movw	r30, r28
    23b2:	e7 5b       	subi	r30, 0xB7	; 183
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	c9 01       	movw	r24, r18
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	82 0f       	add	r24, r18
    23c4:	93 1f       	adc	r25, r19
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	fc 01       	movw	r30, r24
    23d0:	eb 51       	subi	r30, 0x1B	; 27
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	41 f4       	brne	.+16     	; 0x23ea <Lcd_init+0xba>
		{
			writeByte(counter,COMMAND, 0x38);
    23da:	fe 01       	movw	r30, r28
    23dc:	e7 5b       	subi	r30, 0xB7	; 183
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 81       	ld	r24, Z
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	48 e3       	ldi	r20, 0x38	; 56
    23e6:	0e 94 a8 0c 	call	0x1950	; 0x1950 <writeByte>
    23ea:	fe 01       	movw	r30, r28
    23ec:	eb 5b       	subi	r30, 0xBB	; 187
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 e2       	ldi	r26, 0x20	; 32
    23f6:	b2 e4       	ldi	r27, 0x42	; 66
    23f8:	80 83       	st	Z, r24
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	a2 83       	std	Z+2, r26	; 0x02
    23fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2400:	8e 01       	movw	r16, r28
    2402:	0f 5b       	subi	r16, 0xBF	; 191
    2404:	1f 4f       	sbci	r17, 0xFF	; 255
    2406:	fe 01       	movw	r30, r28
    2408:	eb 5b       	subi	r30, 0xBB	; 187
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	2b ea       	ldi	r18, 0xAB	; 171
    2416:	3a ea       	ldi	r19, 0xAA	; 170
    2418:	4a ea       	ldi	r20, 0xAA	; 170
    241a:	50 e4       	ldi	r21, 0x40	; 64
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	f8 01       	movw	r30, r16
    2426:	80 83       	st	Z, r24
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	a2 83       	std	Z+2, r26	; 0x02
    242c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    242e:	fe 01       	movw	r30, r28
    2430:	ef 5b       	subi	r30, 0xBF	; 191
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	60 81       	ld	r22, Z
    2436:	71 81       	ldd	r23, Z+1	; 0x01
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e8       	ldi	r20, 0x80	; 128
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	34 f4       	brge	.+12     	; 0x2458 <Lcd_init+0x128>
		__ticks = 1;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	fe 01       	movw	r30, r28
    2450:	e0 5c       	subi	r30, 0xC0	; 192
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 83       	st	Z, r24
    2456:	9d c0       	rjmp	.+314    	; 0x2592 <Lcd_init+0x262>
	else if (__tmp > 255)
    2458:	fe 01       	movw	r30, r28
    245a:	ef 5b       	subi	r30, 0xBF	; 191
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	60 81       	ld	r22, Z
    2460:	71 81       	ldd	r23, Z+1	; 0x01
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	4f e7       	ldi	r20, 0x7F	; 127
    246c:	53 e4       	ldi	r21, 0x43	; 67
    246e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2472:	18 16       	cp	r1, r24
    2474:	0c f0       	brlt	.+2      	; 0x2478 <Lcd_init+0x148>
    2476:	7e c0       	rjmp	.+252    	; 0x2574 <Lcd_init+0x244>
	{
		_delay_ms(__us / 1000.0);
    2478:	fe 01       	movw	r30, r28
    247a:	eb 5b       	subi	r30, 0xBB	; 187
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	60 81       	ld	r22, Z
    2480:	71 81       	ldd	r23, Z+1	; 0x01
    2482:	82 81       	ldd	r24, Z+2	; 0x02
    2484:	93 81       	ldd	r25, Z+3	; 0x03
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	4a e7       	ldi	r20, 0x7A	; 122
    248c:	54 e4       	ldi	r21, 0x44	; 68
    248e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	8c af       	std	Y+60, r24	; 0x3c
    2498:	9d af       	std	Y+61, r25	; 0x3d
    249a:	ae af       	std	Y+62, r26	; 0x3e
    249c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249e:	6c ad       	ldd	r22, Y+60	; 0x3c
    24a0:	7d ad       	ldd	r23, Y+61	; 0x3d
    24a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    24a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4a e7       	ldi	r20, 0x7A	; 122
    24ac:	55 e4       	ldi	r21, 0x45	; 69
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	88 af       	std	Y+56, r24	; 0x38
    24b8:	99 af       	std	Y+57, r25	; 0x39
    24ba:	aa af       	std	Y+58, r26	; 0x3a
    24bc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    24be:	68 ad       	ldd	r22, Y+56	; 0x38
    24c0:	79 ad       	ldd	r23, Y+57	; 0x39
    24c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    24c4:	9b ad       	ldd	r25, Y+59	; 0x3b
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5f e3       	ldi	r21, 0x3F	; 63
    24ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	2c f4       	brge	.+10     	; 0x24e0 <Lcd_init+0x1b0>
		__ticks = 1;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9f ab       	std	Y+55, r25	; 0x37
    24dc:	8e ab       	std	Y+54, r24	; 0x36
    24de:	3f c0       	rjmp	.+126    	; 0x255e <Lcd_init+0x22e>
	else if (__tmp > 65535)
    24e0:	68 ad       	ldd	r22, Y+56	; 0x38
    24e2:	79 ad       	ldd	r23, Y+57	; 0x39
    24e4:	8a ad       	ldd	r24, Y+58	; 0x3a
    24e6:	9b ad       	ldd	r25, Y+59	; 0x3b
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	3f ef       	ldi	r19, 0xFF	; 255
    24ec:	4f e7       	ldi	r20, 0x7F	; 127
    24ee:	57 e4       	ldi	r21, 0x47	; 71
    24f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f4:	18 16       	cp	r1, r24
    24f6:	4c f5       	brge	.+82     	; 0x254a <Lcd_init+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f8:	6c ad       	ldd	r22, Y+60	; 0x3c
    24fa:	7d ad       	ldd	r23, Y+61	; 0x3d
    24fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    24fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e2       	ldi	r20, 0x20	; 32
    2506:	51 e4       	ldi	r21, 0x41	; 65
    2508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9f ab       	std	Y+55, r25	; 0x37
    251e:	8e ab       	std	Y+54, r24	; 0x36
    2520:	0f c0       	rjmp	.+30     	; 0x2540 <Lcd_init+0x210>
    2522:	80 e9       	ldi	r24, 0x90	; 144
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	9d ab       	std	Y+53, r25	; 0x35
    2528:	8c ab       	std	Y+52, r24	; 0x34
    252a:	8c a9       	ldd	r24, Y+52	; 0x34
    252c:	9d a9       	ldd	r25, Y+53	; 0x35
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <Lcd_init+0x1fe>
    2532:	9d ab       	std	Y+53, r25	; 0x35
    2534:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2536:	8e a9       	ldd	r24, Y+54	; 0x36
    2538:	9f a9       	ldd	r25, Y+55	; 0x37
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	9f ab       	std	Y+55, r25	; 0x37
    253e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2540:	8e a9       	ldd	r24, Y+54	; 0x36
    2542:	9f a9       	ldd	r25, Y+55	; 0x37
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	69 f7       	brne	.-38     	; 0x2522 <Lcd_init+0x1f2>
    2548:	2d c0       	rjmp	.+90     	; 0x25a4 <Lcd_init+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254a:	68 ad       	ldd	r22, Y+56	; 0x38
    254c:	79 ad       	ldd	r23, Y+57	; 0x39
    254e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2550:	9b ad       	ldd	r25, Y+59	; 0x3b
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9f ab       	std	Y+55, r25	; 0x37
    255c:	8e ab       	std	Y+54, r24	; 0x36
    255e:	8e a9       	ldd	r24, Y+54	; 0x36
    2560:	9f a9       	ldd	r25, Y+55	; 0x37
    2562:	9b ab       	std	Y+51, r25	; 0x33
    2564:	8a ab       	std	Y+50, r24	; 0x32
    2566:	8a a9       	ldd	r24, Y+50	; 0x32
    2568:	9b a9       	ldd	r25, Y+51	; 0x33
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <Lcd_init+0x23a>
    256e:	9b ab       	std	Y+51, r25	; 0x33
    2570:	8a ab       	std	Y+50, r24	; 0x32
    2572:	18 c0       	rjmp	.+48     	; 0x25a4 <Lcd_init+0x274>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2574:	fe 01       	movw	r30, r28
    2576:	ef 5b       	subi	r30, 0xBF	; 191
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	60 81       	ld	r22, Z
    257c:	71 81       	ldd	r23, Z+1	; 0x01
    257e:	82 81       	ldd	r24, Z+2	; 0x02
    2580:	93 81       	ldd	r25, Z+3	; 0x03
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	fe 01       	movw	r30, r28
    258c:	e0 5c       	subi	r30, 0xC0	; 192
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	80 83       	st	Z, r24
    2592:	fe 01       	movw	r30, r28
    2594:	e0 5c       	subi	r30, 0xC0	; 192
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 81       	ld	r24, Z
    259a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    259c:	89 a9       	ldd	r24, Y+49	; 0x31
    259e:	8a 95       	dec	r24
    25a0:	f1 f7       	brne	.-4      	; 0x259e <Lcd_init+0x26e>
    25a2:	89 ab       	std	Y+49, r24	; 0x31

		}
		_delay_us(40);
		/* Display on*/
		writeByte(counter,COMMAND,0x0E);
    25a4:	fe 01       	movw	r30, r28
    25a6:	e7 5b       	subi	r30, 0xB7	; 183
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	60 e0       	ldi	r22, 0x00	; 0
    25ae:	4e e0       	ldi	r20, 0x0E	; 14
    25b0:	0e 94 a8 0c 	call	0x1950	; 0x1950 <writeByte>
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a0 e2       	ldi	r26, 0x20	; 32
    25ba:	b2 e4       	ldi	r27, 0x42	; 66
    25bc:	8d a7       	std	Y+45, r24	; 0x2d
    25be:	9e a7       	std	Y+46, r25	; 0x2e
    25c0:	af a7       	std	Y+47, r26	; 0x2f
    25c2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25c4:	6d a5       	ldd	r22, Y+45	; 0x2d
    25c6:	7e a5       	ldd	r23, Y+46	; 0x2e
    25c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ca:	98 a9       	ldd	r25, Y+48	; 0x30
    25cc:	2b ea       	ldi	r18, 0xAB	; 171
    25ce:	3a ea       	ldi	r19, 0xAA	; 170
    25d0:	4a ea       	ldi	r20, 0xAA	; 170
    25d2:	50 e4       	ldi	r21, 0x40	; 64
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	89 a7       	std	Y+41, r24	; 0x29
    25de:	9a a7       	std	Y+42, r25	; 0x2a
    25e0:	ab a7       	std	Y+43, r26	; 0x2b
    25e2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    25e4:	69 a5       	ldd	r22, Y+41	; 0x29
    25e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    25e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    25ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e8       	ldi	r20, 0x80	; 128
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f8:	88 23       	and	r24, r24
    25fa:	1c f4       	brge	.+6      	; 0x2602 <Lcd_init+0x2d2>
		__ticks = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	88 a7       	std	Y+40, r24	; 0x28
    2600:	91 c0       	rjmp	.+290    	; 0x2724 <Lcd_init+0x3f4>
	else if (__tmp > 255)
    2602:	69 a5       	ldd	r22, Y+41	; 0x29
    2604:	7a a5       	ldd	r23, Y+42	; 0x2a
    2606:	8b a5       	ldd	r24, Y+43	; 0x2b
    2608:	9c a5       	ldd	r25, Y+44	; 0x2c
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	4f e7       	ldi	r20, 0x7F	; 127
    2610:	53 e4       	ldi	r21, 0x43	; 67
    2612:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2616:	18 16       	cp	r1, r24
    2618:	0c f0       	brlt	.+2      	; 0x261c <Lcd_init+0x2ec>
    261a:	7b c0       	rjmp	.+246    	; 0x2712 <Lcd_init+0x3e2>
	{
		_delay_ms(__us / 1000.0);
    261c:	6d a5       	ldd	r22, Y+45	; 0x2d
    261e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2620:	8f a5       	ldd	r24, Y+47	; 0x2f
    2622:	98 a9       	ldd	r25, Y+48	; 0x30
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	4a e7       	ldi	r20, 0x7A	; 122
    262a:	54 e4       	ldi	r21, 0x44	; 68
    262c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	8c a3       	std	Y+36, r24	; 0x24
    2636:	9d a3       	std	Y+37, r25	; 0x25
    2638:	ae a3       	std	Y+38, r26	; 0x26
    263a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263c:	6c a1       	ldd	r22, Y+36	; 0x24
    263e:	7d a1       	ldd	r23, Y+37	; 0x25
    2640:	8e a1       	ldd	r24, Y+38	; 0x26
    2642:	9f a1       	ldd	r25, Y+39	; 0x27
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	4a e7       	ldi	r20, 0x7A	; 122
    264a:	55 e4       	ldi	r21, 0x45	; 69
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	88 a3       	std	Y+32, r24	; 0x20
    2656:	99 a3       	std	Y+33, r25	; 0x21
    2658:	aa a3       	std	Y+34, r26	; 0x22
    265a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    265c:	68 a1       	ldd	r22, Y+32	; 0x20
    265e:	79 a1       	ldd	r23, Y+33	; 0x21
    2660:	8a a1       	ldd	r24, Y+34	; 0x22
    2662:	9b a1       	ldd	r25, Y+35	; 0x23
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e8       	ldi	r20, 0x80	; 128
    266a:	5f e3       	ldi	r21, 0x3F	; 63
    266c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2670:	88 23       	and	r24, r24
    2672:	2c f4       	brge	.+10     	; 0x267e <Lcd_init+0x34e>
		__ticks = 1;
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	9f 8f       	std	Y+31, r25	; 0x1f
    267a:	8e 8f       	std	Y+30, r24	; 0x1e
    267c:	3f c0       	rjmp	.+126    	; 0x26fc <Lcd_init+0x3cc>
	else if (__tmp > 65535)
    267e:	68 a1       	ldd	r22, Y+32	; 0x20
    2680:	79 a1       	ldd	r23, Y+33	; 0x21
    2682:	8a a1       	ldd	r24, Y+34	; 0x22
    2684:	9b a1       	ldd	r25, Y+35	; 0x23
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	3f ef       	ldi	r19, 0xFF	; 255
    268a:	4f e7       	ldi	r20, 0x7F	; 127
    268c:	57 e4       	ldi	r21, 0x47	; 71
    268e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2692:	18 16       	cp	r1, r24
    2694:	4c f5       	brge	.+82     	; 0x26e8 <Lcd_init+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2696:	6c a1       	ldd	r22, Y+36	; 0x24
    2698:	7d a1       	ldd	r23, Y+37	; 0x25
    269a:	8e a1       	ldd	r24, Y+38	; 0x26
    269c:	9f a1       	ldd	r25, Y+39	; 0x27
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e2       	ldi	r20, 0x20	; 32
    26a4:	51 e4       	ldi	r21, 0x41	; 65
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9f 8f       	std	Y+31, r25	; 0x1f
    26bc:	8e 8f       	std	Y+30, r24	; 0x1e
    26be:	0f c0       	rjmp	.+30     	; 0x26de <Lcd_init+0x3ae>
    26c0:	80 e9       	ldi	r24, 0x90	; 144
    26c2:	91 e0       	ldi	r25, 0x01	; 1
    26c4:	9d 8f       	std	Y+29, r25	; 0x1d
    26c6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <Lcd_init+0x39c>
    26d0:	9d 8f       	std	Y+29, r25	; 0x1d
    26d2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	9f 8f       	std	Y+31, r25	; 0x1f
    26dc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	69 f7       	brne	.-38     	; 0x26c0 <Lcd_init+0x390>
    26e6:	24 c0       	rjmp	.+72     	; 0x2730 <Lcd_init+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e8:	68 a1       	ldd	r22, Y+32	; 0x20
    26ea:	79 a1       	ldd	r23, Y+33	; 0x21
    26ec:	8a a1       	ldd	r24, Y+34	; 0x22
    26ee:	9b a1       	ldd	r25, Y+35	; 0x23
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9f 8f       	std	Y+31, r25	; 0x1f
    26fa:	8e 8f       	std	Y+30, r24	; 0x1e
    26fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2700:	9b 8f       	std	Y+27, r25	; 0x1b
    2702:	8a 8f       	std	Y+26, r24	; 0x1a
    2704:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2706:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <Lcd_init+0x3d8>
    270c:	9b 8f       	std	Y+27, r25	; 0x1b
    270e:	8a 8f       	std	Y+26, r24	; 0x1a
    2710:	0f c0       	rjmp	.+30     	; 0x2730 <Lcd_init+0x400>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2712:	69 a5       	ldd	r22, Y+41	; 0x29
    2714:	7a a5       	ldd	r23, Y+42	; 0x2a
    2716:	8b a5       	ldd	r24, Y+43	; 0x2b
    2718:	9c a5       	ldd	r25, Y+44	; 0x2c
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	88 a7       	std	Y+40, r24	; 0x28
    2724:	88 a5       	ldd	r24, Y+40	; 0x28
    2726:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2728:	89 8d       	ldd	r24, Y+25	; 0x19
    272a:	8a 95       	dec	r24
    272c:	f1 f7       	brne	.-4      	; 0x272a <Lcd_init+0x3fa>
    272e:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(40);

		/* clear*/
		writeByte(counter, COMMAND , 0x01);
    2730:	fe 01       	movw	r30, r28
    2732:	e7 5b       	subi	r30, 0xB7	; 183
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	41 e0       	ldi	r20, 0x01	; 1
    273c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <writeByte>
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	a0 e2       	ldi	r26, 0x20	; 32
    2746:	b2 e4       	ldi	r27, 0x42	; 66
    2748:	8d 8b       	std	Y+21, r24	; 0x15
    274a:	9e 8b       	std	Y+22, r25	; 0x16
    274c:	af 8b       	std	Y+23, r26	; 0x17
    274e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2750:	6d 89       	ldd	r22, Y+21	; 0x15
    2752:	7e 89       	ldd	r23, Y+22	; 0x16
    2754:	8f 89       	ldd	r24, Y+23	; 0x17
    2756:	98 8d       	ldd	r25, Y+24	; 0x18
    2758:	2b ea       	ldi	r18, 0xAB	; 171
    275a:	3a ea       	ldi	r19, 0xAA	; 170
    275c:	4a ea       	ldi	r20, 0xAA	; 170
    275e:	50 e4       	ldi	r21, 0x40	; 64
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	89 8b       	std	Y+17, r24	; 0x11
    276a:	9a 8b       	std	Y+18, r25	; 0x12
    276c:	ab 8b       	std	Y+19, r26	; 0x13
    276e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2770:	69 89       	ldd	r22, Y+17	; 0x11
    2772:	7a 89       	ldd	r23, Y+18	; 0x12
    2774:	8b 89       	ldd	r24, Y+19	; 0x13
    2776:	9c 89       	ldd	r25, Y+20	; 0x14
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2784:	88 23       	and	r24, r24
    2786:	1c f4       	brge	.+6      	; 0x278e <Lcd_init+0x45e>
		__ticks = 1;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	88 8b       	std	Y+16, r24	; 0x10
    278c:	91 c0       	rjmp	.+290    	; 0x28b0 <Lcd_init+0x580>
	else if (__tmp > 255)
    278e:	69 89       	ldd	r22, Y+17	; 0x11
    2790:	7a 89       	ldd	r23, Y+18	; 0x12
    2792:	8b 89       	ldd	r24, Y+19	; 0x13
    2794:	9c 89       	ldd	r25, Y+20	; 0x14
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	53 e4       	ldi	r21, 0x43	; 67
    279e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	0c f0       	brlt	.+2      	; 0x27a8 <Lcd_init+0x478>
    27a6:	7b c0       	rjmp	.+246    	; 0x289e <Lcd_init+0x56e>
	{
		_delay_ms(__us / 1000.0);
    27a8:	6d 89       	ldd	r22, Y+21	; 0x15
    27aa:	7e 89       	ldd	r23, Y+22	; 0x16
    27ac:	8f 89       	ldd	r24, Y+23	; 0x17
    27ae:	98 8d       	ldd	r25, Y+24	; 0x18
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	4a e7       	ldi	r20, 0x7A	; 122
    27b6:	54 e4       	ldi	r21, 0x44	; 68
    27b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	8c 87       	std	Y+12, r24	; 0x0c
    27c2:	9d 87       	std	Y+13, r25	; 0x0d
    27c4:	ae 87       	std	Y+14, r26	; 0x0e
    27c6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    27ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    27cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	4a e7       	ldi	r20, 0x7A	; 122
    27d6:	55 e4       	ldi	r21, 0x45	; 69
    27d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	88 87       	std	Y+8, r24	; 0x08
    27e2:	99 87       	std	Y+9, r25	; 0x09
    27e4:	aa 87       	std	Y+10, r26	; 0x0a
    27e6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27e8:	68 85       	ldd	r22, Y+8	; 0x08
    27ea:	79 85       	ldd	r23, Y+9	; 0x09
    27ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    27ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e8       	ldi	r20, 0x80	; 128
    27f6:	5f e3       	ldi	r21, 0x3F	; 63
    27f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27fc:	88 23       	and	r24, r24
    27fe:	2c f4       	brge	.+10     	; 0x280a <Lcd_init+0x4da>
		__ticks = 1;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9f 83       	std	Y+7, r25	; 0x07
    2806:	8e 83       	std	Y+6, r24	; 0x06
    2808:	3f c0       	rjmp	.+126    	; 0x2888 <Lcd_init+0x558>
	else if (__tmp > 65535)
    280a:	68 85       	ldd	r22, Y+8	; 0x08
    280c:	79 85       	ldd	r23, Y+9	; 0x09
    280e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2810:	9b 85       	ldd	r25, Y+11	; 0x0b
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	3f ef       	ldi	r19, 0xFF	; 255
    2816:	4f e7       	ldi	r20, 0x7F	; 127
    2818:	57 e4       	ldi	r21, 0x47	; 71
    281a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281e:	18 16       	cp	r1, r24
    2820:	4c f5       	brge	.+82     	; 0x2874 <Lcd_init+0x544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2822:	6c 85       	ldd	r22, Y+12	; 0x0c
    2824:	7d 85       	ldd	r23, Y+13	; 0x0d
    2826:	8e 85       	ldd	r24, Y+14	; 0x0e
    2828:	9f 85       	ldd	r25, Y+15	; 0x0f
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e2       	ldi	r20, 0x20	; 32
    2830:	51 e4       	ldi	r21, 0x41	; 65
    2832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9f 83       	std	Y+7, r25	; 0x07
    2848:	8e 83       	std	Y+6, r24	; 0x06
    284a:	0f c0       	rjmp	.+30     	; 0x286a <Lcd_init+0x53a>
    284c:	80 e9       	ldi	r24, 0x90	; 144
    284e:	91 e0       	ldi	r25, 0x01	; 1
    2850:	9d 83       	std	Y+5, r25	; 0x05
    2852:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	9d 81       	ldd	r25, Y+5	; 0x05
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <Lcd_init+0x528>
    285c:	9d 83       	std	Y+5, r25	; 0x05
    285e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2860:	8e 81       	ldd	r24, Y+6	; 0x06
    2862:	9f 81       	ldd	r25, Y+7	; 0x07
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	9f 83       	std	Y+7, r25	; 0x07
    2868:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286a:	8e 81       	ldd	r24, Y+6	; 0x06
    286c:	9f 81       	ldd	r25, Y+7	; 0x07
    286e:	00 97       	sbiw	r24, 0x00	; 0
    2870:	69 f7       	brne	.-38     	; 0x284c <Lcd_init+0x51c>
    2872:	24 c0       	rjmp	.+72     	; 0x28bc <Lcd_init+0x58c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2874:	68 85       	ldd	r22, Y+8	; 0x08
    2876:	79 85       	ldd	r23, Y+9	; 0x09
    2878:	8a 85       	ldd	r24, Y+10	; 0x0a
    287a:	9b 85       	ldd	r25, Y+11	; 0x0b
    287c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	9f 83       	std	Y+7, r25	; 0x07
    2886:	8e 83       	std	Y+6, r24	; 0x06
    2888:	8e 81       	ldd	r24, Y+6	; 0x06
    288a:	9f 81       	ldd	r25, Y+7	; 0x07
    288c:	9b 83       	std	Y+3, r25	; 0x03
    288e:	8a 83       	std	Y+2, r24	; 0x02
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	9b 81       	ldd	r25, Y+3	; 0x03
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <Lcd_init+0x564>
    2898:	9b 83       	std	Y+3, r25	; 0x03
    289a:	8a 83       	std	Y+2, r24	; 0x02
    289c:	0f c0       	rjmp	.+30     	; 0x28bc <Lcd_init+0x58c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    289e:	69 89       	ldd	r22, Y+17	; 0x11
    28a0:	7a 89       	ldd	r23, Y+18	; 0x12
    28a2:	8b 89       	ldd	r24, Y+19	; 0x13
    28a4:	9c 89       	ldd	r25, Y+20	; 0x14
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	88 8b       	std	Y+16, r24	; 0x10
    28b0:	88 89       	ldd	r24, Y+16	; 0x10
    28b2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	8a 95       	dec	r24
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <Lcd_init+0x586>
    28ba:	89 83       	std	Y+1, r24	; 0x01


void Lcd_init(void)
{
	uint8 counter;
	for(counter =0 ; counter < LcdCount ;counter++)
    28bc:	de 01       	movw	r26, r28
    28be:	a7 5b       	subi	r26, 0xB7	; 183
    28c0:	bf 4f       	sbci	r27, 0xFF	; 255
    28c2:	fe 01       	movw	r30, r28
    28c4:	e7 5b       	subi	r30, 0xB7	; 183
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	80 81       	ld	r24, Z
    28ca:	8f 5f       	subi	r24, 0xFF	; 255
    28cc:	8c 93       	st	X, r24
    28ce:	80 91 f2 00 	lds	r24, 0x00F2
    28d2:	fe 01       	movw	r30, r28
    28d4:	e7 5b       	subi	r30, 0xB7	; 183
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	90 81       	ld	r25, Z
    28da:	98 17       	cp	r25, r24
    28dc:	08 f4       	brcc	.+2      	; 0x28e0 <Lcd_init+0x5b0>
    28de:	3a cd       	rjmp	.-1420   	; 0x2354 <Lcd_init+0x24>

	}



}
    28e0:	c7 5b       	subi	r28, 0xB7	; 183
    28e2:	df 4f       	sbci	r29, 0xFF	; 255
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	1f 91       	pop	r17
    28f4:	0f 91       	pop	r16
    28f6:	08 95       	ret

000028f8 <Lcd_writeChar>:

void Lcd_writeChar(uint8 LcdID, uint8 data , uint8 row , uint8 col)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <Lcd_writeChar+0x6>
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <Lcd_writeChar+0x8>
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	6a 83       	std	Y+2, r22	; 0x02
    2908:	4b 83       	std	Y+3, r20	; 0x03
    290a:	2c 83       	std	Y+4, r18	; 0x04
	writeByte(LcdID, COMMAND, 0x80+(row * 0x40) + col);
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	88 2f       	mov	r24, r24
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	02 96       	adiw	r24, 0x02	; 2
    2914:	00 24       	eor	r0, r0
    2916:	96 95       	lsr	r25
    2918:	87 95       	ror	r24
    291a:	07 94       	ror	r0
    291c:	96 95       	lsr	r25
    291e:	87 95       	ror	r24
    2920:	07 94       	ror	r0
    2922:	98 2f       	mov	r25, r24
    2924:	80 2d       	mov	r24, r0
    2926:	98 2f       	mov	r25, r24
    2928:	8c 81       	ldd	r24, Y+4	; 0x04
    292a:	98 0f       	add	r25, r24
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	49 2f       	mov	r20, r25
    2932:	0e 94 a8 0c 	call	0x1950	; 0x1950 <writeByte>

	writeByte(LcdID, DATA, data);
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	61 e0       	ldi	r22, 0x01	; 1
    293a:	4a 81       	ldd	r20, Y+2	; 0x02
    293c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <writeByte>


}
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <Lcd_writeString>:


void Lcd_writeString(uint8 LcdID, uint8 * data , uint8 row , uint8 col)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	00 d0       	rcall	.+0      	; 0x2954 <Lcd_writeString+0x6>
    2954:	00 d0       	rcall	.+0      	; 0x2956 <Lcd_writeString+0x8>
    2956:	00 d0       	rcall	.+0      	; 0x2958 <Lcd_writeString+0xa>
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	8a 83       	std	Y+2, r24	; 0x02
    295e:	7c 83       	std	Y+4, r23	; 0x04
    2960:	6b 83       	std	Y+3, r22	; 0x03
    2962:	4d 83       	std	Y+5, r20	; 0x05
    2964:	2e 83       	std	Y+6, r18	; 0x06
	uint8 counter = 0;
    2966:	19 82       	std	Y+1, r1	; 0x01
	writeByte(LcdID, COMMAND, 0x80+(row * 0x40) + col);
    2968:	8d 81       	ldd	r24, Y+5	; 0x05
    296a:	88 2f       	mov	r24, r24
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	02 96       	adiw	r24, 0x02	; 2
    2970:	00 24       	eor	r0, r0
    2972:	96 95       	lsr	r25
    2974:	87 95       	ror	r24
    2976:	07 94       	ror	r0
    2978:	96 95       	lsr	r25
    297a:	87 95       	ror	r24
    297c:	07 94       	ror	r0
    297e:	98 2f       	mov	r25, r24
    2980:	80 2d       	mov	r24, r0
    2982:	98 2f       	mov	r25, r24
    2984:	8e 81       	ldd	r24, Y+6	; 0x06
    2986:	98 0f       	add	r25, r24
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	60 e0       	ldi	r22, 0x00	; 0
    298c:	49 2f       	mov	r20, r25
    298e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <writeByte>
    2992:	11 c0       	rjmp	.+34     	; 0x29b6 <Lcd_writeString+0x68>

	while (data[counter]!= '\0')
	{

		writeByte(LcdID, DATA, data[counter]);
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	28 2f       	mov	r18, r24
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	fc 01       	movw	r30, r24
    29a0:	e2 0f       	add	r30, r18
    29a2:	f3 1f       	adc	r31, r19
    29a4:	90 81       	ld	r25, Z
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	61 e0       	ldi	r22, 0x01	; 1
    29aa:	49 2f       	mov	r20, r25
    29ac:	0e 94 a8 0c 	call	0x1950	; 0x1950 <writeByte>
		counter++;
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	8f 5f       	subi	r24, 0xFF	; 255
    29b4:	89 83       	std	Y+1, r24	; 0x01
void Lcd_writeString(uint8 LcdID, uint8 * data , uint8 row , uint8 col)
{
	uint8 counter = 0;
	writeByte(LcdID, COMMAND, 0x80+(row * 0x40) + col);

	while (data[counter]!= '\0')
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	fc 01       	movw	r30, r24
    29c2:	e2 0f       	add	r30, r18
    29c4:	f3 1f       	adc	r31, r19
    29c6:	80 81       	ld	r24, Z
    29c8:	88 23       	and	r24, r24
    29ca:	21 f7       	brne	.-56     	; 0x2994 <Lcd_writeString+0x46>
		writeByte(LcdID, DATA, data[counter]);
		counter++;
	}


}
    29cc:	26 96       	adiw	r28, 0x06	; 6
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	08 95       	ret

000029de <Led_On>:
 */
#include "STD_TYPES.h"
#include "Dio.h"
#include "Led.h"
void Led_On(uint8 LedID)
{
    29de:	df 93       	push	r29
    29e0:	cf 93       	push	r28
    29e2:	0f 92       	push	r0
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	89 83       	std	Y+1, r24	; 0x01
	if(Led_cfg[LedID].mode ==Led_Active_High)
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	88 2f       	mov	r24, r24
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	88 0f       	add	r24, r24
    29f2:	99 1f       	adc	r25, r25
    29f4:	fc 01       	movw	r30, r24
    29f6:	ec 50       	subi	r30, 0x0C	; 12
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 81       	ld	r24, Z
    29fc:	88 23       	and	r24, r24
    29fe:	61 f4       	brne	.+24     	; 0x2a18 <Led_On+0x3a>
	{
		Dio_setPin(Led_cfg[LedID].pin);
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	88 2f       	mov	r24, r24
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	ed 50       	subi	r30, 0x0D	; 13
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 81       	ld	r24, Z
    2a12:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>
    2a16:	0b c0       	rjmp	.+22     	; 0x2a2e <Led_On+0x50>
	}
	else
	{
		Dio_clrPin(Led_cfg[LedID].pin);
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	88 2f       	mov	r24, r24
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	fc 01       	movw	r30, r24
    2a24:	ed 50       	subi	r30, 0x0D	; 13
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>

	}

}
    2a2e:	0f 90       	pop	r0
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <Led_Off>:

void Led_Off(uint8 LedID)
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	0f 92       	push	r0
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	89 83       	std	Y+1, r24	; 0x01
	if(Led_cfg[LedID].mode ==Led_Active_High)
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	88 2f       	mov	r24, r24
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	ec 50       	subi	r30, 0x0C	; 12
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 81       	ld	r24, Z
    2a54:	88 23       	and	r24, r24
    2a56:	61 f4       	brne	.+24     	; 0x2a70 <Led_Off+0x3a>
	{
		Dio_clrPin(Led_cfg[LedID].pin);
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	88 2f       	mov	r24, r24
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	fc 01       	movw	r30, r24
    2a64:	ed 50       	subi	r30, 0x0D	; 13
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	80 81       	ld	r24, Z
    2a6a:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>
    2a6e:	0b c0       	rjmp	.+22     	; 0x2a86 <Led_Off+0x50>
	}
	else
	{
		Dio_setPin(Led_cfg[LedID].pin);
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	ed 50       	subi	r30, 0x0D	; 13
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>

	}


}
    2a86:	0f 90       	pop	r0
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <main>:

void cloock(void);
void uartrxx(void);

int main(void)
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	62 97       	sbiw	r28, 0x12	; 18
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
	uint8 SHOWALMIN [2];// alarm minutes displaying character on LCD

	uint8 SHOWALHOU [2];//alarm hours displaying character on LCD*/


	Dio_init();
    2aa2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_init>
	Uart_init();
    2aa6:	0e 94 73 20 	call	0x40e6	; 0x40e6 <Uart_init>
	Lcd_init();
    2aaa:	0e 94 98 11 	call	0x2330	; 0x2330 <Lcd_init>

	//Lcd_writeString(0,"SET THE TIME:",0,0);  // Instructs the user to set the time on LCD

	TCCR1B |=(1<<CS12)|(1<<CS10)|(1<<WGM12);// setting prescale and CTC mode
    2aae:	ae e4       	ldi	r26, 0x4E	; 78
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	ee e4       	ldi	r30, 0x4E	; 78
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	8d 60       	ori	r24, 0x0D	; 13
    2aba:	8c 93       	st	X, r24
	OCR1A=15625;
    2abc:	eb e4       	ldi	r30, 0x4B	; 75
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	89 e0       	ldi	r24, 0x09	; 9
    2ac2:	80 83       	st	Z, r24
	Os_Isr_EnableInterrupt(TIMER1_COMPA);
    2ac4:	86 e0       	ldi	r24, 0x06	; 6
    2ac6:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <Os_Isr_EnableInterrupt>
	Os_Isr_EnableInterrupt(USART_RXC);
    2aca:	8c e0       	ldi	r24, 0x0C	; 12
    2acc:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <Os_Isr_EnableInterrupt>
	Os_Isr_EnableableAllInterrupts();
    2ad0:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <Os_Isr_EnableableAllInterrupts>
	while(1)

	{

		itoa(HOU/10,SHOWHOU,10);
    2ad4:	80 91 3c 01 	lds	r24, 0x013C
    2ad8:	9a e0       	ldi	r25, 0x0A	; 10
    2ada:	69 2f       	mov	r22, r25
    2adc:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodqi4>
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	9e 01       	movw	r18, r28
    2ae6:	2b 5f       	subi	r18, 0xFB	; 251
    2ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aea:	b9 01       	movw	r22, r18
    2aec:	4a e0       	ldi	r20, 0x0A	; 10
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	0e 94 80 21 	call	0x4300	; 0x4300 <itoa>

		Lcd_writeString(0,SHOWHOU,0,0);
    2af4:	9e 01       	movw	r18, r28
    2af6:	2b 5f       	subi	r18, 0xFB	; 251
    2af8:	3f 4f       	sbci	r19, 0xFF	; 255
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	b9 01       	movw	r22, r18
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>

		// displaying tens place of hours above

		itoa(HOU%10,SHOWHOU,10);
    2b06:	80 91 3c 01 	lds	r24, 0x013C
    2b0a:	9a e0       	ldi	r25, 0x0A	; 10
    2b0c:	69 2f       	mov	r22, r25
    2b0e:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodqi4>
    2b12:	89 2f       	mov	r24, r25
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	9e 01       	movw	r18, r28
    2b1a:	2b 5f       	subi	r18, 0xFB	; 251
    2b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1e:	b9 01       	movw	r22, r18
    2b20:	4a e0       	ldi	r20, 0x0A	; 10
    2b22:	50 e0       	ldi	r21, 0x00	; 0
    2b24:	0e 94 80 21 	call	0x4300	; 0x4300 <itoa>

		Lcd_writeString(0,SHOWHOU,0,1);// send_a_string(SHOWHOU);
    2b28:	9e 01       	movw	r18, r28
    2b2a:	2b 5f       	subi	r18, 0xFB	; 251
    2b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	b9 01       	movw	r22, r18
    2b32:	40 e0       	ldi	r20, 0x00	; 0
    2b34:	21 e0       	ldi	r18, 0x01	; 1
    2b36:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>

		// displaying ones place of hours above

		Lcd_writeString(0,":",0,2);//send_a_string (":");//displaying character
    2b3a:	20 e6       	ldi	r18, 0x60	; 96
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	b9 01       	movw	r22, r18
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	22 e0       	ldi	r18, 0x02	; 2
    2b46:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>



		itoa(MIN/10,SHOWMIN,10);
    2b4a:	80 91 3b 01 	lds	r24, 0x013B
    2b4e:	9a e0       	ldi	r25, 0x0A	; 10
    2b50:	69 2f       	mov	r22, r25
    2b52:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodqi4>
    2b56:	88 2f       	mov	r24, r24
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	9e 01       	movw	r18, r28
    2b5c:	2d 5f       	subi	r18, 0xFD	; 253
    2b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b60:	b9 01       	movw	r22, r18
    2b62:	4a e0       	ldi	r20, 0x0A	; 10
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	0e 94 80 21 	call	0x4300	; 0x4300 <itoa>

		Lcd_writeString(0,SHOWMIN,0,3);//send_a_string(SHOWMIN);
    2b6a:	9e 01       	movw	r18, r28
    2b6c:	2d 5f       	subi	r18, 0xFD	; 253
    2b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	b9 01       	movw	r22, r18
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	23 e0       	ldi	r18, 0x03	; 3
    2b78:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>
		// displaying tens place of minutes above

		itoa(MIN%10,SHOWMIN,10);
    2b7c:	80 91 3b 01 	lds	r24, 0x013B
    2b80:	9a e0       	ldi	r25, 0x0A	; 10
    2b82:	69 2f       	mov	r22, r25
    2b84:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodqi4>
    2b88:	89 2f       	mov	r24, r25
    2b8a:	88 2f       	mov	r24, r24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9e 01       	movw	r18, r28
    2b90:	2d 5f       	subi	r18, 0xFD	; 253
    2b92:	3f 4f       	sbci	r19, 0xFF	; 255
    2b94:	b9 01       	movw	r22, r18
    2b96:	4a e0       	ldi	r20, 0x0A	; 10
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	0e 94 80 21 	call	0x4300	; 0x4300 <itoa>

		Lcd_writeString(0,SHOWMIN,0,4);//send_a_string(SHOWMIN);
    2b9e:	9e 01       	movw	r18, r28
    2ba0:	2d 5f       	subi	r18, 0xFD	; 253
    2ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	b9 01       	movw	r22, r18
    2ba8:	40 e0       	ldi	r20, 0x00	; 0
    2baa:	24 e0       	ldi	r18, 0x04	; 4
    2bac:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>

		// displaying ones place of minutes above


		Lcd_writeString(0,":",0,5);//send_a_string (":");
    2bb0:	20 e6       	ldi	r18, 0x60	; 96
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	b9 01       	movw	r22, r18
    2bb8:	40 e0       	ldi	r20, 0x00	; 0
    2bba:	25 e0       	ldi	r18, 0x05	; 5
    2bbc:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>

		itoa(SEC/10,SHOWSEC,10);
    2bc0:	80 91 3a 01 	lds	r24, 0x013A
    2bc4:	9a e0       	ldi	r25, 0x0A	; 10
    2bc6:	69 2f       	mov	r22, r25
    2bc8:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodqi4>
    2bcc:	88 2f       	mov	r24, r24
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	9e 01       	movw	r18, r28
    2bd2:	2f 5f       	subi	r18, 0xFF	; 255
    2bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd6:	b9 01       	movw	r22, r18
    2bd8:	4a e0       	ldi	r20, 0x0A	; 10
    2bda:	50 e0       	ldi	r21, 0x00	; 0
    2bdc:	0e 94 80 21 	call	0x4300	; 0x4300 <itoa>

		Lcd_writeString(0,SHOWSEC,0,6);//send_a_string(SHOWMIN);
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	9e 01       	movw	r18, r28
    2be4:	2f 5f       	subi	r18, 0xFF	; 255
    2be6:	3f 4f       	sbci	r19, 0xFF	; 255
    2be8:	b9 01       	movw	r22, r18
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	26 e0       	ldi	r18, 0x06	; 6
    2bee:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>
		// displaying tens place of minutes above

		itoa(SEC%10,SHOWSEC,10);
    2bf2:	80 91 3a 01 	lds	r24, 0x013A
    2bf6:	9a e0       	ldi	r25, 0x0A	; 10
    2bf8:	69 2f       	mov	r22, r25
    2bfa:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodqi4>
    2bfe:	89 2f       	mov	r24, r25
    2c00:	88 2f       	mov	r24, r24
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	9e 01       	movw	r18, r28
    2c06:	2f 5f       	subi	r18, 0xFF	; 255
    2c08:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0a:	b9 01       	movw	r22, r18
    2c0c:	4a e0       	ldi	r20, 0x0A	; 10
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	0e 94 80 21 	call	0x4300	; 0x4300 <itoa>

		Lcd_writeString(0,SHOWSEC,0,7);//send_a_string(SHOWMIN);
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	9e 01       	movw	r18, r28
    2c18:	2f 5f       	subi	r18, 0xFF	; 255
    2c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1c:	b9 01       	movw	r22, r18
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	27 e0       	ldi	r18, 0x07	; 7
    2c22:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>

		// displaying ones place of minutes above



		if (Dio_getPin(Pb6)==1)//if alarm pin is high
    2c26:	8e e0       	ldi	r24, 0x0E	; 14
    2c28:	0e 94 48 09 	call	0x1290	; 0x1290 <Dio_getPin>
    2c2c:	81 30       	cpi	r24, 0x01	; 1
    2c2e:	c1 f5       	brne	.+112    	; 0x2ca0 <main+0x212>

		{

			Lcd_writeString(0,"ALRM:ON",0,9);//send_a_string(" ALM:ON ");//show alarm is on
    2c30:	22 e6       	ldi	r18, 0x62	; 98
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	b9 01       	movw	r22, r18
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	29 e0       	ldi	r18, 0x09	; 9
    2c3c:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>

			if ((ALHOU==HOU)&(ALMIN==MIN)&(ALSEC==SEC))//alarm minute=min //and alarm hours= time hours and alarm seconds= time seconds
    2c40:	90 91 3f 01 	lds	r25, 0x013F
    2c44:	80 91 3c 01 	lds	r24, 0x013C
    2c48:	1a 8a       	std	Y+18, r1	; 0x12
    2c4a:	98 17       	cp	r25, r24
    2c4c:	11 f4       	brne	.+4      	; 0x2c52 <main+0x1c4>
    2c4e:	21 e0       	ldi	r18, 0x01	; 1
    2c50:	2a 8b       	std	Y+18, r18	; 0x12
    2c52:	90 91 3e 01 	lds	r25, 0x013E
    2c56:	80 91 3b 01 	lds	r24, 0x013B
    2c5a:	19 8a       	std	Y+17, r1	; 0x11
    2c5c:	98 17       	cp	r25, r24
    2c5e:	11 f4       	brne	.+4      	; 0x2c64 <main+0x1d6>
    2c60:	31 e0       	ldi	r19, 0x01	; 1
    2c62:	39 8b       	std	Y+17, r19	; 0x11
    2c64:	8a 89       	ldd	r24, Y+18	; 0x12
    2c66:	99 89       	ldd	r25, Y+17	; 0x11
    2c68:	89 23       	and	r24, r25
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	38 8b       	std	Y+16, r19	; 0x10
    2c70:	2f 87       	std	Y+15, r18	; 0x0f
    2c72:	90 91 3d 01 	lds	r25, 0x013D
    2c76:	80 91 3a 01 	lds	r24, 0x013A
    2c7a:	1e 86       	std	Y+14, r1	; 0x0e
    2c7c:	1d 86       	std	Y+13, r1	; 0x0d
    2c7e:	98 17       	cp	r25, r24
    2c80:	21 f4       	brne	.+8      	; 0x2c8a <main+0x1fc>
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9e 87       	std	Y+14, r25	; 0x0e
    2c88:	8d 87       	std	Y+13, r24	; 0x0d
    2c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c8c:	98 89       	ldd	r25, Y+16	; 0x10
    2c8e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c90:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c92:	82 23       	and	r24, r18
    2c94:	93 23       	and	r25, r19
    2c96:	00 97       	sbiw	r24, 0x00	; 0
    2c98:	19 f0       	breq	.+6      	; 0x2ca0 <main+0x212>

			{

				Dio_setPin(Pa3); //buzzer on
    2c9a:	83 e0       	ldi	r24, 0x03	; 3
    2c9c:	0e 94 37 08 	call	0x106e	; 0x106e <Dio_setPin>

			}

		}

		if (Dio_getPin(Pb6)==0)//if alarm pin is low
    2ca0:	8e e0       	ldi	r24, 0x0E	; 14
    2ca2:	0e 94 48 09 	call	0x1290	; 0x1290 <Dio_getPin>
    2ca6:	88 23       	and	r24, r24
    2ca8:	59 f4       	brne	.+22     	; 0x2cc0 <main+0x232>

		{

			Lcd_writeString(0,"ALM:OFF",0,9);//send_a_string(" ALM:OFF");//show alarm is off
    2caa:	2a e6       	ldi	r18, 0x6A	; 106
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	b9 01       	movw	r22, r18
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	29 e0       	ldi	r18, 0x09	; 9
    2cb6:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>

			Dio_clrPin(Pa3);//buzzer off
    2cba:	83 e0       	ldi	r24, 0x03	; 3
    2cbc:	0e 94 bd 08 	call	0x117a	; 0x117a <Dio_clrPin>

		}


		Lcd_writeString (0,"ALARM",1,0);//show string of characters
    2cc0:	22 e7       	ldi	r18, 0x72	; 114
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	b9 01       	movw	r22, r18
    2cc8:	41 e0       	ldi	r20, 0x01	; 1
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>


		itoa(ALHOU/10,SHOWALHOU,10);
    2cd0:	80 91 3f 01 	lds	r24, 0x013F
    2cd4:	9a e0       	ldi	r25, 0x0A	; 10
    2cd6:	69 2f       	mov	r22, r25
    2cd8:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodqi4>
    2cdc:	88 2f       	mov	r24, r24
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9e 01       	movw	r18, r28
    2ce2:	25 5f       	subi	r18, 0xF5	; 245
    2ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce6:	b9 01       	movw	r22, r18
    2ce8:	4a e0       	ldi	r20, 0x0A	; 10
    2cea:	50 e0       	ldi	r21, 0x00	; 0
    2cec:	0e 94 80 21 	call	0x4300	; 0x4300 <itoa>

		Lcd_writeString(0,SHOWALHOU,1,7);
    2cf0:	9e 01       	movw	r18, r28
    2cf2:	25 5f       	subi	r18, 0xF5	; 245
    2cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	b9 01       	movw	r22, r18
    2cfa:	41 e0       	ldi	r20, 0x01	; 1
    2cfc:	27 e0       	ldi	r18, 0x07	; 7
    2cfe:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>

		itoa(ALHOU%10,SHOWALHOU,10);
    2d02:	80 91 3f 01 	lds	r24, 0x013F
    2d06:	9a e0       	ldi	r25, 0x0A	; 10
    2d08:	69 2f       	mov	r22, r25
    2d0a:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodqi4>
    2d0e:	89 2f       	mov	r24, r25
    2d10:	88 2f       	mov	r24, r24
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	9e 01       	movw	r18, r28
    2d16:	25 5f       	subi	r18, 0xF5	; 245
    2d18:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1a:	b9 01       	movw	r22, r18
    2d1c:	4a e0       	ldi	r20, 0x0A	; 10
    2d1e:	50 e0       	ldi	r21, 0x00	; 0
    2d20:	0e 94 80 21 	call	0x4300	; 0x4300 <itoa>

		Lcd_writeString(0,SHOWALHOU,1,8);
    2d24:	9e 01       	movw	r18, r28
    2d26:	25 5f       	subi	r18, 0xF5	; 245
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	b9 01       	movw	r22, r18
    2d2e:	41 e0       	ldi	r20, 0x01	; 1
    2d30:	28 e0       	ldi	r18, 0x08	; 8
    2d32:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>


		Lcd_writeString (0,":",1,9);
    2d36:	20 e6       	ldi	r18, 0x60	; 96
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	b9 01       	movw	r22, r18
    2d3e:	41 e0       	ldi	r20, 0x01	; 1
    2d40:	29 e0       	ldi	r18, 0x09	; 9
    2d42:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>


		// Showing alarm hours above

		itoa(ALMIN/10,SHOWALMIN,10);
    2d46:	80 91 3e 01 	lds	r24, 0x013E
    2d4a:	9a e0       	ldi	r25, 0x0A	; 10
    2d4c:	69 2f       	mov	r22, r25
    2d4e:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodqi4>
    2d52:	88 2f       	mov	r24, r24
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	9e 01       	movw	r18, r28
    2d58:	27 5f       	subi	r18, 0xF7	; 247
    2d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5c:	b9 01       	movw	r22, r18
    2d5e:	4a e0       	ldi	r20, 0x0A	; 10
    2d60:	50 e0       	ldi	r21, 0x00	; 0
    2d62:	0e 94 80 21 	call	0x4300	; 0x4300 <itoa>

		Lcd_writeString(0,SHOWALMIN,1,10);
    2d66:	9e 01       	movw	r18, r28
    2d68:	27 5f       	subi	r18, 0xF7	; 247
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	b9 01       	movw	r22, r18
    2d70:	41 e0       	ldi	r20, 0x01	; 1
    2d72:	2a e0       	ldi	r18, 0x0A	; 10
    2d74:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>

		itoa(ALMIN%10,SHOWALMIN,10);
    2d78:	80 91 3e 01 	lds	r24, 0x013E
    2d7c:	9a e0       	ldi	r25, 0x0A	; 10
    2d7e:	69 2f       	mov	r22, r25
    2d80:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodqi4>
    2d84:	89 2f       	mov	r24, r25
    2d86:	88 2f       	mov	r24, r24
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	9e 01       	movw	r18, r28
    2d8c:	27 5f       	subi	r18, 0xF7	; 247
    2d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d90:	b9 01       	movw	r22, r18
    2d92:	4a e0       	ldi	r20, 0x0A	; 10
    2d94:	50 e0       	ldi	r21, 0x00	; 0
    2d96:	0e 94 80 21 	call	0x4300	; 0x4300 <itoa>

		Lcd_writeString(0,SHOWALMIN,1,11);
    2d9a:	9e 01       	movw	r18, r28
    2d9c:	27 5f       	subi	r18, 0xF7	; 247
    2d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	b9 01       	movw	r22, r18
    2da4:	41 e0       	ldi	r20, 0x01	; 1
    2da6:	2b e0       	ldi	r18, 0x0B	; 11
    2da8:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>


		Lcd_writeString (0,":",1,12);
    2dac:	20 e6       	ldi	r18, 0x60	; 96
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	b9 01       	movw	r22, r18
    2db4:	41 e0       	ldi	r20, 0x01	; 1
    2db6:	2c e0       	ldi	r18, 0x0C	; 12
    2db8:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>


		// Showing alarm minutes above

		itoa(ALSEC/10,SHOWALSEC,10);
    2dbc:	80 91 3d 01 	lds	r24, 0x013D
    2dc0:	9a e0       	ldi	r25, 0x0A	; 10
    2dc2:	69 2f       	mov	r22, r25
    2dc4:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodqi4>
    2dc8:	88 2f       	mov	r24, r24
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	9e 01       	movw	r18, r28
    2dce:	29 5f       	subi	r18, 0xF9	; 249
    2dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd2:	b9 01       	movw	r22, r18
    2dd4:	4a e0       	ldi	r20, 0x0A	; 10
    2dd6:	50 e0       	ldi	r21, 0x00	; 0
    2dd8:	0e 94 80 21 	call	0x4300	; 0x4300 <itoa>

		Lcd_writeString(0,SHOWALSEC,1,13);
    2ddc:	9e 01       	movw	r18, r28
    2dde:	29 5f       	subi	r18, 0xF9	; 249
    2de0:	3f 4f       	sbci	r19, 0xFF	; 255
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	b9 01       	movw	r22, r18
    2de6:	41 e0       	ldi	r20, 0x01	; 1
    2de8:	2d e0       	ldi	r18, 0x0D	; 13
    2dea:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>

		itoa(ALSEC%10,SHOWALSEC,10);
    2dee:	80 91 3d 01 	lds	r24, 0x013D
    2df2:	9a e0       	ldi	r25, 0x0A	; 10
    2df4:	69 2f       	mov	r22, r25
    2df6:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodqi4>
    2dfa:	89 2f       	mov	r24, r25
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9e 01       	movw	r18, r28
    2e02:	29 5f       	subi	r18, 0xF9	; 249
    2e04:	3f 4f       	sbci	r19, 0xFF	; 255
    2e06:	b9 01       	movw	r22, r18
    2e08:	4a e0       	ldi	r20, 0x0A	; 10
    2e0a:	50 e0       	ldi	r21, 0x00	; 0
    2e0c:	0e 94 80 21 	call	0x4300	; 0x4300 <itoa>

		Lcd_writeString(0,SHOWALSEC,1,14);
    2e10:	9e 01       	movw	r18, r28
    2e12:	29 5f       	subi	r18, 0xF9	; 249
    2e14:	3f 4f       	sbci	r19, 0xFF	; 255
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	b9 01       	movw	r22, r18
    2e1a:	41 e0       	ldi	r20, 0x01	; 1
    2e1c:	2e e0       	ldi	r18, 0x0E	; 14
    2e1e:	0e 94 a7 14 	call	0x294e	; 0x294e <Lcd_writeString>
    2e22:	58 ce       	rjmp	.-848    	; 0x2ad4 <main+0x46>

00002e24 <cloock>:
}*/




void cloock(void) {  //loop to be executed on counter compare match
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62


	check++;
    2e2c:	80 91 36 01 	lds	r24, 0x0136
    2e30:	90 91 37 01 	lds	r25, 0x0137
    2e34:	a0 91 38 01 	lds	r26, 0x0138
    2e38:	b0 91 39 01 	lds	r27, 0x0139
    2e3c:	01 96       	adiw	r24, 0x01	; 1
    2e3e:	a1 1d       	adc	r26, r1
    2e40:	b1 1d       	adc	r27, r1
    2e42:	80 93 36 01 	sts	0x0136, r24
    2e46:	90 93 37 01 	sts	0x0137, r25
    2e4a:	a0 93 38 01 	sts	0x0138, r26
    2e4e:	b0 93 39 01 	sts	0x0139, r27

	if(check==15625)
    2e52:	80 91 36 01 	lds	r24, 0x0136
    2e56:	90 91 37 01 	lds	r25, 0x0137
    2e5a:	a0 91 38 01 	lds	r26, 0x0138
    2e5e:	b0 91 39 01 	lds	r27, 0x0139
    2e62:	89 30       	cpi	r24, 0x09	; 9
    2e64:	2d e3       	ldi	r18, 0x3D	; 61
    2e66:	92 07       	cpc	r25, r18
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	a2 07       	cpc	r26, r18
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	b2 07       	cpc	r27, r18
    2e70:	49 f5       	brne	.+82     	; 0x2ec4 <cloock+0xa0>
	{
		check=0;
    2e72:	10 92 36 01 	sts	0x0136, r1
    2e76:	10 92 37 01 	sts	0x0137, r1
    2e7a:	10 92 38 01 	sts	0x0138, r1
    2e7e:	10 92 39 01 	sts	0x0139, r1
		SEC++;
    2e82:	80 91 3a 01 	lds	r24, 0x013A
    2e86:	8f 5f       	subi	r24, 0xFF	; 255
    2e88:	80 93 3a 01 	sts	0x013A, r24


		if(SEC>59)
    2e8c:	80 91 3a 01 	lds	r24, 0x013A
    2e90:	8c 33       	cpi	r24, 0x3C	; 60
    2e92:	c0 f0       	brcs	.+48     	; 0x2ec4 <cloock+0xa0>
		{
			SEC=0;
    2e94:	10 92 3a 01 	sts	0x013A, r1
			MIN++;
    2e98:	80 91 3b 01 	lds	r24, 0x013B
    2e9c:	8f 5f       	subi	r24, 0xFF	; 255
    2e9e:	80 93 3b 01 	sts	0x013B, r24


			if(MIN>59)
    2ea2:	80 91 3b 01 	lds	r24, 0x013B
    2ea6:	8c 33       	cpi	r24, 0x3C	; 60
    2ea8:	68 f0       	brcs	.+26     	; 0x2ec4 <cloock+0xa0>
			{
				MIN=0;
    2eaa:	10 92 3b 01 	sts	0x013B, r1
				HOU++;
    2eae:	80 91 3c 01 	lds	r24, 0x013C
    2eb2:	8f 5f       	subi	r24, 0xFF	; 255
    2eb4:	80 93 3c 01 	sts	0x013C, r24


				if (HOU==24)
    2eb8:	80 91 3c 01 	lds	r24, 0x013C
    2ebc:	88 31       	cpi	r24, 0x18	; 24
    2ebe:	11 f4       	brne	.+4      	; 0x2ec4 <cloock+0xa0>
				{
					HOU=0;
    2ec0:	10 92 3c 01 	sts	0x013C, r1
				}
			}
		}
	}
}
    2ec4:	cf 91       	pop	r28
    2ec6:	df 91       	pop	r29
    2ec8:	08 95       	ret

00002eca <uartrxx>:

void uartrxx(void){
    2eca:	0f 93       	push	r16
    2ecc:	1f 93       	push	r17
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	c8 5a       	subi	r28, 0xA8	; 168
    2ed8:	d0 40       	sbci	r29, 0x00	; 0
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
	Os_Isr_disableAllInterrupts();
    2ee4:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <Os_Isr_disableAllInterrupts>
	while (! (UCSRA & (1 << RXC)) ){};
    2ee8:	eb e2       	ldi	r30, 0x2B	; 43
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	88 23       	and	r24, r24
    2ef0:	dc f7       	brge	.-10     	; 0x2ee8 <uartrxx+0x1e>


	receiveData = UDR;
    2ef2:	ec e2       	ldi	r30, 0x2C	; 44
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	80 93 44 01 	sts	0x0144, r24


	if ((receiveData == 1))
    2efc:	80 91 44 01 	lds	r24, 0x0144
    2f00:	81 30       	cpi	r24, 0x01	; 1
    2f02:	09 f0       	breq	.+2      	; 0x2f06 <uartrxx+0x3c>
    2f04:	76 c1       	rjmp	.+748    	; 0x31f2 <uartrxx+0x328>

	{
		if(MIN==60){
    2f06:	80 91 3b 01 	lds	r24, 0x013B
    2f0a:	8c 33       	cpi	r24, 0x3C	; 60
    2f0c:	09 f0       	breq	.+2      	; 0x2f10 <uartrxx+0x46>
    2f0e:	b7 c0       	rjmp	.+366    	; 0x307e <uartrxx+0x1b4>
			MIN=0;
    2f10:	10 92 3b 01 	sts	0x013B, r1
    2f14:	fe 01       	movw	r30, r28
    2f16:	eb 55       	subi	r30, 0x5B	; 91
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	ac e5       	ldi	r26, 0x5C	; 92
    2f20:	b3 e4       	ldi	r27, 0x43	; 67
    2f22:	80 83       	st	Z, r24
    2f24:	91 83       	std	Z+1, r25	; 0x01
    2f26:	a2 83       	std	Z+2, r26	; 0x02
    2f28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2a:	8e 01       	movw	r16, r28
    2f2c:	0f 55       	subi	r16, 0x5F	; 95
    2f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f30:	fe 01       	movw	r30, r28
    2f32:	eb 55       	subi	r30, 0x5B	; 91
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	60 81       	ld	r22, Z
    2f38:	71 81       	ldd	r23, Z+1	; 0x01
    2f3a:	82 81       	ldd	r24, Z+2	; 0x02
    2f3c:	93 81       	ldd	r25, Z+3	; 0x03
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	4a e7       	ldi	r20, 0x7A	; 122
    2f44:	55 e4       	ldi	r21, 0x45	; 69
    2f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	f8 01       	movw	r30, r16
    2f50:	80 83       	st	Z, r24
    2f52:	91 83       	std	Z+1, r25	; 0x01
    2f54:	a2 83       	std	Z+2, r26	; 0x02
    2f56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f58:	fe 01       	movw	r30, r28
    2f5a:	ef 55       	subi	r30, 0x5F	; 95
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	60 81       	ld	r22, Z
    2f60:	71 81       	ldd	r23, Z+1	; 0x01
    2f62:	82 81       	ldd	r24, Z+2	; 0x02
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	44 f4       	brge	.+16     	; 0x2f86 <uartrxx+0xbc>
		__ticks = 1;
    2f76:	fe 01       	movw	r30, r28
    2f78:	e1 56       	subi	r30, 0x61	; 97
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	91 83       	std	Z+1, r25	; 0x01
    2f82:	80 83       	st	Z, r24
    2f84:	64 c0       	rjmp	.+200    	; 0x304e <uartrxx+0x184>
	else if (__tmp > 65535)
    2f86:	fe 01       	movw	r30, r28
    2f88:	ef 55       	subi	r30, 0x5F	; 95
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	60 81       	ld	r22, Z
    2f8e:	71 81       	ldd	r23, Z+1	; 0x01
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	93 81       	ldd	r25, Z+3	; 0x03
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	3f ef       	ldi	r19, 0xFF	; 255
    2f98:	4f e7       	ldi	r20, 0x7F	; 127
    2f9a:	57 e4       	ldi	r21, 0x47	; 71
    2f9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa0:	18 16       	cp	r1, r24
    2fa2:	0c f0       	brlt	.+2      	; 0x2fa6 <uartrxx+0xdc>
    2fa4:	43 c0       	rjmp	.+134    	; 0x302c <uartrxx+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	eb 55       	subi	r30, 0x5B	; 91
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	60 81       	ld	r22, Z
    2fae:	71 81       	ldd	r23, Z+1	; 0x01
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e2       	ldi	r20, 0x20	; 32
    2fba:	51 e4       	ldi	r21, 0x41	; 65
    2fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	8e 01       	movw	r16, r28
    2fc6:	01 56       	subi	r16, 0x61	; 97
    2fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	f8 01       	movw	r30, r16
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24
    2fdc:	1f c0       	rjmp	.+62     	; 0x301c <uartrxx+0x152>
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e3 56       	subi	r30, 0x63	; 99
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 e9       	ldi	r24, 0x90	; 144
    2fe6:	91 e0       	ldi	r25, 0x01	; 1
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fec:	fe 01       	movw	r30, r28
    2fee:	e3 56       	subi	r30, 0x63	; 99
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	80 81       	ld	r24, Z
    2ff4:	91 81       	ldd	r25, Z+1	; 0x01
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <uartrxx+0x12c>
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e3 56       	subi	r30, 0x63	; 99
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3004:	de 01       	movw	r26, r28
    3006:	a1 56       	subi	r26, 0x61	; 97
    3008:	bf 4f       	sbci	r27, 0xFF	; 255
    300a:	fe 01       	movw	r30, r28
    300c:	e1 56       	subi	r30, 0x61	; 97
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	80 81       	ld	r24, Z
    3012:	91 81       	ldd	r25, Z+1	; 0x01
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	11 96       	adiw	r26, 0x01	; 1
    3018:	9c 93       	st	X, r25
    301a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    301c:	fe 01       	movw	r30, r28
    301e:	e1 56       	subi	r30, 0x61	; 97
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	80 81       	ld	r24, Z
    3024:	91 81       	ldd	r25, Z+1	; 0x01
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	d1 f6       	brne	.-76     	; 0x2fde <uartrxx+0x114>
    302a:	2e c0       	rjmp	.+92     	; 0x3088 <uartrxx+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302c:	8e 01       	movw	r16, r28
    302e:	01 56       	subi	r16, 0x61	; 97
    3030:	1f 4f       	sbci	r17, 0xFF	; 255
    3032:	fe 01       	movw	r30, r28
    3034:	ef 55       	subi	r30, 0x5F	; 95
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	60 81       	ld	r22, Z
    303a:	71 81       	ldd	r23, Z+1	; 0x01
    303c:	82 81       	ldd	r24, Z+2	; 0x02
    303e:	93 81       	ldd	r25, Z+3	; 0x03
    3040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	f8 01       	movw	r30, r16
    304a:	91 83       	std	Z+1, r25	; 0x01
    304c:	80 83       	st	Z, r24
    304e:	de 01       	movw	r26, r28
    3050:	a5 56       	subi	r26, 0x65	; 101
    3052:	bf 4f       	sbci	r27, 0xFF	; 255
    3054:	fe 01       	movw	r30, r28
    3056:	e1 56       	subi	r30, 0x61	; 97
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	11 96       	adiw	r26, 0x01	; 1
    3060:	9c 93       	st	X, r25
    3062:	8e 93       	st	-X, r24
    3064:	fe 01       	movw	r30, r28
    3066:	e5 56       	subi	r30, 0x65	; 101
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	80 81       	ld	r24, Z
    306c:	91 81       	ldd	r25, Z+1	; 0x01
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	f1 f7       	brne	.-4      	; 0x306e <uartrxx+0x1a4>
    3072:	fe 01       	movw	r30, r28
    3074:	e5 56       	subi	r30, 0x65	; 101
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	80 83       	st	Z, r24
    307c:	05 c0       	rjmp	.+10     	; 0x3088 <uartrxx+0x1be>
			_delay_ms(220);

		}
		else{
			MIN++;
    307e:	80 91 3b 01 	lds	r24, 0x013B
    3082:	8f 5f       	subi	r24, 0xFF	; 255
    3084:	80 93 3b 01 	sts	0x013B, r24
    3088:	fe 01       	movw	r30, r28
    308a:	e9 56       	subi	r30, 0x69	; 105
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	ac e5       	ldi	r26, 0x5C	; 92
    3094:	b3 e4       	ldi	r27, 0x43	; 67
    3096:	80 83       	st	Z, r24
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	a2 83       	std	Z+2, r26	; 0x02
    309c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309e:	8e 01       	movw	r16, r28
    30a0:	0d 56       	subi	r16, 0x6D	; 109
    30a2:	1f 4f       	sbci	r17, 0xFF	; 255
    30a4:	fe 01       	movw	r30, r28
    30a6:	e9 56       	subi	r30, 0x69	; 105
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	60 81       	ld	r22, Z
    30ac:	71 81       	ldd	r23, Z+1	; 0x01
    30ae:	82 81       	ldd	r24, Z+2	; 0x02
    30b0:	93 81       	ldd	r25, Z+3	; 0x03
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	4a e7       	ldi	r20, 0x7A	; 122
    30b8:	55 e4       	ldi	r21, 0x45	; 69
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	f8 01       	movw	r30, r16
    30c4:	80 83       	st	Z, r24
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	a2 83       	std	Z+2, r26	; 0x02
    30ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30cc:	fe 01       	movw	r30, r28
    30ce:	ed 56       	subi	r30, 0x6D	; 109
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	60 81       	ld	r22, Z
    30d4:	71 81       	ldd	r23, Z+1	; 0x01
    30d6:	82 81       	ldd	r24, Z+2	; 0x02
    30d8:	93 81       	ldd	r25, Z+3	; 0x03
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e8       	ldi	r20, 0x80	; 128
    30e0:	5f e3       	ldi	r21, 0x3F	; 63
    30e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e6:	88 23       	and	r24, r24
    30e8:	44 f4       	brge	.+16     	; 0x30fa <uartrxx+0x230>
		__ticks = 1;
    30ea:	fe 01       	movw	r30, r28
    30ec:	ef 56       	subi	r30, 0x6F	; 111
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	91 83       	std	Z+1, r25	; 0x01
    30f6:	80 83       	st	Z, r24
    30f8:	64 c0       	rjmp	.+200    	; 0x31c2 <uartrxx+0x2f8>
	else if (__tmp > 65535)
    30fa:	fe 01       	movw	r30, r28
    30fc:	ed 56       	subi	r30, 0x6D	; 109
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	60 81       	ld	r22, Z
    3102:	71 81       	ldd	r23, Z+1	; 0x01
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	93 81       	ldd	r25, Z+3	; 0x03
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	3f ef       	ldi	r19, 0xFF	; 255
    310c:	4f e7       	ldi	r20, 0x7F	; 127
    310e:	57 e4       	ldi	r21, 0x47	; 71
    3110:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3114:	18 16       	cp	r1, r24
    3116:	0c f0       	brlt	.+2      	; 0x311a <uartrxx+0x250>
    3118:	43 c0       	rjmp	.+134    	; 0x31a0 <uartrxx+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311a:	fe 01       	movw	r30, r28
    311c:	e9 56       	subi	r30, 0x69	; 105
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	60 81       	ld	r22, Z
    3122:	71 81       	ldd	r23, Z+1	; 0x01
    3124:	82 81       	ldd	r24, Z+2	; 0x02
    3126:	93 81       	ldd	r25, Z+3	; 0x03
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	40 e2       	ldi	r20, 0x20	; 32
    312e:	51 e4       	ldi	r21, 0x41	; 65
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	8e 01       	movw	r16, r28
    313a:	0f 56       	subi	r16, 0x6F	; 111
    313c:	1f 4f       	sbci	r17, 0xFF	; 255
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	f8 01       	movw	r30, r16
    314c:	91 83       	std	Z+1, r25	; 0x01
    314e:	80 83       	st	Z, r24
    3150:	1f c0       	rjmp	.+62     	; 0x3190 <uartrxx+0x2c6>
    3152:	fe 01       	movw	r30, r28
    3154:	e1 57       	subi	r30, 0x71	; 113
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	80 e9       	ldi	r24, 0x90	; 144
    315a:	91 e0       	ldi	r25, 0x01	; 1
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	80 83       	st	Z, r24
    3160:	fe 01       	movw	r30, r28
    3162:	e1 57       	subi	r30, 0x71	; 113
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	80 81       	ld	r24, Z
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	f1 f7       	brne	.-4      	; 0x316a <uartrxx+0x2a0>
    316e:	fe 01       	movw	r30, r28
    3170:	e1 57       	subi	r30, 0x71	; 113
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	91 83       	std	Z+1, r25	; 0x01
    3176:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3178:	de 01       	movw	r26, r28
    317a:	af 56       	subi	r26, 0x6F	; 111
    317c:	bf 4f       	sbci	r27, 0xFF	; 255
    317e:	fe 01       	movw	r30, r28
    3180:	ef 56       	subi	r30, 0x6F	; 111
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	80 81       	ld	r24, Z
    3186:	91 81       	ldd	r25, Z+1	; 0x01
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	11 96       	adiw	r26, 0x01	; 1
    318c:	9c 93       	st	X, r25
    318e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3190:	fe 01       	movw	r30, r28
    3192:	ef 56       	subi	r30, 0x6F	; 111
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	80 81       	ld	r24, Z
    3198:	91 81       	ldd	r25, Z+1	; 0x01
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	d1 f6       	brne	.-76     	; 0x3152 <uartrxx+0x288>
    319e:	72 c6       	rjmp	.+3300   	; 0x3e84 <uartrxx+0xfba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a0:	8e 01       	movw	r16, r28
    31a2:	0f 56       	subi	r16, 0x6F	; 111
    31a4:	1f 4f       	sbci	r17, 0xFF	; 255
    31a6:	fe 01       	movw	r30, r28
    31a8:	ed 56       	subi	r30, 0x6D	; 109
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	f8 01       	movw	r30, r16
    31be:	91 83       	std	Z+1, r25	; 0x01
    31c0:	80 83       	st	Z, r24
    31c2:	de 01       	movw	r26, r28
    31c4:	a3 57       	subi	r26, 0x73	; 115
    31c6:	bf 4f       	sbci	r27, 0xFF	; 255
    31c8:	fe 01       	movw	r30, r28
    31ca:	ef 56       	subi	r30, 0x6F	; 111
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	80 81       	ld	r24, Z
    31d0:	91 81       	ldd	r25, Z+1	; 0x01
    31d2:	11 96       	adiw	r26, 0x01	; 1
    31d4:	9c 93       	st	X, r25
    31d6:	8e 93       	st	-X, r24
    31d8:	fe 01       	movw	r30, r28
    31da:	e3 57       	subi	r30, 0x73	; 115
    31dc:	ff 4f       	sbci	r31, 0xFF	; 255
    31de:	80 81       	ld	r24, Z
    31e0:	91 81       	ldd	r25, Z+1	; 0x01
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <uartrxx+0x318>
    31e6:	fe 01       	movw	r30, r28
    31e8:	e3 57       	subi	r30, 0x73	; 115
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	91 83       	std	Z+1, r25	; 0x01
    31ee:	80 83       	st	Z, r24
    31f0:	49 c6       	rjmp	.+3218   	; 0x3e84 <uartrxx+0xfba>


		_delay_ms(220);
	}

	else if ((receiveData == 10)&&(MIN>0))
    31f2:	80 91 44 01 	lds	r24, 0x0144
    31f6:	8a 30       	cpi	r24, 0x0A	; 10
    31f8:	09 f0       	breq	.+2      	; 0x31fc <uartrxx+0x332>
    31fa:	bf c0       	rjmp	.+382    	; 0x337a <uartrxx+0x4b0>
    31fc:	80 91 3b 01 	lds	r24, 0x013B
    3200:	88 23       	and	r24, r24
    3202:	09 f4       	brne	.+2      	; 0x3206 <uartrxx+0x33c>
    3204:	ba c0       	rjmp	.+372    	; 0x337a <uartrxx+0x4b0>

	{
		MIN--;
    3206:	80 91 3b 01 	lds	r24, 0x013B
    320a:	81 50       	subi	r24, 0x01	; 1
    320c:	80 93 3b 01 	sts	0x013B, r24
    3210:	fe 01       	movw	r30, r28
    3212:	e7 57       	subi	r30, 0x77	; 119
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	ac e5       	ldi	r26, 0x5C	; 92
    321c:	b3 e4       	ldi	r27, 0x43	; 67
    321e:	80 83       	st	Z, r24
    3220:	91 83       	std	Z+1, r25	; 0x01
    3222:	a2 83       	std	Z+2, r26	; 0x02
    3224:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3226:	8e 01       	movw	r16, r28
    3228:	0b 57       	subi	r16, 0x7B	; 123
    322a:	1f 4f       	sbci	r17, 0xFF	; 255
    322c:	fe 01       	movw	r30, r28
    322e:	e7 57       	subi	r30, 0x77	; 119
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	60 81       	ld	r22, Z
    3234:	71 81       	ldd	r23, Z+1	; 0x01
    3236:	82 81       	ldd	r24, Z+2	; 0x02
    3238:	93 81       	ldd	r25, Z+3	; 0x03
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	4a e7       	ldi	r20, 0x7A	; 122
    3240:	55 e4       	ldi	r21, 0x45	; 69
    3242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	f8 01       	movw	r30, r16
    324c:	80 83       	st	Z, r24
    324e:	91 83       	std	Z+1, r25	; 0x01
    3250:	a2 83       	std	Z+2, r26	; 0x02
    3252:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3254:	fe 01       	movw	r30, r28
    3256:	eb 57       	subi	r30, 0x7B	; 123
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	60 81       	ld	r22, Z
    325c:	71 81       	ldd	r23, Z+1	; 0x01
    325e:	82 81       	ldd	r24, Z+2	; 0x02
    3260:	93 81       	ldd	r25, Z+3	; 0x03
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e8       	ldi	r20, 0x80	; 128
    3268:	5f e3       	ldi	r21, 0x3F	; 63
    326a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    326e:	88 23       	and	r24, r24
    3270:	44 f4       	brge	.+16     	; 0x3282 <uartrxx+0x3b8>
		__ticks = 1;
    3272:	fe 01       	movw	r30, r28
    3274:	ed 57       	subi	r30, 0x7D	; 125
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	91 83       	std	Z+1, r25	; 0x01
    327e:	80 83       	st	Z, r24
    3280:	64 c0       	rjmp	.+200    	; 0x334a <uartrxx+0x480>
	else if (__tmp > 65535)
    3282:	fe 01       	movw	r30, r28
    3284:	eb 57       	subi	r30, 0x7B	; 123
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	60 81       	ld	r22, Z
    328a:	71 81       	ldd	r23, Z+1	; 0x01
    328c:	82 81       	ldd	r24, Z+2	; 0x02
    328e:	93 81       	ldd	r25, Z+3	; 0x03
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	3f ef       	ldi	r19, 0xFF	; 255
    3294:	4f e7       	ldi	r20, 0x7F	; 127
    3296:	57 e4       	ldi	r21, 0x47	; 71
    3298:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    329c:	18 16       	cp	r1, r24
    329e:	0c f0       	brlt	.+2      	; 0x32a2 <uartrxx+0x3d8>
    32a0:	43 c0       	rjmp	.+134    	; 0x3328 <uartrxx+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a2:	fe 01       	movw	r30, r28
    32a4:	e7 57       	subi	r30, 0x77	; 119
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	60 81       	ld	r22, Z
    32aa:	71 81       	ldd	r23, Z+1	; 0x01
    32ac:	82 81       	ldd	r24, Z+2	; 0x02
    32ae:	93 81       	ldd	r25, Z+3	; 0x03
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e2       	ldi	r20, 0x20	; 32
    32b6:	51 e4       	ldi	r21, 0x41	; 65
    32b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	8e 01       	movw	r16, r28
    32c2:	0d 57       	subi	r16, 0x7D	; 125
    32c4:	1f 4f       	sbci	r17, 0xFF	; 255
    32c6:	bc 01       	movw	r22, r24
    32c8:	cd 01       	movw	r24, r26
    32ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	f8 01       	movw	r30, r16
    32d4:	91 83       	std	Z+1, r25	; 0x01
    32d6:	80 83       	st	Z, r24
    32d8:	1f c0       	rjmp	.+62     	; 0x3318 <uartrxx+0x44e>
    32da:	fe 01       	movw	r30, r28
    32dc:	ef 57       	subi	r30, 0x7F	; 127
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	80 e9       	ldi	r24, 0x90	; 144
    32e2:	91 e0       	ldi	r25, 0x01	; 1
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	80 83       	st	Z, r24
    32e8:	fe 01       	movw	r30, r28
    32ea:	ef 57       	subi	r30, 0x7F	; 127
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	80 81       	ld	r24, Z
    32f0:	91 81       	ldd	r25, Z+1	; 0x01
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <uartrxx+0x428>
    32f6:	fe 01       	movw	r30, r28
    32f8:	ef 57       	subi	r30, 0x7F	; 127
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	91 83       	std	Z+1, r25	; 0x01
    32fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3300:	de 01       	movw	r26, r28
    3302:	ad 57       	subi	r26, 0x7D	; 125
    3304:	bf 4f       	sbci	r27, 0xFF	; 255
    3306:	fe 01       	movw	r30, r28
    3308:	ed 57       	subi	r30, 0x7D	; 125
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	80 81       	ld	r24, Z
    330e:	91 81       	ldd	r25, Z+1	; 0x01
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	11 96       	adiw	r26, 0x01	; 1
    3314:	9c 93       	st	X, r25
    3316:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3318:	fe 01       	movw	r30, r28
    331a:	ed 57       	subi	r30, 0x7D	; 125
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	80 81       	ld	r24, Z
    3320:	91 81       	ldd	r25, Z+1	; 0x01
    3322:	00 97       	sbiw	r24, 0x00	; 0
    3324:	d1 f6       	brne	.-76     	; 0x32da <uartrxx+0x410>
    3326:	ae c5       	rjmp	.+2908   	; 0x3e84 <uartrxx+0xfba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3328:	8e 01       	movw	r16, r28
    332a:	0d 57       	subi	r16, 0x7D	; 125
    332c:	1f 4f       	sbci	r17, 0xFF	; 255
    332e:	fe 01       	movw	r30, r28
    3330:	eb 57       	subi	r30, 0x7B	; 123
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	60 81       	ld	r22, Z
    3336:	71 81       	ldd	r23, Z+1	; 0x01
    3338:	82 81       	ldd	r24, Z+2	; 0x02
    333a:	93 81       	ldd	r25, Z+3	; 0x03
    333c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	f8 01       	movw	r30, r16
    3346:	91 83       	std	Z+1, r25	; 0x01
    3348:	80 83       	st	Z, r24
    334a:	de 01       	movw	r26, r28
    334c:	a1 58       	subi	r26, 0x81	; 129
    334e:	bf 4f       	sbci	r27, 0xFF	; 255
    3350:	fe 01       	movw	r30, r28
    3352:	ed 57       	subi	r30, 0x7D	; 125
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 81       	ld	r24, Z
    3358:	91 81       	ldd	r25, Z+1	; 0x01
    335a:	11 96       	adiw	r26, 0x01	; 1
    335c:	9c 93       	st	X, r25
    335e:	8e 93       	st	-X, r24
    3360:	fe 01       	movw	r30, r28
    3362:	e1 58       	subi	r30, 0x81	; 129
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 81       	ld	r24, Z
    3368:	91 81       	ldd	r25, Z+1	; 0x01
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	f1 f7       	brne	.-4      	; 0x336a <uartrxx+0x4a0>
    336e:	fe 01       	movw	r30, r28
    3370:	e1 58       	subi	r30, 0x81	; 129
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	91 83       	std	Z+1, r25	; 0x01
    3376:	80 83       	st	Z, r24
    3378:	85 c5       	rjmp	.+2826   	; 0x3e84 <uartrxx+0xfba>

		_delay_ms(220);
	}

	else if ((receiveData == 3))
    337a:	80 91 44 01 	lds	r24, 0x0144
    337e:	83 30       	cpi	r24, 0x03	; 3
    3380:	09 f0       	breq	.+2      	; 0x3384 <uartrxx+0x4ba>
    3382:	76 c1       	rjmp	.+748    	; 0x3670 <uartrxx+0x7a6>

	{
		if(HOU==24){
    3384:	80 91 3c 01 	lds	r24, 0x013C
    3388:	88 31       	cpi	r24, 0x18	; 24
    338a:	09 f0       	breq	.+2      	; 0x338e <uartrxx+0x4c4>
    338c:	b7 c0       	rjmp	.+366    	; 0x34fc <uartrxx+0x632>
			HOU=0;
    338e:	10 92 3c 01 	sts	0x013C, r1
    3392:	fe 01       	movw	r30, r28
    3394:	e5 58       	subi	r30, 0x85	; 133
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	ac e5       	ldi	r26, 0x5C	; 92
    339e:	b3 e4       	ldi	r27, 0x43	; 67
    33a0:	80 83       	st	Z, r24
    33a2:	91 83       	std	Z+1, r25	; 0x01
    33a4:	a2 83       	std	Z+2, r26	; 0x02
    33a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a8:	8e 01       	movw	r16, r28
    33aa:	09 58       	subi	r16, 0x89	; 137
    33ac:	1f 4f       	sbci	r17, 0xFF	; 255
    33ae:	fe 01       	movw	r30, r28
    33b0:	e5 58       	subi	r30, 0x85	; 133
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	60 81       	ld	r22, Z
    33b6:	71 81       	ldd	r23, Z+1	; 0x01
    33b8:	82 81       	ldd	r24, Z+2	; 0x02
    33ba:	93 81       	ldd	r25, Z+3	; 0x03
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	4a e7       	ldi	r20, 0x7A	; 122
    33c2:	55 e4       	ldi	r21, 0x45	; 69
    33c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	f8 01       	movw	r30, r16
    33ce:	80 83       	st	Z, r24
    33d0:	91 83       	std	Z+1, r25	; 0x01
    33d2:	a2 83       	std	Z+2, r26	; 0x02
    33d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33d6:	fe 01       	movw	r30, r28
    33d8:	e9 58       	subi	r30, 0x89	; 137
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	60 81       	ld	r22, Z
    33de:	71 81       	ldd	r23, Z+1	; 0x01
    33e0:	82 81       	ldd	r24, Z+2	; 0x02
    33e2:	93 81       	ldd	r25, Z+3	; 0x03
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e8       	ldi	r20, 0x80	; 128
    33ea:	5f e3       	ldi	r21, 0x3F	; 63
    33ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33f0:	88 23       	and	r24, r24
    33f2:	44 f4       	brge	.+16     	; 0x3404 <uartrxx+0x53a>
		__ticks = 1;
    33f4:	fe 01       	movw	r30, r28
    33f6:	eb 58       	subi	r30, 0x8B	; 139
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	80 83       	st	Z, r24
    3402:	64 c0       	rjmp	.+200    	; 0x34cc <uartrxx+0x602>
	else if (__tmp > 65535)
    3404:	fe 01       	movw	r30, r28
    3406:	e9 58       	subi	r30, 0x89	; 137
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	60 81       	ld	r22, Z
    340c:	71 81       	ldd	r23, Z+1	; 0x01
    340e:	82 81       	ldd	r24, Z+2	; 0x02
    3410:	93 81       	ldd	r25, Z+3	; 0x03
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	3f ef       	ldi	r19, 0xFF	; 255
    3416:	4f e7       	ldi	r20, 0x7F	; 127
    3418:	57 e4       	ldi	r21, 0x47	; 71
    341a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    341e:	18 16       	cp	r1, r24
    3420:	0c f0       	brlt	.+2      	; 0x3424 <uartrxx+0x55a>
    3422:	43 c0       	rjmp	.+134    	; 0x34aa <uartrxx+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3424:	fe 01       	movw	r30, r28
    3426:	e5 58       	subi	r30, 0x85	; 133
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	60 81       	ld	r22, Z
    342c:	71 81       	ldd	r23, Z+1	; 0x01
    342e:	82 81       	ldd	r24, Z+2	; 0x02
    3430:	93 81       	ldd	r25, Z+3	; 0x03
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e2       	ldi	r20, 0x20	; 32
    3438:	51 e4       	ldi	r21, 0x41	; 65
    343a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	8e 01       	movw	r16, r28
    3444:	0b 58       	subi	r16, 0x8B	; 139
    3446:	1f 4f       	sbci	r17, 0xFF	; 255
    3448:	bc 01       	movw	r22, r24
    344a:	cd 01       	movw	r24, r26
    344c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	f8 01       	movw	r30, r16
    3456:	91 83       	std	Z+1, r25	; 0x01
    3458:	80 83       	st	Z, r24
    345a:	1f c0       	rjmp	.+62     	; 0x349a <uartrxx+0x5d0>
    345c:	fe 01       	movw	r30, r28
    345e:	ed 58       	subi	r30, 0x8D	; 141
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	80 e9       	ldi	r24, 0x90	; 144
    3464:	91 e0       	ldi	r25, 0x01	; 1
    3466:	91 83       	std	Z+1, r25	; 0x01
    3468:	80 83       	st	Z, r24
    346a:	fe 01       	movw	r30, r28
    346c:	ed 58       	subi	r30, 0x8D	; 141
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	80 81       	ld	r24, Z
    3472:	91 81       	ldd	r25, Z+1	; 0x01
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	f1 f7       	brne	.-4      	; 0x3474 <uartrxx+0x5aa>
    3478:	fe 01       	movw	r30, r28
    347a:	ed 58       	subi	r30, 0x8D	; 141
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	91 83       	std	Z+1, r25	; 0x01
    3480:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3482:	de 01       	movw	r26, r28
    3484:	ab 58       	subi	r26, 0x8B	; 139
    3486:	bf 4f       	sbci	r27, 0xFF	; 255
    3488:	fe 01       	movw	r30, r28
    348a:	eb 58       	subi	r30, 0x8B	; 139
    348c:	ff 4f       	sbci	r31, 0xFF	; 255
    348e:	80 81       	ld	r24, Z
    3490:	91 81       	ldd	r25, Z+1	; 0x01
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	11 96       	adiw	r26, 0x01	; 1
    3496:	9c 93       	st	X, r25
    3498:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    349a:	fe 01       	movw	r30, r28
    349c:	eb 58       	subi	r30, 0x8B	; 139
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	80 81       	ld	r24, Z
    34a2:	91 81       	ldd	r25, Z+1	; 0x01
    34a4:	00 97       	sbiw	r24, 0x00	; 0
    34a6:	d1 f6       	brne	.-76     	; 0x345c <uartrxx+0x592>
    34a8:	2e c0       	rjmp	.+92     	; 0x3506 <uartrxx+0x63c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34aa:	8e 01       	movw	r16, r28
    34ac:	0b 58       	subi	r16, 0x8B	; 139
    34ae:	1f 4f       	sbci	r17, 0xFF	; 255
    34b0:	fe 01       	movw	r30, r28
    34b2:	e9 58       	subi	r30, 0x89	; 137
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	60 81       	ld	r22, Z
    34b8:	71 81       	ldd	r23, Z+1	; 0x01
    34ba:	82 81       	ldd	r24, Z+2	; 0x02
    34bc:	93 81       	ldd	r25, Z+3	; 0x03
    34be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	f8 01       	movw	r30, r16
    34c8:	91 83       	std	Z+1, r25	; 0x01
    34ca:	80 83       	st	Z, r24
    34cc:	de 01       	movw	r26, r28
    34ce:	af 58       	subi	r26, 0x8F	; 143
    34d0:	bf 4f       	sbci	r27, 0xFF	; 255
    34d2:	fe 01       	movw	r30, r28
    34d4:	eb 58       	subi	r30, 0x8B	; 139
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	80 81       	ld	r24, Z
    34da:	91 81       	ldd	r25, Z+1	; 0x01
    34dc:	11 96       	adiw	r26, 0x01	; 1
    34de:	9c 93       	st	X, r25
    34e0:	8e 93       	st	-X, r24
    34e2:	fe 01       	movw	r30, r28
    34e4:	ef 58       	subi	r30, 0x8F	; 143
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	80 81       	ld	r24, Z
    34ea:	91 81       	ldd	r25, Z+1	; 0x01
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <uartrxx+0x622>
    34f0:	fe 01       	movw	r30, r28
    34f2:	ef 58       	subi	r30, 0x8F	; 143
    34f4:	ff 4f       	sbci	r31, 0xFF	; 255
    34f6:	91 83       	std	Z+1, r25	; 0x01
    34f8:	80 83       	st	Z, r24
    34fa:	05 c0       	rjmp	.+10     	; 0x3506 <uartrxx+0x63c>
			_delay_ms(220);

		}
		else{
			HOU++;
    34fc:	80 91 3c 01 	lds	r24, 0x013C
    3500:	8f 5f       	subi	r24, 0xFF	; 255
    3502:	80 93 3c 01 	sts	0x013C, r24
    3506:	fe 01       	movw	r30, r28
    3508:	e3 59       	subi	r30, 0x93	; 147
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	ac e5       	ldi	r26, 0x5C	; 92
    3512:	b3 e4       	ldi	r27, 0x43	; 67
    3514:	80 83       	st	Z, r24
    3516:	91 83       	std	Z+1, r25	; 0x01
    3518:	a2 83       	std	Z+2, r26	; 0x02
    351a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    351c:	8e 01       	movw	r16, r28
    351e:	07 59       	subi	r16, 0x97	; 151
    3520:	1f 4f       	sbci	r17, 0xFF	; 255
    3522:	fe 01       	movw	r30, r28
    3524:	e3 59       	subi	r30, 0x93	; 147
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	60 81       	ld	r22, Z
    352a:	71 81       	ldd	r23, Z+1	; 0x01
    352c:	82 81       	ldd	r24, Z+2	; 0x02
    352e:	93 81       	ldd	r25, Z+3	; 0x03
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	4a e7       	ldi	r20, 0x7A	; 122
    3536:	55 e4       	ldi	r21, 0x45	; 69
    3538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	f8 01       	movw	r30, r16
    3542:	80 83       	st	Z, r24
    3544:	91 83       	std	Z+1, r25	; 0x01
    3546:	a2 83       	std	Z+2, r26	; 0x02
    3548:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    354a:	fe 01       	movw	r30, r28
    354c:	e7 59       	subi	r30, 0x97	; 151
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	60 81       	ld	r22, Z
    3552:	71 81       	ldd	r23, Z+1	; 0x01
    3554:	82 81       	ldd	r24, Z+2	; 0x02
    3556:	93 81       	ldd	r25, Z+3	; 0x03
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	40 e8       	ldi	r20, 0x80	; 128
    355e:	5f e3       	ldi	r21, 0x3F	; 63
    3560:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3564:	88 23       	and	r24, r24
    3566:	44 f4       	brge	.+16     	; 0x3578 <uartrxx+0x6ae>
		__ticks = 1;
    3568:	fe 01       	movw	r30, r28
    356a:	e9 59       	subi	r30, 0x99	; 153
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	91 83       	std	Z+1, r25	; 0x01
    3574:	80 83       	st	Z, r24
    3576:	64 c0       	rjmp	.+200    	; 0x3640 <uartrxx+0x776>
	else if (__tmp > 65535)
    3578:	fe 01       	movw	r30, r28
    357a:	e7 59       	subi	r30, 0x97	; 151
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	60 81       	ld	r22, Z
    3580:	71 81       	ldd	r23, Z+1	; 0x01
    3582:	82 81       	ldd	r24, Z+2	; 0x02
    3584:	93 81       	ldd	r25, Z+3	; 0x03
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	3f ef       	ldi	r19, 0xFF	; 255
    358a:	4f e7       	ldi	r20, 0x7F	; 127
    358c:	57 e4       	ldi	r21, 0x47	; 71
    358e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3592:	18 16       	cp	r1, r24
    3594:	0c f0       	brlt	.+2      	; 0x3598 <uartrxx+0x6ce>
    3596:	43 c0       	rjmp	.+134    	; 0x361e <uartrxx+0x754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3598:	fe 01       	movw	r30, r28
    359a:	e3 59       	subi	r30, 0x93	; 147
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	60 81       	ld	r22, Z
    35a0:	71 81       	ldd	r23, Z+1	; 0x01
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	93 81       	ldd	r25, Z+3	; 0x03
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	40 e2       	ldi	r20, 0x20	; 32
    35ac:	51 e4       	ldi	r21, 0x41	; 65
    35ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	8e 01       	movw	r16, r28
    35b8:	09 59       	subi	r16, 0x99	; 153
    35ba:	1f 4f       	sbci	r17, 0xFF	; 255
    35bc:	bc 01       	movw	r22, r24
    35be:	cd 01       	movw	r24, r26
    35c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	f8 01       	movw	r30, r16
    35ca:	91 83       	std	Z+1, r25	; 0x01
    35cc:	80 83       	st	Z, r24
    35ce:	1f c0       	rjmp	.+62     	; 0x360e <uartrxx+0x744>
    35d0:	fe 01       	movw	r30, r28
    35d2:	eb 59       	subi	r30, 0x9B	; 155
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	80 e9       	ldi	r24, 0x90	; 144
    35d8:	91 e0       	ldi	r25, 0x01	; 1
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	80 83       	st	Z, r24
    35de:	fe 01       	movw	r30, r28
    35e0:	eb 59       	subi	r30, 0x9B	; 155
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	80 81       	ld	r24, Z
    35e6:	91 81       	ldd	r25, Z+1	; 0x01
    35e8:	01 97       	sbiw	r24, 0x01	; 1
    35ea:	f1 f7       	brne	.-4      	; 0x35e8 <uartrxx+0x71e>
    35ec:	fe 01       	movw	r30, r28
    35ee:	eb 59       	subi	r30, 0x9B	; 155
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	91 83       	std	Z+1, r25	; 0x01
    35f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f6:	de 01       	movw	r26, r28
    35f8:	a9 59       	subi	r26, 0x99	; 153
    35fa:	bf 4f       	sbci	r27, 0xFF	; 255
    35fc:	fe 01       	movw	r30, r28
    35fe:	e9 59       	subi	r30, 0x99	; 153
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	80 81       	ld	r24, Z
    3604:	91 81       	ldd	r25, Z+1	; 0x01
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	11 96       	adiw	r26, 0x01	; 1
    360a:	9c 93       	st	X, r25
    360c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    360e:	fe 01       	movw	r30, r28
    3610:	e9 59       	subi	r30, 0x99	; 153
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	80 81       	ld	r24, Z
    3616:	91 81       	ldd	r25, Z+1	; 0x01
    3618:	00 97       	sbiw	r24, 0x00	; 0
    361a:	d1 f6       	brne	.-76     	; 0x35d0 <uartrxx+0x706>
    361c:	33 c4       	rjmp	.+2150   	; 0x3e84 <uartrxx+0xfba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    361e:	8e 01       	movw	r16, r28
    3620:	09 59       	subi	r16, 0x99	; 153
    3622:	1f 4f       	sbci	r17, 0xFF	; 255
    3624:	fe 01       	movw	r30, r28
    3626:	e7 59       	subi	r30, 0x97	; 151
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	f8 01       	movw	r30, r16
    363c:	91 83       	std	Z+1, r25	; 0x01
    363e:	80 83       	st	Z, r24
    3640:	de 01       	movw	r26, r28
    3642:	ad 59       	subi	r26, 0x9D	; 157
    3644:	bf 4f       	sbci	r27, 0xFF	; 255
    3646:	fe 01       	movw	r30, r28
    3648:	e9 59       	subi	r30, 0x99	; 153
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	80 81       	ld	r24, Z
    364e:	91 81       	ldd	r25, Z+1	; 0x01
    3650:	11 96       	adiw	r26, 0x01	; 1
    3652:	9c 93       	st	X, r25
    3654:	8e 93       	st	-X, r24
    3656:	fe 01       	movw	r30, r28
    3658:	ed 59       	subi	r30, 0x9D	; 157
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	80 81       	ld	r24, Z
    365e:	91 81       	ldd	r25, Z+1	; 0x01
    3660:	01 97       	sbiw	r24, 0x01	; 1
    3662:	f1 f7       	brne	.-4      	; 0x3660 <uartrxx+0x796>
    3664:	fe 01       	movw	r30, r28
    3666:	ed 59       	subi	r30, 0x9D	; 157
    3668:	ff 4f       	sbci	r31, 0xFF	; 255
    366a:	91 83       	std	Z+1, r25	; 0x01
    366c:	80 83       	st	Z, r24
    366e:	0a c4       	rjmp	.+2068   	; 0x3e84 <uartrxx+0xfba>


		_delay_ms(220);
	}

	else if ((receiveData == 4)&&(HOU>0))
    3670:	80 91 44 01 	lds	r24, 0x0144
    3674:	84 30       	cpi	r24, 0x04	; 4
    3676:	09 f0       	breq	.+2      	; 0x367a <uartrxx+0x7b0>
    3678:	bf c0       	rjmp	.+382    	; 0x37f8 <uartrxx+0x92e>
    367a:	80 91 3c 01 	lds	r24, 0x013C
    367e:	88 23       	and	r24, r24
    3680:	09 f4       	brne	.+2      	; 0x3684 <uartrxx+0x7ba>
    3682:	ba c0       	rjmp	.+372    	; 0x37f8 <uartrxx+0x92e>

	{
		HOU--;
    3684:	80 91 3c 01 	lds	r24, 0x013C
    3688:	81 50       	subi	r24, 0x01	; 1
    368a:	80 93 3c 01 	sts	0x013C, r24
    368e:	fe 01       	movw	r30, r28
    3690:	e1 5a       	subi	r30, 0xA1	; 161
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	ac e5       	ldi	r26, 0x5C	; 92
    369a:	b3 e4       	ldi	r27, 0x43	; 67
    369c:	80 83       	st	Z, r24
    369e:	91 83       	std	Z+1, r25	; 0x01
    36a0:	a2 83       	std	Z+2, r26	; 0x02
    36a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a4:	8e 01       	movw	r16, r28
    36a6:	05 5a       	subi	r16, 0xA5	; 165
    36a8:	1f 4f       	sbci	r17, 0xFF	; 255
    36aa:	fe 01       	movw	r30, r28
    36ac:	e1 5a       	subi	r30, 0xA1	; 161
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	4a e7       	ldi	r20, 0x7A	; 122
    36be:	55 e4       	ldi	r21, 0x45	; 69
    36c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	f8 01       	movw	r30, r16
    36ca:	80 83       	st	Z, r24
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	a2 83       	std	Z+2, r26	; 0x02
    36d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36d2:	fe 01       	movw	r30, r28
    36d4:	e5 5a       	subi	r30, 0xA5	; 165
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	60 81       	ld	r22, Z
    36da:	71 81       	ldd	r23, Z+1	; 0x01
    36dc:	82 81       	ldd	r24, Z+2	; 0x02
    36de:	93 81       	ldd	r25, Z+3	; 0x03
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	40 e8       	ldi	r20, 0x80	; 128
    36e6:	5f e3       	ldi	r21, 0x3F	; 63
    36e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ec:	88 23       	and	r24, r24
    36ee:	44 f4       	brge	.+16     	; 0x3700 <uartrxx+0x836>
		__ticks = 1;
    36f0:	fe 01       	movw	r30, r28
    36f2:	e7 5a       	subi	r30, 0xA7	; 167
    36f4:	ff 4f       	sbci	r31, 0xFF	; 255
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	80 83       	st	Z, r24
    36fe:	64 c0       	rjmp	.+200    	; 0x37c8 <uartrxx+0x8fe>
	else if (__tmp > 65535)
    3700:	fe 01       	movw	r30, r28
    3702:	e5 5a       	subi	r30, 0xA5	; 165
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	60 81       	ld	r22, Z
    3708:	71 81       	ldd	r23, Z+1	; 0x01
    370a:	82 81       	ldd	r24, Z+2	; 0x02
    370c:	93 81       	ldd	r25, Z+3	; 0x03
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	3f ef       	ldi	r19, 0xFF	; 255
    3712:	4f e7       	ldi	r20, 0x7F	; 127
    3714:	57 e4       	ldi	r21, 0x47	; 71
    3716:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    371a:	18 16       	cp	r1, r24
    371c:	0c f0       	brlt	.+2      	; 0x3720 <uartrxx+0x856>
    371e:	43 c0       	rjmp	.+134    	; 0x37a6 <uartrxx+0x8dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3720:	fe 01       	movw	r30, r28
    3722:	e1 5a       	subi	r30, 0xA1	; 161
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	60 81       	ld	r22, Z
    3728:	71 81       	ldd	r23, Z+1	; 0x01
    372a:	82 81       	ldd	r24, Z+2	; 0x02
    372c:	93 81       	ldd	r25, Z+3	; 0x03
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	40 e2       	ldi	r20, 0x20	; 32
    3734:	51 e4       	ldi	r21, 0x41	; 65
    3736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	8e 01       	movw	r16, r28
    3740:	07 5a       	subi	r16, 0xA7	; 167
    3742:	1f 4f       	sbci	r17, 0xFF	; 255
    3744:	bc 01       	movw	r22, r24
    3746:	cd 01       	movw	r24, r26
    3748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	f8 01       	movw	r30, r16
    3752:	91 83       	std	Z+1, r25	; 0x01
    3754:	80 83       	st	Z, r24
    3756:	1f c0       	rjmp	.+62     	; 0x3796 <uartrxx+0x8cc>
    3758:	fe 01       	movw	r30, r28
    375a:	e9 5a       	subi	r30, 0xA9	; 169
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	80 e9       	ldi	r24, 0x90	; 144
    3760:	91 e0       	ldi	r25, 0x01	; 1
    3762:	91 83       	std	Z+1, r25	; 0x01
    3764:	80 83       	st	Z, r24
    3766:	fe 01       	movw	r30, r28
    3768:	e9 5a       	subi	r30, 0xA9	; 169
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	80 81       	ld	r24, Z
    376e:	91 81       	ldd	r25, Z+1	; 0x01
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	f1 f7       	brne	.-4      	; 0x3770 <uartrxx+0x8a6>
    3774:	fe 01       	movw	r30, r28
    3776:	e9 5a       	subi	r30, 0xA9	; 169
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	91 83       	std	Z+1, r25	; 0x01
    377c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    377e:	de 01       	movw	r26, r28
    3780:	a7 5a       	subi	r26, 0xA7	; 167
    3782:	bf 4f       	sbci	r27, 0xFF	; 255
    3784:	fe 01       	movw	r30, r28
    3786:	e7 5a       	subi	r30, 0xA7	; 167
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	80 81       	ld	r24, Z
    378c:	91 81       	ldd	r25, Z+1	; 0x01
    378e:	01 97       	sbiw	r24, 0x01	; 1
    3790:	11 96       	adiw	r26, 0x01	; 1
    3792:	9c 93       	st	X, r25
    3794:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3796:	fe 01       	movw	r30, r28
    3798:	e7 5a       	subi	r30, 0xA7	; 167
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	80 81       	ld	r24, Z
    379e:	91 81       	ldd	r25, Z+1	; 0x01
    37a0:	00 97       	sbiw	r24, 0x00	; 0
    37a2:	d1 f6       	brne	.-76     	; 0x3758 <uartrxx+0x88e>
    37a4:	6f c3       	rjmp	.+1758   	; 0x3e84 <uartrxx+0xfba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a6:	8e 01       	movw	r16, r28
    37a8:	07 5a       	subi	r16, 0xA7	; 167
    37aa:	1f 4f       	sbci	r17, 0xFF	; 255
    37ac:	fe 01       	movw	r30, r28
    37ae:	e5 5a       	subi	r30, 0xA5	; 165
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	60 81       	ld	r22, Z
    37b4:	71 81       	ldd	r23, Z+1	; 0x01
    37b6:	82 81       	ldd	r24, Z+2	; 0x02
    37b8:	93 81       	ldd	r25, Z+3	; 0x03
    37ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37be:	dc 01       	movw	r26, r24
    37c0:	cb 01       	movw	r24, r22
    37c2:	f8 01       	movw	r30, r16
    37c4:	91 83       	std	Z+1, r25	; 0x01
    37c6:	80 83       	st	Z, r24
    37c8:	de 01       	movw	r26, r28
    37ca:	ab 5a       	subi	r26, 0xAB	; 171
    37cc:	bf 4f       	sbci	r27, 0xFF	; 255
    37ce:	fe 01       	movw	r30, r28
    37d0:	e7 5a       	subi	r30, 0xA7	; 167
    37d2:	ff 4f       	sbci	r31, 0xFF	; 255
    37d4:	80 81       	ld	r24, Z
    37d6:	91 81       	ldd	r25, Z+1	; 0x01
    37d8:	11 96       	adiw	r26, 0x01	; 1
    37da:	9c 93       	st	X, r25
    37dc:	8e 93       	st	-X, r24
    37de:	fe 01       	movw	r30, r28
    37e0:	eb 5a       	subi	r30, 0xAB	; 171
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	80 81       	ld	r24, Z
    37e6:	91 81       	ldd	r25, Z+1	; 0x01
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	f1 f7       	brne	.-4      	; 0x37e8 <uartrxx+0x91e>
    37ec:	fe 01       	movw	r30, r28
    37ee:	eb 5a       	subi	r30, 0xAB	; 171
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	91 83       	std	Z+1, r25	; 0x01
    37f4:	80 83       	st	Z, r24
    37f6:	46 c3       	rjmp	.+1676   	; 0x3e84 <uartrxx+0xfba>


		_delay_ms(220);
	}

	else if (receiveData == 8)
    37f8:	80 91 44 01 	lds	r24, 0x0144
    37fc:	88 30       	cpi	r24, 0x08	; 8
    37fe:	09 f0       	breq	.+2      	; 0x3802 <uartrxx+0x938>
    3800:	47 c1       	rjmp	.+654    	; 0x3a90 <uartrxx+0xbc6>

	{
		if(ALMIN==60){
    3802:	80 91 3e 01 	lds	r24, 0x013E
    3806:	8c 33       	cpi	r24, 0x3C	; 60
    3808:	09 f0       	breq	.+2      	; 0x380c <uartrxx+0x942>
    380a:	b7 c0       	rjmp	.+366    	; 0x397a <uartrxx+0xab0>
			ALMIN=0;
    380c:	10 92 3e 01 	sts	0x013E, r1
    3810:	fe 01       	movw	r30, r28
    3812:	ef 5a       	subi	r30, 0xAF	; 175
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	80 e0       	ldi	r24, 0x00	; 0
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	ac e5       	ldi	r26, 0x5C	; 92
    381c:	b3 e4       	ldi	r27, 0x43	; 67
    381e:	80 83       	st	Z, r24
    3820:	91 83       	std	Z+1, r25	; 0x01
    3822:	a2 83       	std	Z+2, r26	; 0x02
    3824:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3826:	8e 01       	movw	r16, r28
    3828:	03 5b       	subi	r16, 0xB3	; 179
    382a:	1f 4f       	sbci	r17, 0xFF	; 255
    382c:	fe 01       	movw	r30, r28
    382e:	ef 5a       	subi	r30, 0xAF	; 175
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	60 81       	ld	r22, Z
    3834:	71 81       	ldd	r23, Z+1	; 0x01
    3836:	82 81       	ldd	r24, Z+2	; 0x02
    3838:	93 81       	ldd	r25, Z+3	; 0x03
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	4a e7       	ldi	r20, 0x7A	; 122
    3840:	55 e4       	ldi	r21, 0x45	; 69
    3842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	f8 01       	movw	r30, r16
    384c:	80 83       	st	Z, r24
    384e:	91 83       	std	Z+1, r25	; 0x01
    3850:	a2 83       	std	Z+2, r26	; 0x02
    3852:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3854:	fe 01       	movw	r30, r28
    3856:	e3 5b       	subi	r30, 0xB3	; 179
    3858:	ff 4f       	sbci	r31, 0xFF	; 255
    385a:	60 81       	ld	r22, Z
    385c:	71 81       	ldd	r23, Z+1	; 0x01
    385e:	82 81       	ldd	r24, Z+2	; 0x02
    3860:	93 81       	ldd	r25, Z+3	; 0x03
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	40 e8       	ldi	r20, 0x80	; 128
    3868:	5f e3       	ldi	r21, 0x3F	; 63
    386a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    386e:	88 23       	and	r24, r24
    3870:	44 f4       	brge	.+16     	; 0x3882 <uartrxx+0x9b8>
		__ticks = 1;
    3872:	fe 01       	movw	r30, r28
    3874:	e5 5b       	subi	r30, 0xB5	; 181
    3876:	ff 4f       	sbci	r31, 0xFF	; 255
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	91 83       	std	Z+1, r25	; 0x01
    387e:	80 83       	st	Z, r24
    3880:	64 c0       	rjmp	.+200    	; 0x394a <uartrxx+0xa80>
	else if (__tmp > 65535)
    3882:	fe 01       	movw	r30, r28
    3884:	e3 5b       	subi	r30, 0xB3	; 179
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	60 81       	ld	r22, Z
    388a:	71 81       	ldd	r23, Z+1	; 0x01
    388c:	82 81       	ldd	r24, Z+2	; 0x02
    388e:	93 81       	ldd	r25, Z+3	; 0x03
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	3f ef       	ldi	r19, 0xFF	; 255
    3894:	4f e7       	ldi	r20, 0x7F	; 127
    3896:	57 e4       	ldi	r21, 0x47	; 71
    3898:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    389c:	18 16       	cp	r1, r24
    389e:	0c f0       	brlt	.+2      	; 0x38a2 <uartrxx+0x9d8>
    38a0:	43 c0       	rjmp	.+134    	; 0x3928 <uartrxx+0xa5e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a2:	fe 01       	movw	r30, r28
    38a4:	ef 5a       	subi	r30, 0xAF	; 175
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	60 81       	ld	r22, Z
    38aa:	71 81       	ldd	r23, Z+1	; 0x01
    38ac:	82 81       	ldd	r24, Z+2	; 0x02
    38ae:	93 81       	ldd	r25, Z+3	; 0x03
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	40 e2       	ldi	r20, 0x20	; 32
    38b6:	51 e4       	ldi	r21, 0x41	; 65
    38b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	8e 01       	movw	r16, r28
    38c2:	05 5b       	subi	r16, 0xB5	; 181
    38c4:	1f 4f       	sbci	r17, 0xFF	; 255
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	f8 01       	movw	r30, r16
    38d4:	91 83       	std	Z+1, r25	; 0x01
    38d6:	80 83       	st	Z, r24
    38d8:	1f c0       	rjmp	.+62     	; 0x3918 <uartrxx+0xa4e>
    38da:	fe 01       	movw	r30, r28
    38dc:	e7 5b       	subi	r30, 0xB7	; 183
    38de:	ff 4f       	sbci	r31, 0xFF	; 255
    38e0:	80 e9       	ldi	r24, 0x90	; 144
    38e2:	91 e0       	ldi	r25, 0x01	; 1
    38e4:	91 83       	std	Z+1, r25	; 0x01
    38e6:	80 83       	st	Z, r24
    38e8:	fe 01       	movw	r30, r28
    38ea:	e7 5b       	subi	r30, 0xB7	; 183
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	80 81       	ld	r24, Z
    38f0:	91 81       	ldd	r25, Z+1	; 0x01
    38f2:	01 97       	sbiw	r24, 0x01	; 1
    38f4:	f1 f7       	brne	.-4      	; 0x38f2 <uartrxx+0xa28>
    38f6:	fe 01       	movw	r30, r28
    38f8:	e7 5b       	subi	r30, 0xB7	; 183
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	91 83       	std	Z+1, r25	; 0x01
    38fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3900:	de 01       	movw	r26, r28
    3902:	a5 5b       	subi	r26, 0xB5	; 181
    3904:	bf 4f       	sbci	r27, 0xFF	; 255
    3906:	fe 01       	movw	r30, r28
    3908:	e5 5b       	subi	r30, 0xB5	; 181
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	80 81       	ld	r24, Z
    390e:	91 81       	ldd	r25, Z+1	; 0x01
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	11 96       	adiw	r26, 0x01	; 1
    3914:	9c 93       	st	X, r25
    3916:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3918:	fe 01       	movw	r30, r28
    391a:	e5 5b       	subi	r30, 0xB5	; 181
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	80 81       	ld	r24, Z
    3920:	91 81       	ldd	r25, Z+1	; 0x01
    3922:	00 97       	sbiw	r24, 0x00	; 0
    3924:	d1 f6       	brne	.-76     	; 0x38da <uartrxx+0xa10>
    3926:	2e c0       	rjmp	.+92     	; 0x3984 <uartrxx+0xaba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3928:	8e 01       	movw	r16, r28
    392a:	05 5b       	subi	r16, 0xB5	; 181
    392c:	1f 4f       	sbci	r17, 0xFF	; 255
    392e:	fe 01       	movw	r30, r28
    3930:	e3 5b       	subi	r30, 0xB3	; 179
    3932:	ff 4f       	sbci	r31, 0xFF	; 255
    3934:	60 81       	ld	r22, Z
    3936:	71 81       	ldd	r23, Z+1	; 0x01
    3938:	82 81       	ldd	r24, Z+2	; 0x02
    393a:	93 81       	ldd	r25, Z+3	; 0x03
    393c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3940:	dc 01       	movw	r26, r24
    3942:	cb 01       	movw	r24, r22
    3944:	f8 01       	movw	r30, r16
    3946:	91 83       	std	Z+1, r25	; 0x01
    3948:	80 83       	st	Z, r24
    394a:	de 01       	movw	r26, r28
    394c:	a9 5b       	subi	r26, 0xB9	; 185
    394e:	bf 4f       	sbci	r27, 0xFF	; 255
    3950:	fe 01       	movw	r30, r28
    3952:	e5 5b       	subi	r30, 0xB5	; 181
    3954:	ff 4f       	sbci	r31, 0xFF	; 255
    3956:	80 81       	ld	r24, Z
    3958:	91 81       	ldd	r25, Z+1	; 0x01
    395a:	11 96       	adiw	r26, 0x01	; 1
    395c:	9c 93       	st	X, r25
    395e:	8e 93       	st	-X, r24
    3960:	fe 01       	movw	r30, r28
    3962:	e9 5b       	subi	r30, 0xB9	; 185
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	80 81       	ld	r24, Z
    3968:	91 81       	ldd	r25, Z+1	; 0x01
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	f1 f7       	brne	.-4      	; 0x396a <uartrxx+0xaa0>
    396e:	fe 01       	movw	r30, r28
    3970:	e9 5b       	subi	r30, 0xB9	; 185
    3972:	ff 4f       	sbci	r31, 0xFF	; 255
    3974:	91 83       	std	Z+1, r25	; 0x01
    3976:	80 83       	st	Z, r24
    3978:	05 c0       	rjmp	.+10     	; 0x3984 <uartrxx+0xaba>
			_delay_ms(220);

		}
		else{
			ALMIN++;
    397a:	80 91 3e 01 	lds	r24, 0x013E
    397e:	8f 5f       	subi	r24, 0xFF	; 255
    3980:	80 93 3e 01 	sts	0x013E, r24
    3984:	fe 01       	movw	r30, r28
    3986:	ed 5b       	subi	r30, 0xBD	; 189
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	ac e5       	ldi	r26, 0x5C	; 92
    3990:	b3 e4       	ldi	r27, 0x43	; 67
    3992:	80 83       	st	Z, r24
    3994:	91 83       	std	Z+1, r25	; 0x01
    3996:	a2 83       	std	Z+2, r26	; 0x02
    3998:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399a:	8e 01       	movw	r16, r28
    399c:	01 5c       	subi	r16, 0xC1	; 193
    399e:	1f 4f       	sbci	r17, 0xFF	; 255
    39a0:	fe 01       	movw	r30, r28
    39a2:	ed 5b       	subi	r30, 0xBD	; 189
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	60 81       	ld	r22, Z
    39a8:	71 81       	ldd	r23, Z+1	; 0x01
    39aa:	82 81       	ldd	r24, Z+2	; 0x02
    39ac:	93 81       	ldd	r25, Z+3	; 0x03
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	4a e7       	ldi	r20, 0x7A	; 122
    39b4:	55 e4       	ldi	r21, 0x45	; 69
    39b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	f8 01       	movw	r30, r16
    39c0:	80 83       	st	Z, r24
    39c2:	91 83       	std	Z+1, r25	; 0x01
    39c4:	a2 83       	std	Z+2, r26	; 0x02
    39c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39c8:	fe 01       	movw	r30, r28
    39ca:	ff 96       	adiw	r30, 0x3f	; 63
    39cc:	60 81       	ld	r22, Z
    39ce:	71 81       	ldd	r23, Z+1	; 0x01
    39d0:	82 81       	ldd	r24, Z+2	; 0x02
    39d2:	93 81       	ldd	r25, Z+3	; 0x03
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	40 e8       	ldi	r20, 0x80	; 128
    39da:	5f e3       	ldi	r21, 0x3F	; 63
    39dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39e0:	88 23       	and	r24, r24
    39e2:	2c f4       	brge	.+10     	; 0x39ee <uartrxx+0xb24>
		__ticks = 1;
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	9e af       	std	Y+62, r25	; 0x3e
    39ea:	8d af       	std	Y+61, r24	; 0x3d
    39ec:	46 c0       	rjmp	.+140    	; 0x3a7a <uartrxx+0xbb0>
	else if (__tmp > 65535)
    39ee:	fe 01       	movw	r30, r28
    39f0:	ff 96       	adiw	r30, 0x3f	; 63
    39f2:	60 81       	ld	r22, Z
    39f4:	71 81       	ldd	r23, Z+1	; 0x01
    39f6:	82 81       	ldd	r24, Z+2	; 0x02
    39f8:	93 81       	ldd	r25, Z+3	; 0x03
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	3f ef       	ldi	r19, 0xFF	; 255
    39fe:	4f e7       	ldi	r20, 0x7F	; 127
    3a00:	57 e4       	ldi	r21, 0x47	; 71
    3a02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a06:	18 16       	cp	r1, r24
    3a08:	64 f5       	brge	.+88     	; 0x3a62 <uartrxx+0xb98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	ed 5b       	subi	r30, 0xBD	; 189
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	60 81       	ld	r22, Z
    3a12:	71 81       	ldd	r23, Z+1	; 0x01
    3a14:	82 81       	ldd	r24, Z+2	; 0x02
    3a16:	93 81       	ldd	r25, Z+3	; 0x03
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	40 e2       	ldi	r20, 0x20	; 32
    3a1e:	51 e4       	ldi	r21, 0x41	; 65
    3a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	bc 01       	movw	r22, r24
    3a2a:	cd 01       	movw	r24, r26
    3a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a30:	dc 01       	movw	r26, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	9e af       	std	Y+62, r25	; 0x3e
    3a36:	8d af       	std	Y+61, r24	; 0x3d
    3a38:	0f c0       	rjmp	.+30     	; 0x3a58 <uartrxx+0xb8e>
    3a3a:	80 e9       	ldi	r24, 0x90	; 144
    3a3c:	91 e0       	ldi	r25, 0x01	; 1
    3a3e:	9c af       	std	Y+60, r25	; 0x3c
    3a40:	8b af       	std	Y+59, r24	; 0x3b
    3a42:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a44:	9c ad       	ldd	r25, Y+60	; 0x3c
    3a46:	01 97       	sbiw	r24, 0x01	; 1
    3a48:	f1 f7       	brne	.-4      	; 0x3a46 <uartrxx+0xb7c>
    3a4a:	9c af       	std	Y+60, r25	; 0x3c
    3a4c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a50:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a52:	01 97       	sbiw	r24, 0x01	; 1
    3a54:	9e af       	std	Y+62, r25	; 0x3e
    3a56:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a58:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a5c:	00 97       	sbiw	r24, 0x00	; 0
    3a5e:	69 f7       	brne	.-38     	; 0x3a3a <uartrxx+0xb70>
    3a60:	11 c2       	rjmp	.+1058   	; 0x3e84 <uartrxx+0xfba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a62:	fe 01       	movw	r30, r28
    3a64:	ff 96       	adiw	r30, 0x3f	; 63
    3a66:	60 81       	ld	r22, Z
    3a68:	71 81       	ldd	r23, Z+1	; 0x01
    3a6a:	82 81       	ldd	r24, Z+2	; 0x02
    3a6c:	93 81       	ldd	r25, Z+3	; 0x03
    3a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	9e af       	std	Y+62, r25	; 0x3e
    3a78:	8d af       	std	Y+61, r24	; 0x3d
    3a7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a7e:	9a af       	std	Y+58, r25	; 0x3a
    3a80:	89 af       	std	Y+57, r24	; 0x39
    3a82:	89 ad       	ldd	r24, Y+57	; 0x39
    3a84:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	f1 f7       	brne	.-4      	; 0x3a86 <uartrxx+0xbbc>
    3a8a:	9a af       	std	Y+58, r25	; 0x3a
    3a8c:	89 af       	std	Y+57, r24	; 0x39
    3a8e:	fa c1       	rjmp	.+1012   	; 0x3e84 <uartrxx+0xfba>
		}

		_delay_ms(220);
	}

	else if ((receiveData == 2)&&(ALMIN>0))
    3a90:	80 91 44 01 	lds	r24, 0x0144
    3a94:	82 30       	cpi	r24, 0x02	; 2
    3a96:	09 f0       	breq	.+2      	; 0x3a9a <uartrxx+0xbd0>
    3a98:	7d c0       	rjmp	.+250    	; 0x3b94 <uartrxx+0xcca>
    3a9a:	80 91 3e 01 	lds	r24, 0x013E
    3a9e:	88 23       	and	r24, r24
    3aa0:	09 f4       	brne	.+2      	; 0x3aa4 <uartrxx+0xbda>
    3aa2:	78 c0       	rjmp	.+240    	; 0x3b94 <uartrxx+0xcca>

	{
		ALMIN--;
    3aa4:	80 91 3e 01 	lds	r24, 0x013E
    3aa8:	81 50       	subi	r24, 0x01	; 1
    3aaa:	80 93 3e 01 	sts	0x013E, r24
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	ac e5       	ldi	r26, 0x5C	; 92
    3ab4:	b3 e4       	ldi	r27, 0x43	; 67
    3ab6:	8d ab       	std	Y+53, r24	; 0x35
    3ab8:	9e ab       	std	Y+54, r25	; 0x36
    3aba:	af ab       	std	Y+55, r26	; 0x37
    3abc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3abe:	6d a9       	ldd	r22, Y+53	; 0x35
    3ac0:	7e a9       	ldd	r23, Y+54	; 0x36
    3ac2:	8f a9       	ldd	r24, Y+55	; 0x37
    3ac4:	98 ad       	ldd	r25, Y+56	; 0x38
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	4a e7       	ldi	r20, 0x7A	; 122
    3acc:	55 e4       	ldi	r21, 0x45	; 69
    3ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	89 ab       	std	Y+49, r24	; 0x31
    3ad8:	9a ab       	std	Y+50, r25	; 0x32
    3ada:	ab ab       	std	Y+51, r26	; 0x33
    3adc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ade:	69 a9       	ldd	r22, Y+49	; 0x31
    3ae0:	7a a9       	ldd	r23, Y+50	; 0x32
    3ae2:	8b a9       	ldd	r24, Y+51	; 0x33
    3ae4:	9c a9       	ldd	r25, Y+52	; 0x34
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e8       	ldi	r20, 0x80	; 128
    3aec:	5f e3       	ldi	r21, 0x3F	; 63
    3aee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3af2:	88 23       	and	r24, r24
    3af4:	2c f4       	brge	.+10     	; 0x3b00 <uartrxx+0xc36>
		__ticks = 1;
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	98 ab       	std	Y+48, r25	; 0x30
    3afc:	8f a7       	std	Y+47, r24	; 0x2f
    3afe:	3f c0       	rjmp	.+126    	; 0x3b7e <uartrxx+0xcb4>
	else if (__tmp > 65535)
    3b00:	69 a9       	ldd	r22, Y+49	; 0x31
    3b02:	7a a9       	ldd	r23, Y+50	; 0x32
    3b04:	8b a9       	ldd	r24, Y+51	; 0x33
    3b06:	9c a9       	ldd	r25, Y+52	; 0x34
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	3f ef       	ldi	r19, 0xFF	; 255
    3b0c:	4f e7       	ldi	r20, 0x7F	; 127
    3b0e:	57 e4       	ldi	r21, 0x47	; 71
    3b10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b14:	18 16       	cp	r1, r24
    3b16:	4c f5       	brge	.+82     	; 0x3b6a <uartrxx+0xca0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b18:	6d a9       	ldd	r22, Y+53	; 0x35
    3b1a:	7e a9       	ldd	r23, Y+54	; 0x36
    3b1c:	8f a9       	ldd	r24, Y+55	; 0x37
    3b1e:	98 ad       	ldd	r25, Y+56	; 0x38
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	40 e2       	ldi	r20, 0x20	; 32
    3b26:	51 e4       	ldi	r21, 0x41	; 65
    3b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	bc 01       	movw	r22, r24
    3b32:	cd 01       	movw	r24, r26
    3b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	98 ab       	std	Y+48, r25	; 0x30
    3b3e:	8f a7       	std	Y+47, r24	; 0x2f
    3b40:	0f c0       	rjmp	.+30     	; 0x3b60 <uartrxx+0xc96>
    3b42:	80 e9       	ldi	r24, 0x90	; 144
    3b44:	91 e0       	ldi	r25, 0x01	; 1
    3b46:	9e a7       	std	Y+46, r25	; 0x2e
    3b48:	8d a7       	std	Y+45, r24	; 0x2d
    3b4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	f1 f7       	brne	.-4      	; 0x3b4e <uartrxx+0xc84>
    3b52:	9e a7       	std	Y+46, r25	; 0x2e
    3b54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b56:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b58:	98 a9       	ldd	r25, Y+48	; 0x30
    3b5a:	01 97       	sbiw	r24, 0x01	; 1
    3b5c:	98 ab       	std	Y+48, r25	; 0x30
    3b5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b60:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b62:	98 a9       	ldd	r25, Y+48	; 0x30
    3b64:	00 97       	sbiw	r24, 0x00	; 0
    3b66:	69 f7       	brne	.-38     	; 0x3b42 <uartrxx+0xc78>
    3b68:	8d c1       	rjmp	.+794    	; 0x3e84 <uartrxx+0xfba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6a:	69 a9       	ldd	r22, Y+49	; 0x31
    3b6c:	7a a9       	ldd	r23, Y+50	; 0x32
    3b6e:	8b a9       	ldd	r24, Y+51	; 0x33
    3b70:	9c a9       	ldd	r25, Y+52	; 0x34
    3b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	98 ab       	std	Y+48, r25	; 0x30
    3b7c:	8f a7       	std	Y+47, r24	; 0x2f
    3b7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b80:	98 a9       	ldd	r25, Y+48	; 0x30
    3b82:	9c a7       	std	Y+44, r25	; 0x2c
    3b84:	8b a7       	std	Y+43, r24	; 0x2b
    3b86:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b88:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	f1 f7       	brne	.-4      	; 0x3b8a <uartrxx+0xcc0>
    3b8e:	9c a7       	std	Y+44, r25	; 0x2c
    3b90:	8b a7       	std	Y+43, r24	; 0x2b
    3b92:	78 c1       	rjmp	.+752    	; 0x3e84 <uartrxx+0xfba>


		_delay_ms(220);
	}
	else if (receiveData == 9)
    3b94:	80 91 44 01 	lds	r24, 0x0144
    3b98:	89 30       	cpi	r24, 0x09	; 9
    3b9a:	09 f0       	breq	.+2      	; 0x3b9e <uartrxx+0xcd4>
    3b9c:	f2 c0       	rjmp	.+484    	; 0x3d82 <uartrxx+0xeb8>

	{
		if(ALHOU==24){
    3b9e:	80 91 3f 01 	lds	r24, 0x013F
    3ba2:	88 31       	cpi	r24, 0x18	; 24
    3ba4:	09 f0       	breq	.+2      	; 0x3ba8 <uartrxx+0xcde>
    3ba6:	75 c0       	rjmp	.+234    	; 0x3c92 <uartrxx+0xdc8>
			ALHOU=0;
    3ba8:	10 92 3f 01 	sts	0x013F, r1
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	ac e5       	ldi	r26, 0x5C	; 92
    3bb2:	b3 e4       	ldi	r27, 0x43	; 67
    3bb4:	8f a3       	std	Y+39, r24	; 0x27
    3bb6:	98 a7       	std	Y+40, r25	; 0x28
    3bb8:	a9 a7       	std	Y+41, r26	; 0x29
    3bba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bbc:	6f a1       	ldd	r22, Y+39	; 0x27
    3bbe:	78 a5       	ldd	r23, Y+40	; 0x28
    3bc0:	89 a5       	ldd	r24, Y+41	; 0x29
    3bc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	4a e7       	ldi	r20, 0x7A	; 122
    3bca:	55 e4       	ldi	r21, 0x45	; 69
    3bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	8b a3       	std	Y+35, r24	; 0x23
    3bd6:	9c a3       	std	Y+36, r25	; 0x24
    3bd8:	ad a3       	std	Y+37, r26	; 0x25
    3bda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3bdc:	6b a1       	ldd	r22, Y+35	; 0x23
    3bde:	7c a1       	ldd	r23, Y+36	; 0x24
    3be0:	8d a1       	ldd	r24, Y+37	; 0x25
    3be2:	9e a1       	ldd	r25, Y+38	; 0x26
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	40 e8       	ldi	r20, 0x80	; 128
    3bea:	5f e3       	ldi	r21, 0x3F	; 63
    3bec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf0:	88 23       	and	r24, r24
    3bf2:	2c f4       	brge	.+10     	; 0x3bfe <uartrxx+0xd34>
		__ticks = 1;
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	9a a3       	std	Y+34, r25	; 0x22
    3bfa:	89 a3       	std	Y+33, r24	; 0x21
    3bfc:	3f c0       	rjmp	.+126    	; 0x3c7c <uartrxx+0xdb2>
	else if (__tmp > 65535)
    3bfe:	6b a1       	ldd	r22, Y+35	; 0x23
    3c00:	7c a1       	ldd	r23, Y+36	; 0x24
    3c02:	8d a1       	ldd	r24, Y+37	; 0x25
    3c04:	9e a1       	ldd	r25, Y+38	; 0x26
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	3f ef       	ldi	r19, 0xFF	; 255
    3c0a:	4f e7       	ldi	r20, 0x7F	; 127
    3c0c:	57 e4       	ldi	r21, 0x47	; 71
    3c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c12:	18 16       	cp	r1, r24
    3c14:	4c f5       	brge	.+82     	; 0x3c68 <uartrxx+0xd9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c16:	6f a1       	ldd	r22, Y+39	; 0x27
    3c18:	78 a5       	ldd	r23, Y+40	; 0x28
    3c1a:	89 a5       	ldd	r24, Y+41	; 0x29
    3c1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e2       	ldi	r20, 0x20	; 32
    3c24:	51 e4       	ldi	r21, 0x41	; 65
    3c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	bc 01       	movw	r22, r24
    3c30:	cd 01       	movw	r24, r26
    3c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	9a a3       	std	Y+34, r25	; 0x22
    3c3c:	89 a3       	std	Y+33, r24	; 0x21
    3c3e:	0f c0       	rjmp	.+30     	; 0x3c5e <uartrxx+0xd94>
    3c40:	80 e9       	ldi	r24, 0x90	; 144
    3c42:	91 e0       	ldi	r25, 0x01	; 1
    3c44:	98 a3       	std	Y+32, r25	; 0x20
    3c46:	8f 8f       	std	Y+31, r24	; 0x1f
    3c48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c4a:	98 a1       	ldd	r25, Y+32	; 0x20
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	f1 f7       	brne	.-4      	; 0x3c4c <uartrxx+0xd82>
    3c50:	98 a3       	std	Y+32, r25	; 0x20
    3c52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c54:	89 a1       	ldd	r24, Y+33	; 0x21
    3c56:	9a a1       	ldd	r25, Y+34	; 0x22
    3c58:	01 97       	sbiw	r24, 0x01	; 1
    3c5a:	9a a3       	std	Y+34, r25	; 0x22
    3c5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    3c60:	9a a1       	ldd	r25, Y+34	; 0x22
    3c62:	00 97       	sbiw	r24, 0x00	; 0
    3c64:	69 f7       	brne	.-38     	; 0x3c40 <uartrxx+0xd76>
    3c66:	1a c0       	rjmp	.+52     	; 0x3c9c <uartrxx+0xdd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c68:	6b a1       	ldd	r22, Y+35	; 0x23
    3c6a:	7c a1       	ldd	r23, Y+36	; 0x24
    3c6c:	8d a1       	ldd	r24, Y+37	; 0x25
    3c6e:	9e a1       	ldd	r25, Y+38	; 0x26
    3c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	9a a3       	std	Y+34, r25	; 0x22
    3c7a:	89 a3       	std	Y+33, r24	; 0x21
    3c7c:	89 a1       	ldd	r24, Y+33	; 0x21
    3c7e:	9a a1       	ldd	r25, Y+34	; 0x22
    3c80:	9e 8f       	std	Y+30, r25	; 0x1e
    3c82:	8d 8f       	std	Y+29, r24	; 0x1d
    3c84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c88:	01 97       	sbiw	r24, 0x01	; 1
    3c8a:	f1 f7       	brne	.-4      	; 0x3c88 <uartrxx+0xdbe>
    3c8c:	9e 8f       	std	Y+30, r25	; 0x1e
    3c8e:	8d 8f       	std	Y+29, r24	; 0x1d
    3c90:	05 c0       	rjmp	.+10     	; 0x3c9c <uartrxx+0xdd2>
			_delay_ms(220);

		}
		else{
			ALHOU++;
    3c92:	80 91 3f 01 	lds	r24, 0x013F
    3c96:	8f 5f       	subi	r24, 0xFF	; 255
    3c98:	80 93 3f 01 	sts	0x013F, r24
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	ac e5       	ldi	r26, 0x5C	; 92
    3ca2:	b3 e4       	ldi	r27, 0x43	; 67
    3ca4:	89 8f       	std	Y+25, r24	; 0x19
    3ca6:	9a 8f       	std	Y+26, r25	; 0x1a
    3ca8:	ab 8f       	std	Y+27, r26	; 0x1b
    3caa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cac:	69 8d       	ldd	r22, Y+25	; 0x19
    3cae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	4a e7       	ldi	r20, 0x7A	; 122
    3cba:	55 e4       	ldi	r21, 0x45	; 69
    3cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	8d 8b       	std	Y+21, r24	; 0x15
    3cc6:	9e 8b       	std	Y+22, r25	; 0x16
    3cc8:	af 8b       	std	Y+23, r26	; 0x17
    3cca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    3cce:	7e 89       	ldd	r23, Y+22	; 0x16
    3cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    3cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e8       	ldi	r20, 0x80	; 128
    3cda:	5f e3       	ldi	r21, 0x3F	; 63
    3cdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce0:	88 23       	and	r24, r24
    3ce2:	2c f4       	brge	.+10     	; 0x3cee <uartrxx+0xe24>
		__ticks = 1;
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	9c 8b       	std	Y+20, r25	; 0x14
    3cea:	8b 8b       	std	Y+19, r24	; 0x13
    3cec:	3f c0       	rjmp	.+126    	; 0x3d6c <uartrxx+0xea2>
	else if (__tmp > 65535)
    3cee:	6d 89       	ldd	r22, Y+21	; 0x15
    3cf0:	7e 89       	ldd	r23, Y+22	; 0x16
    3cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    3cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	3f ef       	ldi	r19, 0xFF	; 255
    3cfa:	4f e7       	ldi	r20, 0x7F	; 127
    3cfc:	57 e4       	ldi	r21, 0x47	; 71
    3cfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d02:	18 16       	cp	r1, r24
    3d04:	4c f5       	brge	.+82     	; 0x3d58 <uartrxx+0xe8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d06:	69 8d       	ldd	r22, Y+25	; 0x19
    3d08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	40 e2       	ldi	r20, 0x20	; 32
    3d14:	51 e4       	ldi	r21, 0x41	; 65
    3d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	cb 01       	movw	r24, r22
    3d1e:	bc 01       	movw	r22, r24
    3d20:	cd 01       	movw	r24, r26
    3d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d26:	dc 01       	movw	r26, r24
    3d28:	cb 01       	movw	r24, r22
    3d2a:	9c 8b       	std	Y+20, r25	; 0x14
    3d2c:	8b 8b       	std	Y+19, r24	; 0x13
    3d2e:	0f c0       	rjmp	.+30     	; 0x3d4e <uartrxx+0xe84>
    3d30:	80 e9       	ldi	r24, 0x90	; 144
    3d32:	91 e0       	ldi	r25, 0x01	; 1
    3d34:	9a 8b       	std	Y+18, r25	; 0x12
    3d36:	89 8b       	std	Y+17, r24	; 0x11
    3d38:	89 89       	ldd	r24, Y+17	; 0x11
    3d3a:	9a 89       	ldd	r25, Y+18	; 0x12
    3d3c:	01 97       	sbiw	r24, 0x01	; 1
    3d3e:	f1 f7       	brne	.-4      	; 0x3d3c <uartrxx+0xe72>
    3d40:	9a 8b       	std	Y+18, r25	; 0x12
    3d42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d44:	8b 89       	ldd	r24, Y+19	; 0x13
    3d46:	9c 89       	ldd	r25, Y+20	; 0x14
    3d48:	01 97       	sbiw	r24, 0x01	; 1
    3d4a:	9c 8b       	std	Y+20, r25	; 0x14
    3d4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d4e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d50:	9c 89       	ldd	r25, Y+20	; 0x14
    3d52:	00 97       	sbiw	r24, 0x00	; 0
    3d54:	69 f7       	brne	.-38     	; 0x3d30 <uartrxx+0xe66>
    3d56:	96 c0       	rjmp	.+300    	; 0x3e84 <uartrxx+0xfba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d58:	6d 89       	ldd	r22, Y+21	; 0x15
    3d5a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d5e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	9c 8b       	std	Y+20, r25	; 0x14
    3d6a:	8b 8b       	std	Y+19, r24	; 0x13
    3d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d70:	98 8b       	std	Y+16, r25	; 0x10
    3d72:	8f 87       	std	Y+15, r24	; 0x0f
    3d74:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d76:	98 89       	ldd	r25, Y+16	; 0x10
    3d78:	01 97       	sbiw	r24, 0x01	; 1
    3d7a:	f1 f7       	brne	.-4      	; 0x3d78 <uartrxx+0xeae>
    3d7c:	98 8b       	std	Y+16, r25	; 0x10
    3d7e:	8f 87       	std	Y+15, r24	; 0x0f
    3d80:	81 c0       	rjmp	.+258    	; 0x3e84 <uartrxx+0xfba>
		}


		_delay_ms(220);
	}
	else if ((receiveData == 11)&&(ALHOU>0))
    3d82:	80 91 44 01 	lds	r24, 0x0144
    3d86:	8b 30       	cpi	r24, 0x0B	; 11
    3d88:	09 f0       	breq	.+2      	; 0x3d8c <uartrxx+0xec2>
    3d8a:	7c c0       	rjmp	.+248    	; 0x3e84 <uartrxx+0xfba>
    3d8c:	80 91 3f 01 	lds	r24, 0x013F
    3d90:	88 23       	and	r24, r24
    3d92:	09 f4       	brne	.+2      	; 0x3d96 <uartrxx+0xecc>
    3d94:	77 c0       	rjmp	.+238    	; 0x3e84 <uartrxx+0xfba>

	{
		ALHOU--;
    3d96:	80 91 3f 01 	lds	r24, 0x013F
    3d9a:	81 50       	subi	r24, 0x01	; 1
    3d9c:	80 93 3f 01 	sts	0x013F, r24
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	ac e5       	ldi	r26, 0x5C	; 92
    3da6:	b3 e4       	ldi	r27, 0x43	; 67
    3da8:	8b 87       	std	Y+11, r24	; 0x0b
    3daa:	9c 87       	std	Y+12, r25	; 0x0c
    3dac:	ad 87       	std	Y+13, r26	; 0x0d
    3dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	4a e7       	ldi	r20, 0x7A	; 122
    3dbe:	55 e4       	ldi	r21, 0x45	; 69
    3dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc4:	dc 01       	movw	r26, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	8f 83       	std	Y+7, r24	; 0x07
    3dca:	98 87       	std	Y+8, r25	; 0x08
    3dcc:	a9 87       	std	Y+9, r26	; 0x09
    3dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd2:	78 85       	ldd	r23, Y+8	; 0x08
    3dd4:	89 85       	ldd	r24, Y+9	; 0x09
    3dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	40 e8       	ldi	r20, 0x80	; 128
    3dde:	5f e3       	ldi	r21, 0x3F	; 63
    3de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de4:	88 23       	and	r24, r24
    3de6:	2c f4       	brge	.+10     	; 0x3df2 <uartrxx+0xf28>
		__ticks = 1;
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	9e 83       	std	Y+6, r25	; 0x06
    3dee:	8d 83       	std	Y+5, r24	; 0x05
    3df0:	3f c0       	rjmp	.+126    	; 0x3e70 <uartrxx+0xfa6>
	else if (__tmp > 65535)
    3df2:	6f 81       	ldd	r22, Y+7	; 0x07
    3df4:	78 85       	ldd	r23, Y+8	; 0x08
    3df6:	89 85       	ldd	r24, Y+9	; 0x09
    3df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	3f ef       	ldi	r19, 0xFF	; 255
    3dfe:	4f e7       	ldi	r20, 0x7F	; 127
    3e00:	57 e4       	ldi	r21, 0x47	; 71
    3e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e06:	18 16       	cp	r1, r24
    3e08:	4c f5       	brge	.+82     	; 0x3e5c <uartrxx+0xf92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	40 e2       	ldi	r20, 0x20	; 32
    3e18:	51 e4       	ldi	r21, 0x41	; 65
    3e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	bc 01       	movw	r22, r24
    3e24:	cd 01       	movw	r24, r26
    3e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	9e 83       	std	Y+6, r25	; 0x06
    3e30:	8d 83       	std	Y+5, r24	; 0x05
    3e32:	0f c0       	rjmp	.+30     	; 0x3e52 <uartrxx+0xf88>
    3e34:	80 e9       	ldi	r24, 0x90	; 144
    3e36:	91 e0       	ldi	r25, 0x01	; 1
    3e38:	9c 83       	std	Y+4, r25	; 0x04
    3e3a:	8b 83       	std	Y+3, r24	; 0x03
    3e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e40:	01 97       	sbiw	r24, 0x01	; 1
    3e42:	f1 f7       	brne	.-4      	; 0x3e40 <uartrxx+0xf76>
    3e44:	9c 83       	std	Y+4, r25	; 0x04
    3e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e48:	8d 81       	ldd	r24, Y+5	; 0x05
    3e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4c:	01 97       	sbiw	r24, 0x01	; 1
    3e4e:	9e 83       	std	Y+6, r25	; 0x06
    3e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e52:	8d 81       	ldd	r24, Y+5	; 0x05
    3e54:	9e 81       	ldd	r25, Y+6	; 0x06
    3e56:	00 97       	sbiw	r24, 0x00	; 0
    3e58:	69 f7       	brne	.-38     	; 0x3e34 <uartrxx+0xf6a>
    3e5a:	14 c0       	rjmp	.+40     	; 0x3e84 <uartrxx+0xfba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5e:	78 85       	ldd	r23, Y+8	; 0x08
    3e60:	89 85       	ldd	r24, Y+9	; 0x09
    3e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	9e 83       	std	Y+6, r25	; 0x06
    3e6e:	8d 83       	std	Y+5, r24	; 0x05
    3e70:	8d 81       	ldd	r24, Y+5	; 0x05
    3e72:	9e 81       	ldd	r25, Y+6	; 0x06
    3e74:	9a 83       	std	Y+2, r25	; 0x02
    3e76:	89 83       	std	Y+1, r24	; 0x01
    3e78:	89 81       	ldd	r24, Y+1	; 0x01
    3e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7c:	01 97       	sbiw	r24, 0x01	; 1
    3e7e:	f1 f7       	brne	.-4      	; 0x3e7c <uartrxx+0xfb2>
    3e80:	9a 83       	std	Y+2, r25	; 0x02
    3e82:	89 83       	std	Y+1, r24	; 0x01


		_delay_ms(220);

	}
}
    3e84:	c8 55       	subi	r28, 0x58	; 88
    3e86:	df 4f       	sbci	r29, 0xFF	; 255
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	f8 94       	cli
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	cd bf       	out	0x3d, r28	; 61
    3e92:	cf 91       	pop	r28
    3e94:	df 91       	pop	r29
    3e96:	1f 91       	pop	r17
    3e98:	0f 91       	pop	r16
    3e9a:	08 95       	ret

00003e9c <Os_Isr_disableAllInterrupts>:
#include "Register.h"

#include "Os_Isr.h"

extern void Os_Isr_disableAllInterrupts(void)
{
    3e9c:	df 93       	push	r29
    3e9e:	cf 93       	push	r28
    3ea0:	cd b7       	in	r28, 0x3d	; 61
    3ea2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    3ea4:	af e5       	ldi	r26, 0x5F	; 95
    3ea6:	b0 e0       	ldi	r27, 0x00	; 0
    3ea8:	ef e5       	ldi	r30, 0x5F	; 95
    3eaa:	f0 e0       	ldi	r31, 0x00	; 0
    3eac:	80 81       	ld	r24, Z
    3eae:	8f 77       	andi	r24, 0x7F	; 127
    3eb0:	8c 93       	st	X, r24
}
    3eb2:	cf 91       	pop	r28
    3eb4:	df 91       	pop	r29
    3eb6:	08 95       	ret

00003eb8 <Os_Isr_EnableableAllInterrupts>:

extern void Os_Isr_EnableableAllInterrupts(void)
{
    3eb8:	df 93       	push	r29
    3eba:	cf 93       	push	r28
    3ebc:	cd b7       	in	r28, 0x3d	; 61
    3ebe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    3ec0:	af e5       	ldi	r26, 0x5F	; 95
    3ec2:	b0 e0       	ldi	r27, 0x00	; 0
    3ec4:	ef e5       	ldi	r30, 0x5F	; 95
    3ec6:	f0 e0       	ldi	r31, 0x00	; 0
    3ec8:	80 81       	ld	r24, Z
    3eca:	80 68       	ori	r24, 0x80	; 128
    3ecc:	8c 93       	st	X, r24
}
    3ece:	cf 91       	pop	r28
    3ed0:	df 91       	pop	r29
    3ed2:	08 95       	ret

00003ed4 <Os_Isr_EnableInterrupt>:


extern void Os_Isr_EnableInterrupt(Interrupt_t interrupt)
{
    3ed4:	df 93       	push	r29
    3ed6:	cf 93       	push	r28
    3ed8:	00 d0       	rcall	.+0      	; 0x3eda <Os_Isr_EnableInterrupt+0x6>
    3eda:	0f 92       	push	r0
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	89 83       	std	Y+1, r24	; 0x01

	switch (interrupt)
    3ee2:	89 81       	ldd	r24, Y+1	; 0x01
    3ee4:	28 2f       	mov	r18, r24
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	3b 83       	std	Y+3, r19	; 0x03
    3eea:	2a 83       	std	Y+2, r18	; 0x02
    3eec:	8a 81       	ldd	r24, Y+2	; 0x02
    3eee:	9b 81       	ldd	r25, Y+3	; 0x03
    3ef0:	82 30       	cpi	r24, 0x02	; 2
    3ef2:	91 05       	cpc	r25, r1
    3ef4:	51 f1       	breq	.+84     	; 0x3f4a <Os_Isr_EnableInterrupt+0x76>
    3ef6:	2a 81       	ldd	r18, Y+2	; 0x02
    3ef8:	3b 81       	ldd	r19, Y+3	; 0x03
    3efa:	23 30       	cpi	r18, 0x03	; 3
    3efc:	31 05       	cpc	r19, r1
    3efe:	54 f4       	brge	.+20     	; 0x3f14 <Os_Isr_EnableInterrupt+0x40>
    3f00:	8a 81       	ldd	r24, Y+2	; 0x02
    3f02:	9b 81       	ldd	r25, Y+3	; 0x03
    3f04:	00 97       	sbiw	r24, 0x00	; 0
    3f06:	89 f0       	breq	.+34     	; 0x3f2a <Os_Isr_EnableInterrupt+0x56>
    3f08:	2a 81       	ldd	r18, Y+2	; 0x02
    3f0a:	3b 81       	ldd	r19, Y+3	; 0x03
    3f0c:	21 30       	cpi	r18, 0x01	; 1
    3f0e:	31 05       	cpc	r19, r1
    3f10:	a1 f0       	breq	.+40     	; 0x3f3a <Os_Isr_EnableInterrupt+0x66>
    3f12:	32 c0       	rjmp	.+100    	; 0x3f78 <Os_Isr_EnableInterrupt+0xa4>
    3f14:	8a 81       	ldd	r24, Y+2	; 0x02
    3f16:	9b 81       	ldd	r25, Y+3	; 0x03
    3f18:	86 30       	cpi	r24, 0x06	; 6
    3f1a:	91 05       	cpc	r25, r1
    3f1c:	31 f1       	breq	.+76     	; 0x3f6a <Os_Isr_EnableInterrupt+0x96>
    3f1e:	2a 81       	ldd	r18, Y+2	; 0x02
    3f20:	3b 81       	ldd	r19, Y+3	; 0x03
    3f22:	29 30       	cpi	r18, 0x09	; 9
    3f24:	31 05       	cpc	r19, r1
    3f26:	c9 f0       	breq	.+50     	; 0x3f5a <Os_Isr_EnableInterrupt+0x86>
    3f28:	27 c0       	rjmp	.+78     	; 0x3f78 <Os_Isr_EnableInterrupt+0xa4>
	{
	case INT0:
		SET_BIT(GICR,GICR_INT0);
    3f2a:	ab e5       	ldi	r26, 0x5B	; 91
    3f2c:	b0 e0       	ldi	r27, 0x00	; 0
    3f2e:	eb e5       	ldi	r30, 0x5B	; 91
    3f30:	f0 e0       	ldi	r31, 0x00	; 0
    3f32:	80 81       	ld	r24, Z
    3f34:	80 64       	ori	r24, 0x40	; 64
    3f36:	8c 93       	st	X, r24
    3f38:	1f c0       	rjmp	.+62     	; 0x3f78 <Os_Isr_EnableInterrupt+0xa4>
		break;
	case INT1:
		SET_BIT(GICR,GICR_INT1);
    3f3a:	ab e5       	ldi	r26, 0x5B	; 91
    3f3c:	b0 e0       	ldi	r27, 0x00	; 0
    3f3e:	eb e5       	ldi	r30, 0x5B	; 91
    3f40:	f0 e0       	ldi	r31, 0x00	; 0
    3f42:	80 81       	ld	r24, Z
    3f44:	80 68       	ori	r24, 0x80	; 128
    3f46:	8c 93       	st	X, r24
    3f48:	17 c0       	rjmp	.+46     	; 0x3f78 <Os_Isr_EnableInterrupt+0xa4>
		break;
	case INT2:
		SET_BIT(GICR,GICR_INT2);
    3f4a:	ab e5       	ldi	r26, 0x5B	; 91
    3f4c:	b0 e0       	ldi	r27, 0x00	; 0
    3f4e:	eb e5       	ldi	r30, 0x5B	; 91
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	80 81       	ld	r24, Z
    3f54:	80 62       	ori	r24, 0x20	; 32
    3f56:	8c 93       	st	X, r24
    3f58:	0f c0       	rjmp	.+30     	; 0x3f78 <Os_Isr_EnableInterrupt+0xa4>
		break;
	case TIMER0_COMP:
		SET_BIT(TIMSK,1);
    3f5a:	a9 e5       	ldi	r26, 0x59	; 89
    3f5c:	b0 e0       	ldi	r27, 0x00	; 0
    3f5e:	e9 e5       	ldi	r30, 0x59	; 89
    3f60:	f0 e0       	ldi	r31, 0x00	; 0
    3f62:	80 81       	ld	r24, Z
    3f64:	82 60       	ori	r24, 0x02	; 2
    3f66:	8c 93       	st	X, r24
    3f68:	07 c0       	rjmp	.+14     	; 0x3f78 <Os_Isr_EnableInterrupt+0xa4>
		break;
	case TIMER1_COMPA:
			SET_BIT(TIMSK,4);
    3f6a:	a9 e5       	ldi	r26, 0x59	; 89
    3f6c:	b0 e0       	ldi	r27, 0x00	; 0
    3f6e:	e9 e5       	ldi	r30, 0x59	; 89
    3f70:	f0 e0       	ldi	r31, 0x00	; 0
    3f72:	80 81       	ld	r24, Z
    3f74:	80 61       	ori	r24, 0x10	; 16
    3f76:	8c 93       	st	X, r24
			break;
	default:
		break;
	}

}
    3f78:	0f 90       	pop	r0
    3f7a:	0f 90       	pop	r0
    3f7c:	0f 90       	pop	r0
    3f7e:	cf 91       	pop	r28
    3f80:	df 91       	pop	r29
    3f82:	08 95       	ret

00003f84 <Os_Isr_disableInterrupt>:

extern void Os_Isr_disableInterrupt(Interrupt_t interrupt)
{
    3f84:	df 93       	push	r29
    3f86:	cf 93       	push	r28
    3f88:	00 d0       	rcall	.+0      	; 0x3f8a <Os_Isr_disableInterrupt+0x6>
    3f8a:	0f 92       	push	r0
    3f8c:	cd b7       	in	r28, 0x3d	; 61
    3f8e:	de b7       	in	r29, 0x3e	; 62
    3f90:	89 83       	std	Y+1, r24	; 0x01

	switch (interrupt)
    3f92:	89 81       	ldd	r24, Y+1	; 0x01
    3f94:	28 2f       	mov	r18, r24
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	3b 83       	std	Y+3, r19	; 0x03
    3f9a:	2a 83       	std	Y+2, r18	; 0x02
    3f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa0:	81 30       	cpi	r24, 0x01	; 1
    3fa2:	91 05       	cpc	r25, r1
    3fa4:	e9 f0       	breq	.+58     	; 0x3fe0 <Os_Isr_disableInterrupt+0x5c>
    3fa6:	2a 81       	ldd	r18, Y+2	; 0x02
    3fa8:	3b 81       	ldd	r19, Y+3	; 0x03
    3faa:	22 30       	cpi	r18, 0x02	; 2
    3fac:	31 05       	cpc	r19, r1
    3fae:	2c f4       	brge	.+10     	; 0x3fba <Os_Isr_disableInterrupt+0x36>
    3fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb4:	00 97       	sbiw	r24, 0x00	; 0
    3fb6:	61 f0       	breq	.+24     	; 0x3fd0 <Os_Isr_disableInterrupt+0x4c>
    3fb8:	2a c0       	rjmp	.+84     	; 0x400e <Os_Isr_disableInterrupt+0x8a>
    3fba:	2a 81       	ldd	r18, Y+2	; 0x02
    3fbc:	3b 81       	ldd	r19, Y+3	; 0x03
    3fbe:	22 30       	cpi	r18, 0x02	; 2
    3fc0:	31 05       	cpc	r19, r1
    3fc2:	b1 f0       	breq	.+44     	; 0x3ff0 <Os_Isr_disableInterrupt+0x6c>
    3fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3fc8:	89 30       	cpi	r24, 0x09	; 9
    3fca:	91 05       	cpc	r25, r1
    3fcc:	c9 f0       	breq	.+50     	; 0x4000 <Os_Isr_disableInterrupt+0x7c>
    3fce:	1f c0       	rjmp	.+62     	; 0x400e <Os_Isr_disableInterrupt+0x8a>
	{
	case INT0:
		CLR_BIT(GICR,GICR_INT0);
    3fd0:	ab e5       	ldi	r26, 0x5B	; 91
    3fd2:	b0 e0       	ldi	r27, 0x00	; 0
    3fd4:	eb e5       	ldi	r30, 0x5B	; 91
    3fd6:	f0 e0       	ldi	r31, 0x00	; 0
    3fd8:	80 81       	ld	r24, Z
    3fda:	8f 7b       	andi	r24, 0xBF	; 191
    3fdc:	8c 93       	st	X, r24
    3fde:	17 c0       	rjmp	.+46     	; 0x400e <Os_Isr_disableInterrupt+0x8a>
		break;
	case INT1:
		CLR_BIT(GICR,GICR_INT1);
    3fe0:	ab e5       	ldi	r26, 0x5B	; 91
    3fe2:	b0 e0       	ldi	r27, 0x00	; 0
    3fe4:	eb e5       	ldi	r30, 0x5B	; 91
    3fe6:	f0 e0       	ldi	r31, 0x00	; 0
    3fe8:	80 81       	ld	r24, Z
    3fea:	8f 77       	andi	r24, 0x7F	; 127
    3fec:	8c 93       	st	X, r24
    3fee:	0f c0       	rjmp	.+30     	; 0x400e <Os_Isr_disableInterrupt+0x8a>
		break;
	case INT2:
		CLR_BIT(GICR,GICR_INT2);
    3ff0:	ab e5       	ldi	r26, 0x5B	; 91
    3ff2:	b0 e0       	ldi	r27, 0x00	; 0
    3ff4:	eb e5       	ldi	r30, 0x5B	; 91
    3ff6:	f0 e0       	ldi	r31, 0x00	; 0
    3ff8:	80 81       	ld	r24, Z
    3ffa:	8f 7d       	andi	r24, 0xDF	; 223
    3ffc:	8c 93       	st	X, r24
    3ffe:	07 c0       	rjmp	.+14     	; 0x400e <Os_Isr_disableInterrupt+0x8a>
		break;
	case TIMER0_COMP:
		CLR_BIT(TIMSK,1);
    4000:	a9 e5       	ldi	r26, 0x59	; 89
    4002:	b0 e0       	ldi	r27, 0x00	; 0
    4004:	e9 e5       	ldi	r30, 0x59	; 89
    4006:	f0 e0       	ldi	r31, 0x00	; 0
    4008:	80 81       	ld	r24, Z
    400a:	8d 7f       	andi	r24, 0xFD	; 253
    400c:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
    4012:	0f 90       	pop	r0
    4014:	cf 91       	pop	r28
    4016:	df 91       	pop	r29
    4018:	08 95       	ret

0000401a <__vector_7>:
}
#endif
#if E_TIMER1_COMPA == STD_ENABLED
void __vector_7(void) __attribute__((signal,used));
void __vector_7(void)
{
    401a:	1f 92       	push	r1
    401c:	0f 92       	push	r0
    401e:	0f b6       	in	r0, 0x3f	; 63
    4020:	0f 92       	push	r0
    4022:	11 24       	eor	r1, r1
    4024:	2f 93       	push	r18
    4026:	3f 93       	push	r19
    4028:	4f 93       	push	r20
    402a:	5f 93       	push	r21
    402c:	6f 93       	push	r22
    402e:	7f 93       	push	r23
    4030:	8f 93       	push	r24
    4032:	9f 93       	push	r25
    4034:	af 93       	push	r26
    4036:	bf 93       	push	r27
    4038:	ef 93       	push	r30
    403a:	ff 93       	push	r31
    403c:	df 93       	push	r29
    403e:	cf 93       	push	r28
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62
	if(ivt[6].callBackFucntion != NULL_PTR)
    4044:	80 91 06 01 	lds	r24, 0x0106
    4048:	90 91 07 01 	lds	r25, 0x0107
    404c:	00 97       	sbiw	r24, 0x00	; 0
    404e:	29 f0       	breq	.+10     	; 0x405a <__vector_7+0x40>
	{
		ivt[6].callBackFucntion();
    4050:	e0 91 06 01 	lds	r30, 0x0106
    4054:	f0 91 07 01 	lds	r31, 0x0107
    4058:	09 95       	icall
	}
}
    405a:	cf 91       	pop	r28
    405c:	df 91       	pop	r29
    405e:	ff 91       	pop	r31
    4060:	ef 91       	pop	r30
    4062:	bf 91       	pop	r27
    4064:	af 91       	pop	r26
    4066:	9f 91       	pop	r25
    4068:	8f 91       	pop	r24
    406a:	7f 91       	pop	r23
    406c:	6f 91       	pop	r22
    406e:	5f 91       	pop	r21
    4070:	4f 91       	pop	r20
    4072:	3f 91       	pop	r19
    4074:	2f 91       	pop	r18
    4076:	0f 90       	pop	r0
    4078:	0f be       	out	0x3f, r0	; 63
    407a:	0f 90       	pop	r0
    407c:	1f 90       	pop	r1
    407e:	18 95       	reti

00004080 <__vector_13>:
}
#endif
#if E_USART_RXC    == STD_ENABLED
void __vector_13(void) __attribute__((signal,used));
void __vector_13(void)
{
    4080:	1f 92       	push	r1
    4082:	0f 92       	push	r0
    4084:	0f b6       	in	r0, 0x3f	; 63
    4086:	0f 92       	push	r0
    4088:	11 24       	eor	r1, r1
    408a:	2f 93       	push	r18
    408c:	3f 93       	push	r19
    408e:	4f 93       	push	r20
    4090:	5f 93       	push	r21
    4092:	6f 93       	push	r22
    4094:	7f 93       	push	r23
    4096:	8f 93       	push	r24
    4098:	9f 93       	push	r25
    409a:	af 93       	push	r26
    409c:	bf 93       	push	r27
    409e:	ef 93       	push	r30
    40a0:	ff 93       	push	r31
    40a2:	df 93       	push	r29
    40a4:	cf 93       	push	r28
    40a6:	cd b7       	in	r28, 0x3d	; 61
    40a8:	de b7       	in	r29, 0x3e	; 62
	if(ivt[12].callBackFucntion != NULL_PTR)
    40aa:	80 91 12 01 	lds	r24, 0x0112
    40ae:	90 91 13 01 	lds	r25, 0x0113
    40b2:	00 97       	sbiw	r24, 0x00	; 0
    40b4:	29 f0       	breq	.+10     	; 0x40c0 <__vector_13+0x40>
	{
		ivt[12].callBackFucntion();
    40b6:	e0 91 12 01 	lds	r30, 0x0112
    40ba:	f0 91 13 01 	lds	r31, 0x0113
    40be:	09 95       	icall
	}
}
    40c0:	cf 91       	pop	r28
    40c2:	df 91       	pop	r29
    40c4:	ff 91       	pop	r31
    40c6:	ef 91       	pop	r30
    40c8:	bf 91       	pop	r27
    40ca:	af 91       	pop	r26
    40cc:	9f 91       	pop	r25
    40ce:	8f 91       	pop	r24
    40d0:	7f 91       	pop	r23
    40d2:	6f 91       	pop	r22
    40d4:	5f 91       	pop	r21
    40d6:	4f 91       	pop	r20
    40d8:	3f 91       	pop	r19
    40da:	2f 91       	pop	r18
    40dc:	0f 90       	pop	r0
    40de:	0f be       	out	0x3f, r0	; 63
    40e0:	0f 90       	pop	r0
    40e2:	1f 90       	pop	r1
    40e4:	18 95       	reti

000040e6 <Uart_init>:
#include "BIT_MATH.h"
#include "Register.h"
#include "Uart.h"

void Uart_init(void)
{
    40e6:	df 93       	push	r29
    40e8:	cf 93       	push	r28
    40ea:	0f 92       	push	r0
    40ec:	cd b7       	in	r28, 0x3d	; 61
    40ee:	de b7       	in	r29, 0x3e	; 62
	uint8 UBRR_Value = 103; // 2400 baud rate
    40f0:	87 e6       	ldi	r24, 0x67	; 103
    40f2:	89 83       	std	Y+1, r24	; 0x01

		UBRRH = (uint8) (UBRR_Value >> 8);
    40f4:	e0 e4       	ldi	r30, 0x40	; 64
    40f6:	f0 e0       	ldi	r31, 0x00	; 0
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	88 2f       	mov	r24, r24
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	89 2f       	mov	r24, r25
    4100:	99 0f       	add	r25, r25
    4102:	99 0b       	sbc	r25, r25
    4104:	80 83       	st	Z, r24

		UBRRL = (uint8) UBRR_Value;
    4106:	e9 e2       	ldi	r30, 0x29	; 41
    4108:	f0 e0       	ldi	r31, 0x00	; 0
    410a:	89 81       	ldd	r24, Y+1	; 0x01
    410c:	80 83       	st	Z, r24

		UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));
    410e:	ea e2       	ldi	r30, 0x2A	; 42
    4110:	f0 e0       	ldi	r31, 0x00	; 0
    4112:	88 e9       	ldi	r24, 0x98	; 152
    4114:	80 83       	st	Z, r24
		UCSRC = (1 << URSEL) | (1 << UCSZ0)|(1 << UCSZ1);
    4116:	e0 e4       	ldi	r30, 0x40	; 64
    4118:	f0 e0       	ldi	r31, 0x00	; 0
    411a:	86 e8       	ldi	r24, 0x86	; 134
    411c:	80 83       	st	Z, r24

	SET_BIT(UCSRB,TXEN);
	SET_BIT(UCSRB,RXEN);*/


}
    411e:	0f 90       	pop	r0
    4120:	cf 91       	pop	r28
    4122:	df 91       	pop	r29
    4124:	08 95       	ret

00004126 <Uart_send>:
uint8 RecieveSize =0;
uint8 * RecieveBuff;
uint8 recieveBusyFlag =0;

void Uart_send(uint8 * sentBuffer, uint8 size )
{
    4126:	df 93       	push	r29
    4128:	cf 93       	push	r28
    412a:	00 d0       	rcall	.+0      	; 0x412c <Uart_send+0x6>
    412c:	00 d0       	rcall	.+0      	; 0x412e <Uart_send+0x8>
    412e:	cd b7       	in	r28, 0x3d	; 61
    4130:	de b7       	in	r29, 0x3e	; 62
    4132:	9b 83       	std	Y+3, r25	; 0x03
    4134:	8a 83       	std	Y+2, r24	; 0x02
    4136:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	if(BusyFlag ==0)
    4138:	80 91 40 01 	lds	r24, 0x0140
    413c:	88 23       	and	r24, r24
    413e:	61 f5       	brne	.+88     	; 0x4198 <Uart_send+0x72>
	{
		for(i=0;i<size;i++)
    4140:	19 82       	std	Y+1, r1	; 0x01
    4142:	13 c0       	rjmp	.+38     	; 0x416a <Uart_send+0x44>
		{
			SentBuff[i]=sentBuffer[i];
    4144:	89 81       	ldd	r24, Y+1	; 0x01
    4146:	48 2f       	mov	r20, r24
    4148:	50 e0       	ldi	r21, 0x00	; 0
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	28 2f       	mov	r18, r24
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	8a 81       	ldd	r24, Y+2	; 0x02
    4152:	9b 81       	ldd	r25, Y+3	; 0x03
    4154:	fc 01       	movw	r30, r24
    4156:	e2 0f       	add	r30, r18
    4158:	f3 1f       	adc	r31, r19
    415a:	80 81       	ld	r24, Z
    415c:	fa 01       	movw	r30, r20
    415e:	e8 5b       	subi	r30, 0xB8	; 184
    4160:	fe 4f       	sbci	r31, 0xFE	; 254
    4162:	80 83       	st	Z, r24
void Uart_send(uint8 * sentBuffer, uint8 size )
{
	uint8 i;
	if(BusyFlag ==0)
	{
		for(i=0;i<size;i++)
    4164:	89 81       	ldd	r24, Y+1	; 0x01
    4166:	8f 5f       	subi	r24, 0xFF	; 255
    4168:	89 83       	std	Y+1, r24	; 0x01
    416a:	99 81       	ldd	r25, Y+1	; 0x01
    416c:	8c 81       	ldd	r24, Y+4	; 0x04
    416e:	98 17       	cp	r25, r24
    4170:	48 f3       	brcs	.-46     	; 0x4144 <Uart_send+0x1e>
		{
			SentBuff[i]=sentBuffer[i];
		}
		SentSize = size;
    4172:	8c 81       	ldd	r24, Y+4	; 0x04
    4174:	80 93 41 01 	sts	0x0141, r24
		SentBuffCurrentLocation=0;
    4178:	10 92 47 01 	sts	0x0147, r1
		UDR = SentBuff[SentBuffCurrentLocation];
    417c:	ac e2       	ldi	r26, 0x2C	; 44
    417e:	b0 e0       	ldi	r27, 0x00	; 0
    4180:	80 91 47 01 	lds	r24, 0x0147
    4184:	88 2f       	mov	r24, r24
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	fc 01       	movw	r30, r24
    418a:	e8 5b       	subi	r30, 0xB8	; 184
    418c:	fe 4f       	sbci	r31, 0xFE	; 254
    418e:	80 81       	ld	r24, Z
    4190:	8c 93       	st	X, r24
		BusyFlag = 1;
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	80 93 40 01 	sts	0x0140, r24
	}
	else
	{
	}
}
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	0f 90       	pop	r0
    419e:	0f 90       	pop	r0
    41a0:	cf 91       	pop	r28
    41a2:	df 91       	pop	r29
    41a4:	08 95       	ret

000041a6 <UartTXISR>:
extern void UartTXISR(void)
{
    41a6:	df 93       	push	r29
    41a8:	cf 93       	push	r28
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62


	SentBuffCurrentLocation++;
    41ae:	80 91 47 01 	lds	r24, 0x0147
    41b2:	8f 5f       	subi	r24, 0xFF	; 255
    41b4:	80 93 47 01 	sts	0x0147, r24
	if(SentBuffCurrentLocation<SentSize)
    41b8:	90 91 47 01 	lds	r25, 0x0147
    41bc:	80 91 41 01 	lds	r24, 0x0141
    41c0:	98 17       	cp	r25, r24
    41c2:	60 f4       	brcc	.+24     	; 0x41dc <UartTXISR+0x36>
	{
		UDR = SentBuff[SentBuffCurrentLocation];
    41c4:	ac e2       	ldi	r26, 0x2C	; 44
    41c6:	b0 e0       	ldi	r27, 0x00	; 0
    41c8:	80 91 47 01 	lds	r24, 0x0147
    41cc:	88 2f       	mov	r24, r24
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	fc 01       	movw	r30, r24
    41d2:	e8 5b       	subi	r30, 0xB8	; 184
    41d4:	fe 4f       	sbci	r31, 0xFE	; 254
    41d6:	80 81       	ld	r24, Z
    41d8:	8c 93       	st	X, r24
    41da:	08 c0       	rjmp	.+16     	; 0x41ec <UartTXISR+0x46>
	}
	else if(SentBuffCurrentLocation >= SentSize)
    41dc:	90 91 47 01 	lds	r25, 0x0147
    41e0:	80 91 41 01 	lds	r24, 0x0141
    41e4:	98 17       	cp	r25, r24
    41e6:	10 f0       	brcs	.+4      	; 0x41ec <UartTXISR+0x46>
	{
		BusyFlag = 0;
    41e8:	10 92 40 01 	sts	0x0140, r1
	}


}
    41ec:	cf 91       	pop	r28
    41ee:	df 91       	pop	r29
    41f0:	08 95       	ret

000041f2 <Uart_recieve>:


void Uart_recieve(uint8 * RecieveBuffer, uint8 size )
{
    41f2:	df 93       	push	r29
    41f4:	cf 93       	push	r28
    41f6:	00 d0       	rcall	.+0      	; 0x41f8 <Uart_recieve+0x6>
    41f8:	0f 92       	push	r0
    41fa:	cd b7       	in	r28, 0x3d	; 61
    41fc:	de b7       	in	r29, 0x3e	; 62
    41fe:	9a 83       	std	Y+2, r25	; 0x02
    4200:	89 83       	std	Y+1, r24	; 0x01
    4202:	6b 83       	std	Y+3, r22	; 0x03

  RecieveBuff = RecieveBuffer;
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	9a 81       	ldd	r25, Y+2	; 0x02
    4208:	90 93 46 01 	sts	0x0146, r25
    420c:	80 93 45 01 	sts	0x0145, r24
  RecieveSize = size;
    4210:	8b 81       	ldd	r24, Y+3	; 0x03
    4212:	80 93 42 01 	sts	0x0142, r24
  recieveBusyFlag = 1;
    4216:	81 e0       	ldi	r24, 0x01	; 1
    4218:	80 93 43 01 	sts	0x0143, r24
  RecieveBuffCurrentLocation=0;
    421c:	10 92 ac 01 	sts	0x01AC, r1


}
    4220:	0f 90       	pop	r0
    4222:	0f 90       	pop	r0
    4224:	0f 90       	pop	r0
    4226:	cf 91       	pop	r28
    4228:	df 91       	pop	r29
    422a:	08 95       	ret

0000422c <UartRXISR>:
extern void UartRXISR(void)
{
    422c:	df 93       	push	r29
    422e:	cf 93       	push	r28
    4230:	cd b7       	in	r28, 0x3d	; 61
    4232:	de b7       	in	r29, 0x3e	; 62
	if(recieveBusyFlag == 1)
    4234:	80 91 43 01 	lds	r24, 0x0143
    4238:	81 30       	cpi	r24, 0x01	; 1
    423a:	e1 f4       	brne	.+56     	; 0x4274 <UartRXISR+0x48>
	{
		RecieveBuff[RecieveBuffCurrentLocation] = UDR;
    423c:	20 91 45 01 	lds	r18, 0x0145
    4240:	30 91 46 01 	lds	r19, 0x0146
    4244:	80 91 ac 01 	lds	r24, 0x01AC
    4248:	88 2f       	mov	r24, r24
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	d9 01       	movw	r26, r18
    424e:	a8 0f       	add	r26, r24
    4250:	b9 1f       	adc	r27, r25
    4252:	ec e2       	ldi	r30, 0x2C	; 44
    4254:	f0 e0       	ldi	r31, 0x00	; 0
    4256:	80 81       	ld	r24, Z
    4258:	8c 93       	st	X, r24
		RecieveBuffCurrentLocation++;
    425a:	80 91 ac 01 	lds	r24, 0x01AC
    425e:	8f 5f       	subi	r24, 0xFF	; 255
    4260:	80 93 ac 01 	sts	0x01AC, r24
		if(RecieveBuffCurrentLocation>= RecieveSize )
    4264:	90 91 ac 01 	lds	r25, 0x01AC
    4268:	80 91 42 01 	lds	r24, 0x0142
    426c:	98 17       	cp	r25, r24
    426e:	10 f0       	brcs	.+4      	; 0x4274 <UartRXISR+0x48>
		{
			recieveBusyFlag=0;
    4270:	10 92 43 01 	sts	0x0143, r1
	}




}
    4274:	cf 91       	pop	r28
    4276:	df 91       	pop	r29
    4278:	08 95       	ret

0000427a <__udivmodqi4>:
    427a:	99 1b       	sub	r25, r25
    427c:	79 e0       	ldi	r23, 0x09	; 9
    427e:	04 c0       	rjmp	.+8      	; 0x4288 <__udivmodqi4_ep>

00004280 <__udivmodqi4_loop>:
    4280:	99 1f       	adc	r25, r25
    4282:	96 17       	cp	r25, r22
    4284:	08 f0       	brcs	.+2      	; 0x4288 <__udivmodqi4_ep>
    4286:	96 1b       	sub	r25, r22

00004288 <__udivmodqi4_ep>:
    4288:	88 1f       	adc	r24, r24
    428a:	7a 95       	dec	r23
    428c:	c9 f7       	brne	.-14     	; 0x4280 <__udivmodqi4_loop>
    428e:	80 95       	com	r24
    4290:	08 95       	ret

00004292 <__prologue_saves__>:
    4292:	2f 92       	push	r2
    4294:	3f 92       	push	r3
    4296:	4f 92       	push	r4
    4298:	5f 92       	push	r5
    429a:	6f 92       	push	r6
    429c:	7f 92       	push	r7
    429e:	8f 92       	push	r8
    42a0:	9f 92       	push	r9
    42a2:	af 92       	push	r10
    42a4:	bf 92       	push	r11
    42a6:	cf 92       	push	r12
    42a8:	df 92       	push	r13
    42aa:	ef 92       	push	r14
    42ac:	ff 92       	push	r15
    42ae:	0f 93       	push	r16
    42b0:	1f 93       	push	r17
    42b2:	cf 93       	push	r28
    42b4:	df 93       	push	r29
    42b6:	cd b7       	in	r28, 0x3d	; 61
    42b8:	de b7       	in	r29, 0x3e	; 62
    42ba:	ca 1b       	sub	r28, r26
    42bc:	db 0b       	sbc	r29, r27
    42be:	0f b6       	in	r0, 0x3f	; 63
    42c0:	f8 94       	cli
    42c2:	de bf       	out	0x3e, r29	; 62
    42c4:	0f be       	out	0x3f, r0	; 63
    42c6:	cd bf       	out	0x3d, r28	; 61
    42c8:	09 94       	ijmp

000042ca <__epilogue_restores__>:
    42ca:	2a 88       	ldd	r2, Y+18	; 0x12
    42cc:	39 88       	ldd	r3, Y+17	; 0x11
    42ce:	48 88       	ldd	r4, Y+16	; 0x10
    42d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    42d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    42d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    42d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    42d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    42da:	aa 84       	ldd	r10, Y+10	; 0x0a
    42dc:	b9 84       	ldd	r11, Y+9	; 0x09
    42de:	c8 84       	ldd	r12, Y+8	; 0x08
    42e0:	df 80       	ldd	r13, Y+7	; 0x07
    42e2:	ee 80       	ldd	r14, Y+6	; 0x06
    42e4:	fd 80       	ldd	r15, Y+5	; 0x05
    42e6:	0c 81       	ldd	r16, Y+4	; 0x04
    42e8:	1b 81       	ldd	r17, Y+3	; 0x03
    42ea:	aa 81       	ldd	r26, Y+2	; 0x02
    42ec:	b9 81       	ldd	r27, Y+1	; 0x01
    42ee:	ce 0f       	add	r28, r30
    42f0:	d1 1d       	adc	r29, r1
    42f2:	0f b6       	in	r0, 0x3f	; 63
    42f4:	f8 94       	cli
    42f6:	de bf       	out	0x3e, r29	; 62
    42f8:	0f be       	out	0x3f, r0	; 63
    42fa:	cd bf       	out	0x3d, r28	; 61
    42fc:	ed 01       	movw	r28, r26
    42fe:	08 95       	ret

00004300 <itoa>:
    4300:	fb 01       	movw	r30, r22
    4302:	9f 01       	movw	r18, r30
    4304:	e8 94       	clt
    4306:	42 30       	cpi	r20, 0x02	; 2
    4308:	c4 f0       	brlt	.+48     	; 0x433a <itoa+0x3a>
    430a:	45 32       	cpi	r20, 0x25	; 37
    430c:	b4 f4       	brge	.+44     	; 0x433a <itoa+0x3a>
    430e:	4a 30       	cpi	r20, 0x0A	; 10
    4310:	29 f4       	brne	.+10     	; 0x431c <itoa+0x1c>
    4312:	97 fb       	bst	r25, 7
    4314:	1e f4       	brtc	.+6      	; 0x431c <itoa+0x1c>
    4316:	90 95       	com	r25
    4318:	81 95       	neg	r24
    431a:	9f 4f       	sbci	r25, 0xFF	; 255
    431c:	64 2f       	mov	r22, r20
    431e:	77 27       	eor	r23, r23
    4320:	0e 94 b1 21 	call	0x4362	; 0x4362 <__udivmodhi4>
    4324:	80 5d       	subi	r24, 0xD0	; 208
    4326:	8a 33       	cpi	r24, 0x3A	; 58
    4328:	0c f0       	brlt	.+2      	; 0x432c <itoa+0x2c>
    432a:	89 5d       	subi	r24, 0xD9	; 217
    432c:	81 93       	st	Z+, r24
    432e:	cb 01       	movw	r24, r22
    4330:	00 97       	sbiw	r24, 0x00	; 0
    4332:	a1 f7       	brne	.-24     	; 0x431c <itoa+0x1c>
    4334:	16 f4       	brtc	.+4      	; 0x433a <itoa+0x3a>
    4336:	5d e2       	ldi	r21, 0x2D	; 45
    4338:	51 93       	st	Z+, r21
    433a:	10 82       	st	Z, r1
    433c:	c9 01       	movw	r24, r18
    433e:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <strrev>

00004342 <strrev>:
    4342:	dc 01       	movw	r26, r24
    4344:	fc 01       	movw	r30, r24
    4346:	67 2f       	mov	r22, r23
    4348:	71 91       	ld	r23, Z+
    434a:	77 23       	and	r23, r23
    434c:	e1 f7       	brne	.-8      	; 0x4346 <strrev+0x4>
    434e:	32 97       	sbiw	r30, 0x02	; 2
    4350:	04 c0       	rjmp	.+8      	; 0x435a <strrev+0x18>
    4352:	7c 91       	ld	r23, X
    4354:	6d 93       	st	X+, r22
    4356:	70 83       	st	Z, r23
    4358:	62 91       	ld	r22, -Z
    435a:	ae 17       	cp	r26, r30
    435c:	bf 07       	cpc	r27, r31
    435e:	c8 f3       	brcs	.-14     	; 0x4352 <strrev+0x10>
    4360:	08 95       	ret

00004362 <__udivmodhi4>:
    4362:	aa 1b       	sub	r26, r26
    4364:	bb 1b       	sub	r27, r27
    4366:	51 e1       	ldi	r21, 0x11	; 17
    4368:	07 c0       	rjmp	.+14     	; 0x4378 <__udivmodhi4_ep>

0000436a <__udivmodhi4_loop>:
    436a:	aa 1f       	adc	r26, r26
    436c:	bb 1f       	adc	r27, r27
    436e:	a6 17       	cp	r26, r22
    4370:	b7 07       	cpc	r27, r23
    4372:	10 f0       	brcs	.+4      	; 0x4378 <__udivmodhi4_ep>
    4374:	a6 1b       	sub	r26, r22
    4376:	b7 0b       	sbc	r27, r23

00004378 <__udivmodhi4_ep>:
    4378:	88 1f       	adc	r24, r24
    437a:	99 1f       	adc	r25, r25
    437c:	5a 95       	dec	r21
    437e:	a9 f7       	brne	.-22     	; 0x436a <__udivmodhi4_loop>
    4380:	80 95       	com	r24
    4382:	90 95       	com	r25
    4384:	bc 01       	movw	r22, r24
    4386:	cd 01       	movw	r24, r26
    4388:	08 95       	ret

0000438a <_exit>:
    438a:	f8 94       	cli

0000438c <__stop_program>:
    438c:	ff cf       	rjmp	.-2      	; 0x438c <__stop_program>
